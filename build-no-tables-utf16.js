var liblouisBuild = function(liblouisBuild) {
  liblouisBuild = liblouisBuild || {};
  var Module = liblouisBuild;


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof liblouisBuild !== 'undefined' ? liblouisBuild : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 39808;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,128,0,128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,128,0,128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,128,0,128,0,128,0,0,142,6,0,0,150,6,0,0,157,6,0,0,167,6,0,0,178,6,0,0,190,6,0,0,202,6,0,0,210,6,0,0,218,6,0,0,232,6,0,0,246,6,0,0,4,7,0,0,12,7,0,0,28,7,0,0,38,7,0,0,53,7,0,0,61,7,0,0,78,7,0,0,101,7,0,0,120,7,0,0,133,7,0,0,148,7,0,0,162,7,0,0,178,7,0,0,197,7,0,0,207,7,0,0,218,7,0,0,230,7,0,0,242,7,0,0,250,7,0,0,2,8,0,0,16,8,0,0,30,8,0,0,44,8,0,0,58,8,0,0,72,8,0,0,80,8,0,0,93,8,0,0,106,8,0,0,119,8,0,0,132,8,0,0,145,8,0,0,158,8,0,0,170,8,0,0,182,8,0,0,194,8,0,0,202,8,0,0,217,8,0,0,225,8,0,0,234,8,0,0,240,8,0,0,246,8,0,0,252,8,0,0,3,9,0,0,10,9,0,0,16,9,0,0,31,9,0,0,45,9,0,0,52,9,0,0,59,9,0,0,66,9,0,0,72,9,0,0,78,9,0,0,90,9,0,0,95,9,0,0,100,9,0,0,107,9,0,0,117,9,0,0,127,9,0,0,136,9,0,0,142,9,0,0,151,9,0,0,159,9,0,0,167,9,0,0,175,9,0,0,183,9,0,0,189,9,0,0,195,9,0,0,201,9,0,0,210,9,0,0,218,9,0,0,229,9,0,0,240,9,0,0,247,9,0,0,1,10,0,0,9,10,0,0,18,10,0,0,25,10,0,0,33,10,0,0,41,10,0,0,51,10,0,0,56,10,0,0,65,10,0,0,73,10,0,0,82,10,0,0,90,10,0,0,102,10,0,0,110,10,0,0,118,10,0,0,126,10,0,0,137,10,0,0,145,10,0,0,156,10,0,0,164,10,0,0,172,10,0,0,181,10,0,0,188,10,0,0,195,10,0,0,202,10,0,0,211,10,0,0,218,10,0,0,226,10,0,0,232,10,0,0,242,10,0,0,4,0,0,0,49,6,0,0,128,0,0,0,192,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,254,0,0,0,66,9,0,0,100,9,0,0,72,9,0,0,78,9,0,0,107,9,0,0,117,9,0,0,90,9,0,0,95,9,0,0,142,9,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,32,0,0,0,64,0,0,43,29,0,0,1,0,0,0,32,78,0,0,5,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,1,0,0,0,115,0,0,0,2,0,0,0,108,0,0,0,4,0,0,0,100,0,0,0,8,0,0,0,112,0,0,0,16,0,0,0,85,0,0,0,32,0,0,0,117,0,0,0,64,0,0,0,109,0,0,0,128,0,0,0,83,0,0,0,0,1,0,0,68,0,0,0,0,2,0,0,119,0,0,0,0,4,0,0,120,0,0,0,0,8,0,0,121,0,0,0,0,16,0,0,122,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,49,0,0,0,2,0,0,0,50,0,0,0,4,0,0,0,51,0,0,0,8,0,0,0,52,0,0,0,16,0,0,0,53,0,0,0,32,0,0,0,54,0,0,0,64,0,0,0,55,0,0,0,128,0,0,0,56,0,0,0,0,1,0,0,57,0,0,0,0,2,0,0,65,0,0,0,0,4,0,0,66,0,0,0,0,8,0,0,67,0,0,0,0,16,0,0,68,0,0,0,0,32,0,0,69,0,0,0,0,64,0,0,70,0,0,0,0,0,0,0,0,0,0,0,44,4,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,115,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,123,151,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,117,0,114,0,67,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,0,76,79,85,73,83,95,84,65,66,76,69,80,65,84,72,0,44,37,115,0,44,37,115,37,99,37,115,37,99,37,115,0,108,105,98,108,111,117,105,115,0,116,97,98,108,101,115,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,105,98,108,111,117,105,115,47,116,97,98,108,101,115,0,76,79,85,73,83,95,84,65,66,76,69,80,65,84,72,61,37,115,0,37,115,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,111,109,112,105,108,101,100,0,73,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,37,100,10,0,51,46,49,51,46,48,0,101,110,99,111,100,105,110,103,32,105,115,32,110,101,105,116,104,101,114,32,98,105,103,45,101,110,100,105,97,110,44,32,108,105,116,116,108,101,45,101,110,100,105,97,110,32,110,111,114,32,65,83,67,73,73,32,56,46,0,37,115,58,37,100,58,32,101,114,114,111,114,58,32,37,115,0,101,114,114,111,114,58,32,37,115,0,105,110,99,108,117,100,101,0,108,111,99,97,108,101,0,117,110,100,101,102,105,110,101,100,0,99,97,112,115,108,101,116,116,101,114,0,98,101,103,99,97,112,115,119,111,114,100,0,101,110,100,99,97,112,115,119,111,114,100,0,98,101,103,99,97,112,115,0,101,110,100,99,97,112,115,0,98,101,103,99,97,112,115,112,104,114,97,115,101,0,101,110,100,99,97,112,115,112,104,114,97,115,101,0,108,101,110,99,97,112,115,112,104,114,97,115,101,0,108,101,116,115,105,103,110,0,110,111,108,101,116,115,105,103,110,98,101,102,111,114,101,0,110,111,108,101,116,115,105,103,110,0,110,111,108,101,116,115,105,103,110,97,102,116,101,114,0,110,117,109,115,105,103,110,0,110,117,109,101,114,105,99,109,111,100,101,99,104,97,114,115,0,109,105,100,101,110,100,110,117,109,101,114,105,99,109,111,100,101,99,104,97,114,115,0,110,117,109,101,114,105,99,110,111,99,111,110,116,99,104,97,114,115,0,115,101,113,100,101,108,105,109,105,116,101,114,0,115,101,113,98,101,102,111,114,101,99,104,97,114,115,0,115,101,113,97,102,116,101,114,99,104,97,114,115,0,115,101,113,97,102,116,101,114,112,97,116,116,101,114,110,0,115,101,113,97,102,116,101,114,101,120,112,114,101,115,115,105,111,110,0,101,109,112,104,99,108,97,115,115,0,101,109,112,104,108,101,116,116,101,114,0,98,101,103,101,109,112,104,119,111,114,100,0,101,110,100,101,109,112,104,119,111,114,100,0,98,101,103,101,109,112,104,0,101,110,100,101,109,112,104,0,98,101,103,101,109,112,104,112,104,114,97,115,101,0,101,110,100,101,109,112,104,112,104,114,97,115,101,0,108,101,110,101,109,112,104,112,104,114,97,115,101,0,99,97,112,115,109,111,100,101,99,104,97,114,115,0,101,109,112,104,109,111,100,101,99,104,97,114,115,0,98,101,103,99,111,109,112,0,99,111,109,112,98,101,103,101,109,112,104,49,0,99,111,109,112,101,110,100,101,109,112,104,49,0,99,111,109,112,98,101,103,101,109,112,104,50,0,99,111,109,112,101,110,100,101,109,112,104,50,0,99,111,109,112,98,101,103,101,109,112,104,51,0,99,111,109,112,101,110,100,101,109,112,104,51,0,99,111,109,112,99,97,112,115,105,103,110,0,99,111,109,112,98,101,103,99,97,112,115,0,99,111,109,112,101,110,100,99,97,112,115,0,101,110,100,99,111,109,112,0,110,111,99,111,110,116,114,97,99,116,115,105,103,110,0,109,117,108,116,105,110,100,0,99,111,109,112,100,111,116,115,0,99,111,109,112,54,0,99,108,97,115,115,0,97,102,116,101,114,0,98,101,102,111,114,101,0,110,111,98,97,99,107,0,110,111,102,111,114,0,101,109,112,109,97,116,99,104,98,101,102,111,114,101,0,101,109,112,109,97,116,99,104,97,102,116,101,114,0,115,119,97,112,99,99,0,115,119,97,112,99,100,0,115,119,97,112,100,100,0,115,112,97,99,101,0,100,105,103,105,116,0,112,117,110,99,116,117,97,116,105,111,110,0,109,97,116,104,0,115,105,103,110,0,108,101,116,116,101,114,0,117,112,112,101,114,99,97,115,101,0,108,111,119,101,114,99,97,115,101,0,103,114,111,117,112,105,110,103,0,117,112,108,111,119,0,108,105,116,100,105,103,105,116,0,100,105,115,112,108,97,121,0,114,101,112,108,97,99,101,0,99,111,110,116,101,120,116,0,99,111,114,114,101,99,116,0,112,97,115,115,50,0,112,97,115,115,51,0,112,97,115,115,52,0,114,101,112,101,97,116,101,100,0,114,101,112,119,111,114,100,0,114,101,112,101,110,100,119,111,114,100,0,99,97,112,115,110,111,99,111,110,116,0,97,108,119,97,121,115,0,101,120,97,99,116,100,111,116,115,0,110,111,99,114,111,115,115,0,115,121,108,108,97,98,108,101,0,110,111,99,111,110,116,0,99,111,109,112,98,114,108,0,108,105,116,101,114,97,108,0,108,97,114,103,101,115,105,103,110,0,119,111,114,100,0,112,97,114,116,119,111,114,100,0,106,111,105,110,110,117,109,0,106,111,105,110,119,111,114,100,0,108,111,119,119,111,114,100,0,99,111,110,116,114,97,99,116,105,111,110,0,115,117,102,119,111,114,100,0,112,114,102,119,111,114,100,0,98,101,103,119,111,114,100,0,98,101,103,109,105,100,119,111,114,100,0,109,105,100,119,111,114,100,0,109,105,100,101,110,100,119,111,114,100,0,101,110,100,119,111,114,100,0,112,114,101,112,117,110,99,0,112,111,115,116,112,117,110,99,0,98,101,103,110,117,109,0,109,105,100,110,117,109,0,101,110,100,110,117,109,0,100,101,99,112,111,105,110,116,0,104,121,112,104,101,110,0,110,111,98,114,101,97,107,0,109,97,116,99,104,0,98,97,99,107,109,97,116,99,104,0,97,116,116,114,105,98,117,116,101,0,92,88,104,104,104,104,32,40,119,105,116,104,32,97,32,99,97,112,105,116,97,108,32,39,88,39,41,32,105,115,32,100,101,112,114,101,99,97,116,101,100,46,0,92,89,104,104,104,104,104,32,40,119,105,116,104,32,97,32,99,97,112,105,116,97,108,32,39,89,39,41,32,105,115,32,100,101,112,114,101,99,97,116,101,100,46,0,108,105,98,108,111,117,105,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,99,111,109,112,105,108,101,100,32,102,111,114,32,51,50,45,98,105,116,32,85,110,105,99,111,100,101,0,92,90,104,104,104,104,104,104,104,104,32,40,119,105,116,104,32,97,32,99,97,112,105,116,97,108,32,39,90,39,41,32,105,115,32,100,101,112,114,101,99,97,116,101,100,46,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,39,92,37,99,39,0,84,111,107,101,110,32,116,111,111,32,108,111,110,103,0,105,110,118,97,108,105,100,32,85,84,70,45,56,46,32,65,115,115,117,109,105,110,103,32,76,97,116,105,110,45,49,46,0,37,115,58,37,100,58,32,119,97,114,110,105,110,103,58,32,37,115,0,119,97,114,110,105,110,103,58,32,37,115,0,105,110,118,97,108,105,100,32,37,100,45,100,105,103,105,116,32,104,101,120,97,100,101,99,105,109,97,108,32,110,117,109,98,101,114,0,100,111,116,32,115,112,101,99,105,102,105,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,46,0,109,105,115,115,105,110,103,32,99,101,108,108,32,115,112,101,99,105,102,105,99,97,116,105,111,110,46,0,105,110,118,97,108,105,100,32,100,111,116,32,110,117,109,98,101,114,32,37,115,46,0,102,111,117,110,100,32,116,97,98,108,101,32,37,115,0,37,115,37,99,37,115,37,99,37,115,37,99,37,115,0,115,112,97,99,101,32,92,120,102,102,102,102,32,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,32,76,79,85,95,69,78,68,83,69,71,77,69,78,84,0,37,100,32,119,97,114,110,105,110,103,115,32,105,115,115,117,101,100,0,37,100,32,101,114,114,111,114,115,32,102,111,117,110,100,46,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,73,83,79,0,85,84,70,45,56,0,105,110,99,108,117,100,101,32,102,105,108,101,32,110,97,109,101,0,37,115,32,97,108,114,101,97,100,121,32,115,112,101,99,105,102,105,101,100,46,0,69,120,97,99,116,108,121,32,111,110,101,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,84,104,101,32,108,111,99,97,108,101,32,111,112,99,111,100,101,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,46,32,85,115,101,32,116,104,101,32,108,111,99,97,108,101,32,109,101,116,97,32,100,97,116,97,32,105,110,115,116,101,97,100,46,0,117,110,100,101,102,105,110,101,100,32,99,104,97,114,97,99,116,101,114,32,111,112,99,111,100,101,0,102,105,114,115,116,32,119,111,114,100,32,99,97,112,105,116,97,108,32,115,105,103,110,0,67,97,112,105,116,97,108,32,115,105,103,110,32,97,102,116,101,114,32,108,97,115,116,32,119,111,114,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,99,97,112,105,116,97,108,32,115,105,103,110,32,98,101,102,111,114,101,32,108,97,115,116,32,119,111,114,100,0,67,97,112,105,116,97,108,32,115,105,103,110,32,98,101,102,111,114,101,32,108,97,115,116,32,119,111,114,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,99,97,112,105,116,97,108,32,115,105,103,110,32,97,102,116,101,114,32,108,97,115,116,32,119,111,114,100,0,73,110,118,97,108,105,100,32,108,97,115,116,119,111,114,100,32,105,110,100,105,99,97,116,111,114,32,108,111,99,97,116,105,111,110,46,0,102,105,114,115,116,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,108,97,115,116,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,115,105,110,103,108,101,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,99,97,112,105,116,97,108,32,119,111,114,100,0,99,97,112,105,116,97,108,32,119,111,114,100,32,115,116,111,112,0,101,109,112,104,97,115,105,115,32,99,108,97,115,115,0,68,117,112,108,105,99,97,116,101,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,58,32,37,115,0,105,116,97,108,105,99,0,70,105,114,115,116,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,105,116,97,108,105,99,34,32,98,117,116,32,103,111,116,32,37,115,0,117,110,100,101,114,108,105,110,101,0,83,101,99,111,110,100,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,117,110,100,101,114,108,105,110,101,34,32,98,117,116,32,103,111,116,32,37,115,0,98,111,108,100,0,84,104,105,114,100,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,98,111,108,100,34,32,98,117,116,32,103,111,116,32,37,115,0,77,97,120,32,110,117,109,98,101,114,32,111,102,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,101,115,32,40,37,105,41,32,114,101,97,99,104,101,100,0,101,109,112,104,99,108,97,115,115,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,46,0,69,109,112,104,97,115,105,115,32,99,108,97,115,115,32,37,115,32,110,111,116,32,100,101,99,108,97,114,101,100,0,115,105,110,103,108,101,32,108,101,116,116,101,114,0,119,111,114,100,32,115,116,111,112,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,101,109,112,104,97,115,105,115,32,102,111,114,32,98,111,116,104,32,110,111,32,99,111,110,116,101,120,116,32,97,110,100,32,119,111,114,100,32,111,114,32,112,104,114,97,115,101,32,99,111,110,116,101,120,116,44,32,105,46,101,46,32,99,97,110,110,111,116,32,104,97,118,101,32,98,111,116,104,32,98,101,103,101,109,112,104,32,97,110,100,32,98,101,103,101,109,112,104,119,111,114,100,32,111,114,32,98,101,103,101,109,112,104,112,104,114,97,115,101,46,0,102,105,114,115,116,32,108,101,116,116,101,114,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,101,109,112,104,97,115,105,115,32,102,111,114,32,98,111,116,104,32,110,111,32,99,111,110,116,101,120,116,32,97,110,100,32,119,111,114,100,32,111,114,32,112,104,114,97,115,101,32,99,111,110,116,101,120,116,44,32,105,46,101,46,32,99,97,110,110,111,116,32,104,97,118,101,32,98,111,116,104,32,101,110,100,101,109,112,104,32,97,110,100,32,101,110,100,101,109,112,104,119,111,114,100,32,111,114,32,101,110,100,101,109,112,104,112,104,114,97,115,101,46,0,108,97,115,116,32,108,101,116,116,101,114,0,102,105,114,115,116,32,119,111,114,100,0,108,97,115,116,32,119,111,114,100,32,97,102,116,101,114,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,108,97,115,116,32,119,111,114,100,32,97,102,116,101,114,0,108,101,116,116,101,114,32,115,105,103,110,0,77,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,0,110,117,109,98,101,114,32,115,105,103,110,0,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,0,69,120,112,101,99,116,101,100,32,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,46,0,73,110,118,97,108,105,100,32,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,46,0,65,116,116,114,105,98,117,116,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,78,117,109,101,114,105,99,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,77,105,100,101,110,100,110,117,109,101,114,105,99,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,78,117,109,101,114,105,99,32,110,111,32,99,111,110,116,114,97,99,116,105,111,110,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,110,111,32,99,111,110,116,114,97,99,116,105,111,110,115,32,115,105,103,110,0,83,101,113,117,101,110,99,101,32,100,101,108,105,109,105,116,101,114,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,83,101,113,117,101,110,99,101,32,98,101,102,111,114,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,83,101,113,117,101,110,99,101,32,97,102,116,101,114,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,67,97,112,105,116,97,108,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,69,109,112,104,97,115,105,115,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,98,101,103,105,110,32,99,111,109,112,117,116,101,114,32,98,114,97,105,108,108,101,0,101,110,100,32,99,111,109,112,117,116,101,114,32,98,114,97,115,108,108,101,0,67,104,97,114,97,99,116,101,114,32,37,115,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,100,111,116,115,44,100,111,116,115,32,111,112,101,114,97,110,100,0,102,105,114,115,116,32,111,112,101,114,97,110,100,32,109,117,115,116,32,98,101,32,49,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,60,32,50,53,54,0,84,104,101,32,111,112,101,114,97,110,100,32,109,117,115,116,32,98,101,103,105,110,32,119,105,116,104,32,97,110,32,97,116,32,115,105,103,110,32,40,64,41,0,37,115,32,111,114,32,37,115,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,46,0,109,117,108,116,105,112,108,101,32,98,114,97,105,108,108,101,32,105,110,100,105,99,97,116,111,114,115,0,109,117,108,116,105,110,100,32,111,112,99,111,100,101,115,0,78,111,116,32,97,32,98,114,97,105,108,108,101,32,105,110,100,105,99,97,116,111,114,32,111,112,99,111,100,101,46,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,79,110,101,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,117,110,105,109,112,108,101,109,101,110,116,101,100,32,111,112,99,111,100,101,46,0,109,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,32,40,98,121,116,101,115,41,0,37,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,0,111,112,99,111,100,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,46,0,73,110,99,108,117,100,101,32,115,116,97,116,101,109,101,110,116,32,116,111,111,32,108,111,110,103,58,32,39,105,110,99,108,117,100,101,32,37,115,39,0,84,97,98,108,101,32,108,105,115,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,105,110,99,108,117,100,101,32,115,116,97,116,101,109,101,110,116,58,32,39,105,110,99,108,117,100,101,32,37,115,39,0,69,120,97,99,116,108,121,32,111,110,101,32,99,104,97,114,97,99,116,101,114,32,105,115,32,114,101,113,117,105,114,101,100,46,0,65,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,105,115,32,114,101,113,117,105,114,101,100,46,0,110,97,109,101,32,111,112,101,114,97,110,100,0,100,111,116,115,32,111,112,101,114,97,110,100,0,68,111,116,115,32,111,112,101,114,97,110,100,32,109,117,115,116,32,99,111,110,115,105,115,116,32,111,102,32,116,119,111,32,99,101,108,108,115,32,115,101,112,97,114,97,116,101,100,32,98,121,32,97,32,99,111,109,109,97,0,116,119,111,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,116,119,111,32,99,101,108,108,115,32,115,101,112,97,114,97,116,101,100,32,98,121,32,97,32,99,111,109,109,97,32,97,114,101,32,110,101,101,100,101,100,46,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,97,32,110,97,109,101,32,109,97,121,32,99,111,110,116,97,105,110,32,111,110,108,121,32,108,101,116,116,101,114,115,0,69,120,97,99,116,108,121,32,116,119,111,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,105,115,32,114,101,113,117,105,114,101,100,32,97,102,116,101,114,32,116,104,101,32,99,111,109,109,97,46,0,67,104,97,114,97,99,116,101,114,115,32,111,112,101,114,97,110,100,0,68,111,116,115,32,111,112,101,114,97,110,100,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,100,105,115,112,108,97,121,32,116,97,98,108,101,46,0,99,104,97,114,97,99,116,101,114,115,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,98,108,101,46,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,32,111,114,32,97,102,116,101,114,0,110,117,109,98,101,114,0,97,32,110,111,110,122,101,114,111,32,112,111,115,105,116,105,118,101,32,110,117,109,98,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0,73,110,118,97,108,105,100,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,115,0,84,101,115,116,32,112,97,114,116,32,105,110,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,32,116,111,111,32,108,111,110,103,0,64,32,111,112,101,114,97,110,100,32,105,110,32,116,101,115,116,32,112,97,114,116,32,111,102,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,32,116,111,111,32,108,111,110,103,0,105,110,99,111,114,114,101,99,116,32,99,111,109,112,97,114,105,115,111,110,32,111,112,101,114,97,116,111,114,0,105,110,118,97,108,105,100,32,114,97,110,103,101,0,37,115,32,105,115,32,110,111,116,32,97,32,103,114,111,117,112,105,110,103,32,110,97,109,101,0,37,115,32,105,115,32,110,101,105,116,104,101,114,32,97,32,99,108,97,115,115,32,110,97,109,101,32,110,111,114,32,97,32,115,119,97,112,32,110,97,109,101,46,0,105,110,99,111,114,114,101,99,116,32,111,112,101,114,97,116,111,114,32,39,37,99,32,39,32,105,110,32,116,101,115,116,32,112,97,114,116,0,65,99,116,105,111,110,32,112,97,114,116,32,105,110,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,32,116,111,111,32,108,111,110,103,0,64,32,111,112,101,114,97,110,100,32,105,110,32,97,99,116,105,111,110,32,112,97,114,116,32,111,102,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,32,116,111,111,32,108,111,110,103,0,105,110,99,111,114,114,101,99,116,32,118,97,114,105,97,98,108,101,32,111,112,101,114,97,116,111,114,32,105,110,32,97,99,116,105,111,110,32,112,97,114,116,0,37,115,32,105,115,32,110,111,116,32,97,32,115,119,97,112,32,110,97,109,101,46,0,105,110,99,111,114,114,101,99,116,32,111,112,101,114,97,116,111,114,32,105,110,32,97,99,116,105,111,110,32,112,97,114,116,0,37,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,116,104,101,32,37,115,32,112,97,114,116,32,111,102,32,97,32,37,115,32,116,114,97,110,115,108,97,116,105,111,110,32,37,115,32,114,117,108,101,46,0,115,116,114,105,110,103,115,0,100,111,116,115,0,98,97,99,107,119,97,114,100,0,102,111,114,119,97,114,100,0,97,99,116,105,111,110,0,116,101,115,116,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,0,118,97,114,105,97,98,108,101,32,110,117,109,98,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,109,105,115,115,105,110,103,32,97,116,116,114,105,98,117,116,101,0,117,110,104,97,110,100,108,101,100,32,116,101,115,116,32,115,117,98,111,112,101,114,97,110,100,58,32,92,120,37,48,50,120,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,46,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,111,116,32,100,101,102,105,110,101,100,46,0,109,97,116,99,104,101,115,32,111,112,101,114,97,110,100,0,114,101,112,108,97,99,101,109,101,110,116,115,32,111,112,101,114,97,110,100,0,80,101,114,102,111,114,109,105,110,103,32,116,114,97,110,115,108,97,116,105,111,110,58,32,116,97,98,108,101,76,105,115,116,61,37,115,44,32,105,110,108,101,110,61,37,100,0,73,110,98,117,102,61,0,37,115,58,32,110,111,32,109,97,112,112,105,110,103,32,102,111,114,32,100,111,116,32,112,97,116,116,101,114,110,32,37,115,32,105,110,32,100,105,115,112,108,97,121,32,116,97,98,108,101,0,84,114,97,110,115,108,97,116,105,111,110,32,99,111,109,112,108,101,116,101,58,32,111,117,116,108,101,110,61,37,100,0,79,117,116,98,117,102,61,0,73,110,118,97,108,105,100,32,109,111,100,101,32,112,97,114,97,109,101,116,101,114,58,32,37,100,0,84,97,98,108,101,115,32,104,97,118,101,32,110,111,116,32,98,101,101,110,32,105,110,100,101,120,101,100,32,121,101,116,46,32,73,110,100,101,120,105,110,103,32,76,79,85,73,83,95,84,65,66,76,69,80,65,84,72,46,0,37,115,37,99,37,115,0,37,115,32,105,115,32,110,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,67,97,110,110,111,116,32,114,101,115,111,108,118,101,32,116,97,98,108,101,32,39,37,115,39,0,84,97,98,108,101,32,39,37,115,39,32,114,101,115,111,108,118,101,115,32,116,111,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,102,105,108,101,0,114,98,0,84,97,98,108,101,32,104,97,115,32,102,101,97,116,117,114,101,32,39,37,115,58,37,115,39,0,67,97,110,110,111,116,32,111,112,101,110,32,116,97,98,108,101,32,39,37,115,39,0,85,110,101,120,112,101,99,116,101,100,32,99,104,97,114,97,99,116,101,114,32,39,37,99,39,32,111,110,32,108,105,110,101,32,37,100,44,32,99,111,108,117,109,110,32,37,100,0,85,110,101,120,112,101,99,116,101,100,32,110,101,119,108,105,110,101,32,111,110,32,108,105,110,101,32,37,100,0,121,101,115,0,37,100,32,109,97,116,99,104,101,115,32,102,111,117,110,100,0,78,111,32,116,97,98,108,101,32,99,111,117,108,100,32,98,101,32,102,111,117,110,100,32,102,111,114,32,113,117,101,114,121,32,39,37,115,39,0,81,117,101,114,121,32,104,97,115,32,102,101,97,116,117,114,101,32,39,37,115,58,37,115,39,0,85,110,101,120,112,101,99,116,101,100,32,99,104,97,114,97,99,116,101,114,32,39,37,99,39,32,97,116,32,112,111,115,105,116,105,111,110,32,37,100,0,66,101,115,116,32,109,97,116,99,104,58,32,37,115,32,40,37,100,41,0,65,110,97,108,121,122,105,110,103,32,116,97,98,108,101,32,37,115,0,78,111,32,116,97,98,108,101,115,32,119,101,114,101,32,105,110,100,101,120,101,100,0,97,0,10,0,67,97,110,110,111,116,32,111,112,101,110,32,108,111,103,32,102,105,108,101,32,37,115,10,0,37,115,0,48,120,37,48,52,88,32,0,127,32,0,64,96,32,0,0,95,0,0,0,64,0,0,64,32,0,0,0,0,0,64,192,0,0,0,0,0,0,0,0,0,46,16,60,43,41,47,4,55,62,33,44,32,36,40,12,52,2,6,18,50,34,22,54,38,20,49,48,35,63,28,57,8,1,3,9,25,17,11,27,19,10,26,5,7,13,29,21,15,31,23,14,30,37,39,58,45,61,53,42,51,59,24,56,108,105,98,108,111,117,105,115,58,32,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0,37,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([78,0,46,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Module['dynCall_vi'](routine, arg) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

   
  Module["_sbrk"] = _sbrk;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
___buildEnvironment(ENV);;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iii": nullFunc_iii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "___syscall220": ___syscall220, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_llvm_stackrestore": _llvm_stackrestore, "___buildEnvironment": ___buildEnvironment, "___setErrNo": ___setErrNo, "___syscall195": ___syscall195, "__exit": __exit, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_stacksave": _llvm_stacksave, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var ___syscall220=env.___syscall220;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___setErrNo=env.___setErrNo;
  var ___syscall195=env.___syscall195;
  var __exit=env.__exit;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_stacksave=env._llvm_stacksave;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _lou_setDataPath($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 HEAP32[2638] = 0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  (_strcpy(24150,$5)|0);
  HEAP32[2638] = 24150;
  $6 = HEAP32[2638]|0;
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _lou_getDataPath() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2638]|0;
 return ($0|0);
}
function __lou_getALine($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = 0;
 $5 = $2;
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = 0;
 while(1) {
  $7 = $2;
  $8 = (_getAChar($7)|0);
  $3 = $8;
  $9 = ($8|0)!=(-1);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ($10|0)==(13);
  if ($11) {
   continue;
  }
  $12 = $4;
  $13 = ($12|0)==(92);
  $14 = $3;
  $15 = ($14|0)==(10);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = $2;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + -1)|0;
   HEAP32[$17>>2] = $19;
   $20 = $3;
   $4 = $20;
   continue;
  }
  $21 = $3;
  $22 = ($21|0)==(10);
  if ($22) {
   break;
  }
  $23 = $2;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)>=(2047);
  if ($26) {
   break;
  }
  $27 = $3;
  $28 = $27&65535;
  $29 = $2;
  $30 = ((($29)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$30>>2] = $32;
  $33 = $2;
  $34 = ((($33)) + 36|0);
  $35 = (($34) + ($31<<1)|0);
  HEAP16[$35>>1] = $28;
  $36 = $3;
  $4 = $36;
 }
 $37 = $2;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $2;
 $41 = ((($40)) + 36|0);
 $42 = (($41) + ($39<<1)|0);
 HEAP16[$42>>1] = 0;
 $43 = $2;
 $44 = ((($43)) + 24|0);
 HEAP32[$44>>2] = 0;
 $45 = $3;
 $46 = ($45|0)==(-1);
 if ($46) {
  $1 = 0;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 } else {
  $47 = $2;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$48>>2] = $50;
  $1 = 1;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _getAChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   $14 = $2;
   $15 = ((($14)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $18 = $2;
   $19 = ((($18)) + 28|0);
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $1 = $21;
   $120 = $1;
   STACKTOP = sp;return ($120|0);
  }
 }
 L5: while(1) {
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_fgetc($24)|0);
  $3 = $25;
  $26 = ($25|0)!=(-1);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(2);
  if ($30) {
   $31 = $3;
   $32 = $2;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 28|0);
   $37 = (($36) + ($34<<2)|0);
   HEAP32[$37>>2] = $31;
  }
  $38 = $2;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $2;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(2);
  $46 = $2;
  if (!($45)) {
   $83 = ((($46)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   switch ($84|0) {
   case 3:  {
    label = 19;
    break L5;
    break;
   }
   case 2:  {
    $101 = $2;
    $102 = ((($101)) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_fgetc($103)|0);
    $4 = $104;
    $105 = $4;
    $106 = ($105|0)==(-1);
    if (!($106)) {
     label = 23;
     break L5;
    }
    break;
   }
   case 1:  {
    $86 = $2;
    $87 = ((($86)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (_fgetc($88)|0);
    $4 = $89;
    $90 = $4;
    $91 = ($90|0)==(-1);
    if (!($91)) {
     label = 21;
     break L5;
    }
    break;
   }
   default: {
   }
   }
   $116 = $3;
   $117 = ($116|0)==(-1);
   $118 = $4;
   $119 = ($118|0)==(-1);
   $or$cond = $117 | $119;
   if ($or$cond) {
    break;
   } else {
    continue;
   }
  }
  $47 = ((($46)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(254);
  if ($49) {
   $50 = $2;
   $51 = ((($50)) + 28|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(255);
   if ($54) {
    $55 = $2;
    $56 = ((($55)) + 12|0);
    HEAP32[$56>>2] = 1;
    continue;
   }
  }
  $57 = $2;
  $58 = ((($57)) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(255);
  if (!($60)) {
   label = 14;
   break;
  }
  $61 = $2;
  $62 = ((($61)) + 28|0);
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(254);
  if (!($65)) {
   label = 14;
   break;
  }
  $66 = $2;
  $67 = ((($66)) + 12|0);
  HEAP32[$67>>2] = 2;
 }
 if ((label|0) == 14) {
  $68 = $2;
  $69 = ((($68)) + 28|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)<(128);
  if ($71) {
   $72 = $2;
   $73 = ((($72)) + 28|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)<(128);
   if ($76) {
    $77 = $2;
    $78 = ((($77)) + 12|0);
    HEAP32[$78>>2] = 3;
    $79 = $2;
    $80 = ((($79)) + 28|0);
    $81 = HEAP32[$80>>2]|0;
    $1 = $81;
    $120 = $1;
    STACKTOP = sp;return ($120|0);
   }
  }
  $82 = $2;
  _compileError($82,1592,$vararg_buffer);
  $3 = -1;
 }
 else if ((label|0) == 19) {
  $85 = $3;
  $1 = $85;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 21) {
  $92 = $3;
  $93 = $92 << 8;
  $94 = $93&65535;
  $95 = $94&65535;
  $96 = $4;
  $97 = $95 | $96;
  $98 = $97&65535;
  $5 = $98;
  $99 = $5;
  $100 = $99&65535;
  $1 = $100;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 23) {
  $107 = $4;
  $108 = $107 << 8;
  $109 = $108&65535;
  $110 = $109&65535;
  $111 = $3;
  $112 = $110 | $111;
  $113 = $112&65535;
  $5 = $113;
  $114 = $5;
  $115 = $114&65535;
  $1 = $115;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $1 = -1;
 $120 = $1;
 STACKTOP = sp;return ($120|0);
}
function __lou_getDotsForChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_getCharOrDots($6,0,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = -32768;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _getCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (__lou_charHash($10)|0);
 $9 = $11;
 $12 = $5;
 $13 = ($12|0)==(0);
 $14 = $9;
 $15 = $6;
 if ($13) {
  $16 = ((($15)) + 8|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $8 = $18;
 } else {
  $19 = ((($15)) + 4500|0);
  $20 = (($19) + ($14<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
 }
 while(1) {
  $22 = $8;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   label = 8;
   break;
  }
  $24 = $8;
  $25 = $6;
  $26 = ((($25)) + 8992|0);
  $27 = (($26) + ($24<<3)|0);
  $7 = $27;
  $28 = $7;
  $29 = ((($28)) + 4|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = $4;
  $33 = $32&65535;
  $34 = ($31|0)==($33|0);
  $35 = $7;
  if ($34) {
   label = 6;
   break;
  }
  $36 = HEAP32[$35>>2]|0;
  $8 = $36;
 }
 if ((label|0) == 6) {
  $3 = $35;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 8) {
  $3 = 0;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function __lou_getCharFromDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_getCharOrDots($6,1,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __lou_findOpcodeNumber($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[2639]|0;
 $3 = $5;
 $6 = $2;
 $7 = (_strlen($6)|0);
 $4 = $7;
 while(1) {
  $8 = $4;
  $9 = $3;
  $10 = (15724 + ($9<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = ($8|0)==($12|0);
  if ($13) {
   $14 = $2;
   $15 = $3;
   $16 = (200 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcasecmp($14,$17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    label = 4;
    break;
   }
  }
  $22 = $3;
  $23 = (($22) + 1)|0;
  $3 = $23;
  $24 = $3;
  $25 = ($24>>>0)>=(114);
  $$ = $25 ? 0 : $23;
  $3 = $$;
  $26 = $3;
  $27 = HEAP32[2639]|0;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = $3;
  HEAP32[2639] = $20;
  $21 = $3;
  $1 = $21;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $1 = 114;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __lou_findOpcodeName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)<(0);
 $5 = $2;
 $6 = ($5>>>0)>=(114);
 $or$cond = $4 | $6;
 $7 = $2;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $7;
  (_sprintf(26198,1408,$vararg_buffer)|0);
  $1 = 26198;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = (200 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __lou_extParseChars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $5 = sp + 4114|0;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $3;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  $14 = $7;
  $15 = ($14|0)<(2047);
  $16 = $13 ? $15 : 0;
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $3;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $7;
  $23 = ((($5)) + 2|0);
  $24 = (($23) + ($22<<1)|0);
  HEAP16[$24>>1] = $21;
  $25 = $7;
  $26 = (($25) + 1)|0;
  $7 = $26;
 }
 $27 = ((($5)) + 2|0);
 $28 = (($27) + ($17<<1)|0);
 HEAP16[$28>>1] = 0;
 $29 = $7;
 $30 = $29&65535;
 HEAP16[$5>>1] = $30;
 (_parseChars(0,$6,$5)|0);
 $31 = HEAP32[2640]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[2640] = 0;
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 $7 = 0;
 while(1) {
  $33 = $7;
  $34 = HEAP16[$6>>1]|0;
  $35 = $34&65535;
  $36 = ($33|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $7;
  $38 = ((($6)) + 2|0);
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $7;
  $42 = $4;
  $43 = (($42) + ($41<<1)|0);
  HEAP16[$43>>1] = $40;
  $44 = $7;
  $45 = (($44) + 1)|0;
  $7 = $45;
 }
 $46 = HEAP16[$6>>1]|0;
 $47 = $46&65535;
 $2 = $47;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _parseChars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 L1: while(1) {
  $15 = $7;
  $16 = $6;
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   label = 44;
   break;
  }
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
  $22 = $6;
  $23 = ((($22)) + 2|0);
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $26 & 255;
  $11 = $27;
  $28 = $11;
  $29 = ($28>>>0)<(128);
  if (!($29)) {
   $73 = $8;
   $9 = $73;
   $74 = $7;
   $10 = $74;
   $12 = 6;
   while(1) {
    $75 = $12;
    $76 = ($75|0)>(0);
    if (!($76)) {
     break;
    }
    $77 = $11;
    $78 = $12;
    $79 = (664 + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($77>>>0)>=($80>>>0);
    if ($81) {
     break;
    }
    $82 = $12;
    $83 = (($82) + -1)|0;
    $12 = $83;
   }
   $84 = $11;
   $85 = $12;
   $86 = (664 + ($85<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (255 - ($87))|0;
   $89 = $84 & $88;
   $13 = $89;
   $14 = 0;
   while(1) {
    $90 = $14;
    $91 = $12;
    $92 = ($90|0)>=($91|0);
    $93 = $7;
    $94 = ($93|0)>=(2047);
    $or$cond = $92 | $94;
    $95 = $8;
    $96 = ($95|0)>=(2047);
    if ($or$cond) {
     break;
    }
    if ($96) {
     label = 33;
     break L1;
    }
    $101 = $7;
    $102 = $6;
    $103 = ((($102)) + 2|0);
    $104 = (($103) + ($101<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&65535;
    $107 = ($106|0)<(128);
    if ($107) {
     label = 36;
    } else {
     $108 = $7;
     $109 = $6;
     $110 = ((($109)) + 2|0);
     $111 = (($110) + ($108<<1)|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $114 = $113 & 64;
     $115 = ($114|0)!=(0);
     if ($115) {
      label = 36;
     } else {
      $129 = $13;
      $130 = $129 << 6;
      $131 = $7;
      $132 = (($131) + 1)|0;
      $7 = $132;
      $133 = $6;
      $134 = ((($133)) + 2|0);
      $135 = (($134) + ($131<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = $137 & 63;
      $139 = (($130) + ($138))|0;
      $13 = $139;
     }
    }
    if ((label|0) == 36) {
     label = 0;
     $116 = $4;
     _compileWarning($116,3041,$vararg_buffer14);
     $117 = $10;
     $118 = $6;
     $119 = ((($118)) + 2|0);
     $120 = (($119) + ($117<<1)|0);
     $121 = HEAP16[$120>>1]|0;
     $122 = $8;
     $123 = (($122) + 1)|0;
     $8 = $123;
     $124 = $5;
     $125 = ((($124)) + 2|0);
     $126 = (($125) + ($122<<1)|0);
     HEAP16[$126>>1] = $121;
     $127 = $10;
     $128 = (($127) + 1)|0;
     $7 = $128;
    }
    $140 = $14;
    $141 = (($140) + 1)|0;
    $14 = $141;
   }
   if ($96) {
    label = 40;
    break;
   }
   $146 = $13;
   $147 = ($146>>>0)>(65535);
   if ($147) {
    $13 = 65535;
   }
   $148 = $13;
   $149 = $148&65535;
   $150 = $8;
   $151 = (($150) + 1)|0;
   $8 = $151;
   $152 = $5;
   $153 = ((($152)) + 2|0);
   $154 = (($153) + ($150<<1)|0);
   HEAP16[$154>>1] = $149;
   continue;
  }
  $30 = $11;
  $31 = ($30|0)==(92);
  if ($31) {
   $32 = $7;
   $33 = $6;
   $34 = ((($33)) + 2|0);
   $35 = (($34) + ($32<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $11 = $37;
   do {
    switch ($37|0) {
    case 92:  {
     break;
    }
    case 101:  {
     $11 = 27;
     break;
    }
    case 102:  {
     $11 = 12;
     break;
    }
    case 110:  {
     $11 = 10;
     break;
    }
    case 114:  {
     $11 = 13;
     break;
    }
    case 115:  {
     $11 = 32;
     break;
    }
    case 116:  {
     $11 = 9;
     break;
    }
    case 118:  {
     $11 = 11;
     break;
    }
    case 119:  {
     $11 = 65535;
     break;
    }
    case 34:  {
     $11 = 28;
     break;
    }
    case 88:  {
     $38 = $4;
     _compileWarning($38,2812,$vararg_buffer);
     label = 16;
     break;
    }
    case 120:  {
     label = 16;
     break;
    }
    case 89:  {
     $55 = $4;
     _compileWarning($55,2855,$vararg_buffer2);
     label = 19;
     break;
    }
    case 122: case 121:  {
     label = 19;
     break;
    }
    case 90:  {
     $57 = $4;
     _compileWarning($57,2949,$vararg_buffer6);
     label = 19;
     break;
    }
    default: {
     $58 = $4;
     $59 = $11;
     HEAP32[$vararg_buffer8>>2] = $59;
     _compileError($58,2996,$vararg_buffer8);
    }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $39 = $6;
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = $7;
    $43 = (($41) - ($42))|0;
    $44 = ($43|0)>(4);
    if ($44) {
     $45 = $4;
     $46 = $7;
     $47 = (($46) + 1)|0;
     $48 = $6;
     $49 = ((($48)) + 2|0);
     $50 = (($49) + ($47<<1)|0);
     $51 = (_hexValue($45,$50,4)|0);
     $52 = $51&65535;
     $11 = $52;
     $53 = $7;
     $54 = (($53) + 4)|0;
     $7 = $54;
    }
   }
   else if ((label|0) == 19) {
    label = 0;
    $56 = $4;
    _compileError($56,2899,$vararg_buffer4);
   }
   $60 = $7;
   $61 = (($60) + 1)|0;
   $7 = $61;
  }
  $62 = $8;
  $63 = ($62|0)>=(2047);
  if ($63) {
   label = 24;
   break;
  }
  $66 = $11;
  $67 = $66&65535;
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
  $70 = $5;
  $71 = ((($70)) + 2|0);
  $72 = (($71) + ($68<<1)|0);
  HEAP16[$72>>1] = $67;
 }
 if ((label|0) == 24) {
  $64 = $4;
  _compileError($64,3026,$vararg_buffer10);
  $65 = $5;
  HEAP16[$65>>1] = 2047;
  $3 = 1;
  $158 = $3;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 33) {
  $97 = $4;
  _compileError($97,3026,$vararg_buffer12);
  $98 = $9;
  $99 = $98&65535;
  $100 = $5;
  HEAP16[$100>>1] = $99;
  $3 = 1;
  $158 = $3;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 40) {
  $142 = $4;
  _compileError($142,3026,$vararg_buffer16);
  $143 = $9;
  $144 = $143&65535;
  $145 = $5;
  HEAP16[$145>>1] = $144;
  $3 = 1;
  $158 = $3;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 44) {
  $155 = $8;
  $156 = $155&65535;
  $157 = $5;
  HEAP16[$157>>1] = $156;
  $3 = 1;
  $158 = $3;
  STACKTOP = sp;return ($158|0);
 }
 return (0)|0;
}
function __lou_extParseDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $5 = sp + 4114|0;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $3;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  $14 = $7;
  $15 = ($14|0)<(2047);
  $16 = $13 ? $15 : 0;
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $3;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $7;
  $23 = ((($5)) + 2|0);
  $24 = (($23) + ($22<<1)|0);
  HEAP16[$24>>1] = $21;
  $25 = $7;
  $26 = (($25) + 1)|0;
  $7 = $26;
 }
 $27 = ((($5)) + 2|0);
 $28 = (($27) + ($17<<1)|0);
 HEAP16[$28>>1] = 0;
 $29 = $7;
 $30 = $29&65535;
 HEAP16[$5>>1] = $30;
 (_parseDots(0,$6,$5)|0);
 $31 = HEAP32[2640]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[2640] = 0;
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $7 = 0;
 while(1) {
  $33 = $7;
  $34 = HEAP16[$6>>1]|0;
  $35 = $34&65535;
  $36 = ($33|0)<($35|0);
  $37 = $7;
  if (!($36)) {
   break;
  }
  $38 = ((($6)) + 2|0);
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $7;
  $42 = $4;
  $43 = (($42) + ($41<<1)|0);
  HEAP16[$43>>1] = $40;
  $44 = $7;
  $45 = (($44) + 1)|0;
  $7 = $45;
 }
 $46 = $4;
 $47 = (($46) + ($37<<1)|0);
 HEAP16[$47>>1] = 0;
 $48 = HEAP16[$6>>1]|0;
 $49 = $48&65535;
 $2 = $49;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _parseDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 64|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $10 = 0;
 $9 = 0;
 L1: while(1) {
  $14 = $9;
  $15 = $6;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($14|0)<($17|0);
  $19 = $9;
  $20 = $10;
  if (!($18)) {
   label = 29;
   break;
  }
  $21 = ($19|0)!=($20|0);
  $22 = $21&1;
  $11 = $22;
  $23 = $9;
  $24 = $6;
  $25 = ((($24)) + 2|0);
  $26 = (($25) + ($23<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  HEAP16[$12>>1] = $27;
  $28 = HEAP16[$12>>1]|0;
  $29 = $28&65535;
  do {
   switch ($29|0) {
   case 49:  {
    $13 = 1;
    label = 19;
    break;
   }
   case 50:  {
    $13 = 2;
    label = 19;
    break;
   }
   case 51:  {
    $13 = 4;
    label = 19;
    break;
   }
   case 52:  {
    $13 = 8;
    label = 19;
    break;
   }
   case 53:  {
    $13 = 16;
    label = 19;
    break;
   }
   case 54:  {
    $13 = 32;
    label = 19;
    break;
   }
   case 55:  {
    $13 = 64;
    label = 19;
    break;
   }
   case 56:  {
    $13 = 128;
    label = 19;
    break;
   }
   case 57:  {
    $13 = 256;
    label = 19;
    break;
   }
   case 65: case 97:  {
    $13 = 512;
    label = 19;
    break;
   }
   case 66: case 98:  {
    $13 = 1024;
    label = 19;
    break;
   }
   case 67: case 99:  {
    $13 = 2048;
    label = 19;
    break;
   }
   case 68: case 100:  {
    $13 = 4096;
    label = 19;
    break;
   }
   case 69: case 101:  {
    $13 = 8192;
    label = 19;
    break;
   }
   case 70: case 102:  {
    $13 = 16384;
    label = 19;
    break;
   }
   case 48:  {
    $45 = $11;
    $46 = ($45|0)!=(0);
    if ($46) {
     label = 27;
     break L1;
    }
    break;
   }
   case 45:  {
    $47 = $11;
    $48 = ($47|0)!=(0);
    if (!($48)) {
     label = 25;
     break L1;
    }
    $50 = $7;
    $51 = $50&65535;
    $52 = $51 | 32768;
    $53 = $52&65535;
    $54 = $8;
    $55 = (($54) + 1)|0;
    $8 = $55;
    $56 = $5;
    $57 = ((($56)) + 2|0);
    $58 = (($57) + ($54<<1)|0);
    HEAP16[$58>>1] = $53;
    $7 = 0;
    $59 = $9;
    $60 = (($59) + 1)|0;
    $10 = $60;
    break;
   }
   default: {
    label = 27;
    break L1;
   }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   $30 = $11;
   $31 = ($30|0)==(0);
   $32 = $7;
   $33 = ($32<<16>>16)!=(0);
   $or$cond = $31 | $33;
   if (!($or$cond)) {
    label = 27;
    break;
   }
   $34 = $7;
   $35 = $34&65535;
   $36 = $13;
   $37 = $35 & $36;
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 21;
    break;
   }
   $40 = $13;
   $41 = $7;
   $42 = $41&65535;
   $43 = $42 | $40;
   $44 = $43&65535;
   $7 = $44;
  }
  $63 = $9;
  $64 = (($63) + 1)|0;
  $9 = $64;
 }
 if ((label|0) == 21) {
  $39 = $4;
  _compileError($39,3141,$vararg_buffer);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 25) {
  $49 = $4;
  _compileError($49,3171,$vararg_buffer2);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 27) {
  $61 = $4;
  $62 = (__lou_showString($12,1,0)|0);
  HEAP32[$vararg_buffer4>>2] = $62;
  _compileError($61,3199,$vararg_buffer4);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 29) {
  $65 = ($19|0)==($20|0);
  if ($65) {
   $66 = $4;
   _compileError($66,3171,$vararg_buffer6);
   $3 = 0;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  } else {
   $67 = $7;
   $68 = $67&65535;
   $69 = $68 | 32768;
   $70 = $69&65535;
   $71 = $8;
   $72 = (($71) + 1)|0;
   $8 = $72;
   $73 = $5;
   $74 = ((($73)) + 2|0);
   $75 = (($74) + ($71<<1)|0);
   HEAP16[$75>>1] = $70;
   $76 = $8;
   $77 = $76&65535;
   $78 = $5;
   HEAP16[$78>>1] = $77;
   $3 = 1;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  }
 }
 return (0)|0;
}
function _lou_readCharFromFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $4;
  HEAP32[$11>>2] = 0;
  $12 = $3;
  HEAP32[2641] = $12;
  HEAP32[(10576)>>2] = 0;
  HEAP32[(10580)>>2] = 0;
  HEAP32[(10572)>>2] = 0;
  $13 = HEAP32[2641]|0;
  $14 = (_fopen($13,1411)|0);
  HEAP32[(10568)>>2] = $14;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   $16 = HEAP32[2641]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   __lou_logMessage(40000,1413,$vararg_buffer);
   $17 = $4;
   HEAP32[$17>>2] = 1;
   $2 = -1;
   $27 = $2;
   STACKTOP = sp;return ($27|0);
  }
 }
 $18 = HEAP32[(10568)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $4;
  HEAP32[$20>>2] = 1;
  $2 = -1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $21 = (_getAChar(10564)|0);
 $5 = $21;
 $22 = $5;
 $23 = ($22|0)==(-1);
 if ($23) {
  $24 = HEAP32[(10568)>>2]|0;
  (_fclose($24)|0);
  HEAP32[(10568)>>2] = 0;
  $25 = $4;
  HEAP32[$25>>2] = 1;
 }
 $26 = $5;
 $2 = $26;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function __lou_getTablePath() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 56|0;
 $4 = 0;
 $3 = $1;
 $5 = (_getenv((1435|0))|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if ($11) {
   $4 = 1;
   $12 = $3;
   $13 = $2;
   HEAP32[$vararg_buffer>>2] = $13;
   $14 = (_sprintf($12,1451,$vararg_buffer)|0);
   $15 = $3;
   $16 = (($15) + ($14)|0);
   $3 = $16;
  }
 }
 $17 = (_lou_getDataPath()|0);
 $2 = $17;
 $18 = $2;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $2;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $3;
   $25 = $2;
   HEAP32[$vararg_buffer1>>2] = $25;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 47;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = 1467;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = 47;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = 1476;
   $26 = (_sprintf($24,1455,$vararg_buffer1)|0);
   $27 = $3;
   $28 = (($27) + ($26)|0);
   $3 = $28;
  }
 }
 $29 = $4;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $3;
  HEAP32[$vararg_buffer8>>2] = 1483;
  $32 = (_sprintf($31,1451,$vararg_buffer8)|0);
  $33 = $3;
  $34 = (($33) + ($32)|0);
  $3 = $34;
 }
 $35 = HEAP8[$1>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = ((($1)) + 1|0);
  $39 = (___strdup($38)|0);
  $0 = $39;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $40 = (___strdup(10250)|0);
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function __lou_defaultTableResolver($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $13 = (__lou_getTablePath()|0);
 $5 = $13;
 $11 = 0;
 $14 = $3;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = $9;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(44);
  if ($22) {
   $23 = $11;
   $24 = (($23) + 1)|0;
   $11 = $24;
  }
  $25 = $9;
  $26 = ((($25)) + 1|0);
  $9 = $26;
 }
 $27 = $11;
 $28 = (($27) + 2)|0;
 $29 = (_calloc($28,4)|0);
 $6 = $29;
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  __lou_outOfMemory();
 }
 $11 = 0;
 $32 = $3;
 $33 = (___strdup($32)|0);
 $8 = $33;
 $34 = $8;
 $7 = $34;
 while(1) {
  $35 = $7;
  $9 = $35;
  while(1) {
   $36 = $9;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    break;
   }
   $40 = $9;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)!=(44);
   if (!($43)) {
    break;
   }
   $44 = $9;
   $45 = ((($44)) + 1|0);
   $9 = $45;
  }
  $46 = $9;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(0);
  $50 = $49&1;
  $10 = $50;
  $51 = $9;
  HEAP8[$51>>0] = 0;
  $52 = $7;
  $53 = $4;
  $54 = $5;
  $55 = (_resolveSubtable($52,$53,$54)|0);
  $56 = $11;
  $57 = (($56) + 1)|0;
  $11 = $57;
  $58 = $6;
  $59 = (($58) + ($56<<2)|0);
  HEAP32[$59>>2] = $55;
  $60 = ($55|0)!=(0|0);
  if (!($60)) {
   break;
  }
  $73 = $11;
  $74 = ($73|0)==(1);
  if ($74) {
   $75 = $7;
   $4 = $75;
  }
  $76 = $10;
  $77 = ($76|0)!=(0);
  if ($77) {
   label = 22;
   break;
  }
  $78 = $9;
  $79 = ((($78)) + 1|0);
  $7 = $79;
 }
 if ((label|0) == 22) {
  $80 = $5;
  _free($80);
  $81 = $8;
  _free($81);
  $82 = $11;
  $83 = $6;
  $84 = (($83) + ($82<<2)|0);
  HEAP32[$84>>2] = 0;
  $85 = $6;
  $2 = $85;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $61 = $7;
 HEAP32[$vararg_buffer>>2] = $61;
 __lou_logMessage(40000,7269,$vararg_buffer);
 $62 = (_getenv((1435|0))|0);
 $12 = $62;
 $63 = $12;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $12;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $12;
   HEAP32[$vararg_buffer1>>2] = $69;
   __lou_logMessage(40000,1516,$vararg_buffer1);
  }
 }
 $70 = $5;
 _free($70);
 $71 = $8;
 _free($71);
 $72 = $6;
 _free_tablefiles($72);
 $2 = 0;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _resolveSubtable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = $4;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = (_malloc(4096)|0);
   $7 = $19;
   $20 = $5;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $7;
    $23 = $5;
    (_strcpy($22,$23)|0);
    $24 = $7;
    $25 = (_strlen($24)|0);
    $8 = $25;
    while(1) {
     $26 = $8;
     $27 = ($26|0)>=(0);
     if ($27) {
      $28 = $8;
      $29 = $7;
      $30 = (($29) + ($28)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 << 24 >> 24;
      $33 = ($32|0)!=(47);
      if ($33) {
       $34 = $8;
       $35 = $7;
       $36 = (($35) + ($34)|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = ($38|0)!=(92);
       $125 = $39;
      } else {
       $125 = 0;
      }
     } else {
      $125 = 0;
     }
     $40 = $8;
     if (!($125)) {
      break;
     }
     $41 = (($40) + -1)|0;
     $8 = $41;
    }
    $42 = (($40) + 1)|0;
    $8 = $42;
    $43 = $7;
    $44 = (($43) + ($42)|0);
    HEAP8[$44>>0] = 0;
    $45 = $7;
    $46 = $4;
    (_strcat($45,$46)|0);
    $47 = $7;
    $48 = (_stat($47,14780)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $50 = HEAP32[(14792)>>2]|0;
     $51 = $50 & 16384;
     $52 = ($51|0)!=(0);
     if (!($52)) {
      $53 = $7;
      HEAP32[$vararg_buffer>>2] = $53;
      __lou_logMessage(10000,3222,$vararg_buffer);
      $54 = $7;
      $3 = $54;
      $124 = $3;
      STACKTOP = sp;return ($124|0);
     }
    }
   }
   $55 = $7;
   $56 = $4;
   (_strcpy($55,$56)|0);
   $57 = $7;
   $58 = (_stat($57,14780)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = HEAP32[(14792)>>2]|0;
    $61 = $60 & 16384;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     $63 = $7;
     HEAP32[$vararg_buffer1>>2] = $63;
     __lou_logMessage(10000,3222,$vararg_buffer1);
     $64 = $7;
     $3 = $64;
     $124 = $3;
     STACKTOP = sp;return ($124|0);
    }
   }
   $65 = $6;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 << 24 >> 24;
   $68 = ($67|0)!=(0);
   do {
    if ($68) {
     $69 = $6;
     $70 = (___strdup($69)|0);
     $12 = $70;
     $71 = $12;
     $9 = $71;
     while(1) {
      $72 = $9;
      $11 = $72;
      while(1) {
       $73 = $11;
       $74 = HEAP8[$73>>0]|0;
       $75 = $74 << 24 >> 24;
       $76 = ($75|0)!=(0);
       if (!($76)) {
        break;
       }
       $77 = $11;
       $78 = HEAP8[$77>>0]|0;
       $79 = $78 << 24 >> 24;
       $80 = ($79|0)!=(44);
       if (!($80)) {
        break;
       }
       $81 = $11;
       $82 = ((($81)) + 1|0);
       $11 = $82;
      }
      $83 = $11;
      $84 = HEAP8[$83>>0]|0;
      $85 = $84 << 24 >> 24;
      $86 = ($85|0)==(0);
      $87 = $86&1;
      $10 = $87;
      $88 = $11;
      HEAP8[$88>>0] = 0;
      $89 = $9;
      $90 = $11;
      $91 = ($89|0)==($90|0);
      if ($91) {
       $9 = 10250;
      }
      $92 = $7;
      $93 = $9;
      $94 = $4;
      HEAP32[$vararg_buffer4>>2] = $93;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = 47;
      $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $94;
      (_sprintf($92,7240,$vararg_buffer4)|0);
      $95 = $7;
      $96 = (_stat($95,14780)|0);
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = HEAP32[(14792)>>2]|0;
       $99 = $98 & 16384;
       $100 = ($99|0)!=(0);
       if (!($100)) {
        label = 27;
        break;
       }
      }
      $104 = $10;
      $105 = ($104|0)!=(0);
      if ($105) {
       label = 34;
       break;
      }
      $106 = $7;
      $107 = $9;
      $108 = $4;
      HEAP32[$vararg_buffer12>>2] = $107;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = 47;
      $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
      HEAP32[$vararg_ptr16>>2] = 1467;
      $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
      HEAP32[$vararg_ptr17>>2] = 47;
      $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
      HEAP32[$vararg_ptr18>>2] = 1476;
      $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
      HEAP32[$vararg_ptr19>>2] = 47;
      $vararg_ptr20 = ((($vararg_buffer12)) + 24|0);
      HEAP32[$vararg_ptr20>>2] = $108;
      (_sprintf($106,3237,$vararg_buffer12)|0);
      $109 = $7;
      $110 = (_stat($109,14780)|0);
      $111 = ($110|0)==(0);
      if ($111) {
       $112 = HEAP32[(14792)>>2]|0;
       $113 = $112 & 16384;
       $114 = ($113|0)!=(0);
       if (!($114)) {
        label = 31;
        break;
       }
      }
      $118 = $10;
      $119 = ($118|0)!=(0);
      if ($119) {
       label = 34;
       break;
      }
      $120 = $11;
      $121 = ((($120)) + 1|0);
      $9 = $121;
     }
     if ((label|0) == 27) {
      $101 = $7;
      HEAP32[$vararg_buffer9>>2] = $101;
      __lou_logMessage(10000,3222,$vararg_buffer9);
      $102 = $12;
      _free($102);
      $103 = $7;
      $3 = $103;
      $124 = $3;
      STACKTOP = sp;return ($124|0);
     }
     else if ((label|0) == 31) {
      $115 = $7;
      HEAP32[$vararg_buffer21>>2] = $115;
      __lou_logMessage(10000,3222,$vararg_buffer21);
      $116 = $12;
      _free($116);
      $117 = $7;
      $3 = $117;
      $124 = $3;
      STACKTOP = sp;return ($124|0);
     }
     else if ((label|0) == 34) {
      $122 = $12;
      _free($122);
      break;
     }
    }
   } while(0);
   $123 = $7;
   _free($123);
   $3 = 0;
   $124 = $3;
   STACKTOP = sp;return ($124|0);
  }
 }
 $3 = 0;
 $124 = $3;
 STACKTOP = sp;return ($124|0);
}
function _free_tablefiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $2 = $12;
 }
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function __lou_resolveTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[164]|0;
 $7 = $2;
 $8 = $3;
 $9 = (FUNCTION_TABLE_iii[$6 & 31]($7,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = (_copyStringArray($10)|0);
 $5 = $11;
 $12 = HEAP32[164]|0;
 $13 = ($12|0)==(4|0);
 if (!($13)) {
  $15 = $5;
  STACKTOP = sp;return ($15|0);
 }
 $14 = $4;
 _free_tablefiles($14);
 $15 = $5;
 STACKTOP = sp;return ($15|0);
}
function _copyStringArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $3;
  $13 = (($12) + 1)|0;
  if (!($11)) {
   break;
  }
  $3 = $13;
 }
 $14 = $13<<2;
 $15 = (_malloc($14)|0);
 $4 = $15;
 $16 = $3;
 $17 = $4;
 $18 = (($17) + ($16<<2)|0);
 HEAP32[$18>>2] = 0;
 while(1) {
  $19 = $3;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  $22 = (($21) + -1)|0;
  $3 = $22;
  $23 = $3;
  $24 = $2;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (___strdup($26)|0);
  $28 = $3;
  $29 = $4;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = $27;
 }
 $31 = $4;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _lou_registerTableResolver($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[164] = $2;
 STACKTOP = sp;return;
}
function _lou_getEmphClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 20|0;
 $2 = $0;
 $4 = 0;
 $9 = $2;
 $10 = (__lou_getTranslationTable($9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 while(1) {
  $13 = $4;
  $14 = ($13>>>0)<(10);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = $5;
  $17 = ((($16)) + 308|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
  $20 = $6;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   break;
  }
  $22 = $6;
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
  $25 = (($3) + ($23<<2)|0);
  HEAP32[$25>>2] = $22;
 }
 $26 = $4;
 $27 = (($26) + 1)|0;
 $4 = $27;
 $28 = (($3) + ($26<<2)|0);
 HEAP32[$28>>2] = 0;
 $29 = $4;
 $30 = $29<<2;
 $7 = $30;
 $31 = $7;
 $32 = (_malloc($31)|0);
 $8 = $32;
 $33 = $8;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $8;
  $36 = $7;
  _memcpy(($35|0),($3|0),($36|0))|0;
  $37 = $8;
  $1 = $37;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 } else {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __lou_getTranslationTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _getTable($3,0,$2,0);
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __lou_getTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 4|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 _getTable($10,$11,$8,$9);
 $12 = HEAP32[$8>>2]|0;
 $13 = $6;
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$9>>2]|0;
 $15 = $7;
 HEAP32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function _getTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $14 = sp + 24|0;
 $15 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $20 = $4;
 $21 = ($20|0)==(0|0);
 if ($21) {
  label = 3;
 } else {
  $22 = $4;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = 0;
 }
 $26 = $5;
 $27 = ($26|0)==(0|0);
 if ($27) {
  label = 6;
 } else {
  $28 = $5;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(0);
  if ($31) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $7 = 0;
 }
 $32 = $6;
 $33 = ($32|0)!=(0|0);
 L11: do {
  if ($33) {
   $34 = $4;
   $35 = (_strlen($34)|0);
   $8 = $35;
   $36 = $6;
   HEAP32[$36>>2] = 0;
   $37 = HEAP32[3674]|0;
   $10 = $37;
   $11 = 0;
   while(1) {
    $38 = $10;
    $39 = ($38|0)!=(0|0);
    if (!($39)) {
     break L11;
    }
    $40 = $8;
    $41 = $10;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40|0)==($43|0);
    if ($44) {
     $45 = $10;
     $46 = ((($45)) + 12|0);
     $47 = $4;
     $48 = $8;
     $49 = (_memcmp($46,$47,$48)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      break;
     }
    }
    $63 = $10;
    $11 = $63;
    $64 = $10;
    $65 = HEAP32[$64>>2]|0;
    $10 = $65;
   }
   $51 = $11;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $10;
    $54 = HEAP32[$53>>2]|0;
    $55 = $11;
    HEAP32[$55>>2] = $54;
    $56 = HEAP32[3674]|0;
    $57 = $10;
    HEAP32[$57>>2] = $56;
    $58 = $10;
    HEAP32[3674] = $58;
   }
   $59 = $10;
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $6;
   HEAP32[$62>>2] = $61;
  }
 } while(0);
 $66 = $7;
 $67 = ($66|0)!=(0|0);
 L24: do {
  if ($67) {
   $68 = $5;
   $69 = (_strlen($68)|0);
   $9 = $69;
   $70 = $7;
   HEAP32[$70>>2] = 0;
   $71 = HEAP32[3675]|0;
   $12 = $71;
   $13 = 0;
   while(1) {
    $72 = $12;
    $73 = ($72|0)!=(0|0);
    if (!($73)) {
     break L24;
    }
    $74 = $9;
    $75 = $12;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($74|0)==($77|0);
    if ($78) {
     $79 = $12;
     $80 = ((($79)) + 12|0);
     $81 = $5;
     $82 = $9;
     $83 = (_memcmp($80,$81,$82)|0);
     $84 = ($83|0)==(0);
     if ($84) {
      break;
     }
    }
    $97 = $12;
    $13 = $97;
    $98 = $12;
    $99 = HEAP32[$98>>2]|0;
    $12 = $99;
   }
   $85 = $13;
   $86 = ($85|0)!=(0|0);
   if ($86) {
    $87 = $12;
    $88 = HEAP32[$87>>2]|0;
    $89 = $13;
    HEAP32[$89>>2] = $88;
    $90 = HEAP32[3675]|0;
    $91 = $12;
    HEAP32[$91>>2] = $90;
    $92 = $12;
    HEAP32[3675] = $92;
   }
   $93 = $12;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $7;
   HEAP32[$96>>2] = $95;
  }
 } while(0);
 $100 = $6;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = $6;
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0|0);
  if (!($104)) {
   label = 27;
  }
 } else {
  label = 27;
 }
 if ((label|0) == 27) {
  $105 = $7;
  $106 = ($105|0)!=(0|0);
  if (!($106)) {
   STACKTOP = sp;return;
  }
  $107 = $7;
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(0|0);
  if (!($109)) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 $110 = $4;
 $111 = $5;
 $112 = $6;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = $6;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)==(0|0);
  if ($116) {
   $122 = $14;
  } else {
   label = 31;
  }
 } else {
  label = 31;
 }
 if ((label|0) == 31) {
  $122 = 0;
 }
 $117 = $7;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = $7;
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)==(0|0);
  if ($121) {
   $123 = $15;
  } else {
   label = 34;
  }
 } else {
  label = 34;
 }
 if ((label|0) == 34) {
  $123 = 0;
 }
 $124 = (_compileTable($110,$111,$122,$123)|0);
 $125 = ($124|0)!=(0);
 if (!($125)) {
  $172 = $4;
  HEAP32[$vararg_buffer>>2] = $172;
  __lou_logMessage(40000,1535,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $126 = HEAP32[$14>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = $8;
  $129 = (16 + ($128))|0;
  $16 = $129;
  $130 = $16;
  $131 = (_malloc($130)|0);
  $17 = $131;
  $132 = $17;
  $133 = ($132|0)!=(0|0);
  if (!($133)) {
   __lou_outOfMemory();
  }
  $134 = HEAP32[3674]|0;
  $135 = $17;
  HEAP32[$135>>2] = $134;
  $136 = HEAP32[$14>>2]|0;
  $137 = $17;
  $138 = ((($137)) + 4|0);
  HEAP32[$138>>2] = $136;
  $139 = $8;
  $140 = $17;
  $141 = ((($140)) + 8|0);
  HEAP32[$141>>2] = $139;
  $142 = $17;
  $143 = ((($142)) + 12|0);
  $144 = $4;
  $145 = $8;
  _memcpy(($143|0),($144|0),($145|0))|0;
  $146 = $17;
  HEAP32[3674] = $146;
  $147 = HEAP32[$14>>2]|0;
  $148 = $6;
  HEAP32[$148>>2] = $147;
 }
 $149 = HEAP32[$15>>2]|0;
 $150 = ($149|0)!=(0|0);
 if (!($150)) {
  STACKTOP = sp;return;
 }
 $151 = $9;
 $152 = (16 + ($151))|0;
 $18 = $152;
 $153 = $18;
 $154 = (_malloc($153)|0);
 $19 = $154;
 $155 = $19;
 $156 = ($155|0)!=(0|0);
 if (!($156)) {
  __lou_outOfMemory();
 }
 $157 = HEAP32[3675]|0;
 $158 = $19;
 HEAP32[$158>>2] = $157;
 $159 = HEAP32[$15>>2]|0;
 $160 = $19;
 $161 = ((($160)) + 4|0);
 HEAP32[$161>>2] = $159;
 $162 = $9;
 $163 = $19;
 $164 = ((($163)) + 8|0);
 HEAP32[$164>>2] = $162;
 $165 = $19;
 $166 = ((($165)) + 12|0);
 $167 = $5;
 $168 = $9;
 _memcpy(($166|0),($167|0),($168|0))|0;
 $169 = $19;
 HEAP32[3675] = $169;
 $170 = HEAP32[$15>>2]|0;
 $171 = $7;
 HEAP32[$171>>2] = $170;
 STACKTOP = sp;return;
}
function _lou_getTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = $2;
 __lou_getTable($5,$6,$3,$4);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = HEAP32[$3>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __lou_getDisplayTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _getTable(0,$3,0,$2);
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _compileTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 | $15;
 if (!($or$cond)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $16 = $8;
 $17 = ($16|0)==(0|0);
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 $or$cond3 = $17 | $19;
 if (!($or$cond3)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $20 = $7;
 $21 = ($20|0)!=(0|0);
 $22 = $8;
 $23 = ($22|0)!=(0|0);
 $or$cond5 = $21 | $23;
 if (!($or$cond5)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $24 = $7;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $7;
  HEAP32[$26>>2] = 0;
 }
 $27 = $8;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $8;
  HEAP32[$29>>2] = 0;
 }
 HEAP32[3714] = 0;
 HEAP32[3694] = 0;
 HEAP32[2640] = 0;
 $30 = HEAP16[7862]|0;
 $31 = ($30<<16>>16)!=(0);
 L19: do {
  if (!($31)) {
   $11 = 0;
   while(1) {
    $32 = $11;
    $33 = ($32>>>0)<(114);
    if (!($33)) {
     break L19;
    }
    $34 = $11;
    $35 = (200 + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_strlen($36)|0);
    $38 = $37&65535;
    $39 = $11;
    $40 = (15724 + ($39<<1)|0);
    HEAP16[$40>>1] = $38;
    $41 = $11;
    $42 = (($41) + 1)|0;
    $11 = $42;
   }
  }
 } while(0);
 $43 = $7;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $7;
  (_allocateTranslationTable(0,$45)|0);
 }
 $46 = $8;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $8;
  (_allocateDisplayTable(0,$48)|0);
 }
 $49 = $7;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $7;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 308|0);
  HEAP32[$53>>2] = 0;
  $54 = $7;
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 1012|0);
  HEAP32[$56>>2] = 0;
  $57 = $7;
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 1024|0);
  HEAP32[$59>>2] = 0;
 }
 $60 = $7;
 $61 = $8;
 (_compileString(3252,$60,$61)|0);
 $62 = $8;
 $63 = ($62|0)!=(0|0);
 $64 = $7;
 $65 = ($64|0)!=(0|0);
 $or$cond7 = $63 & $65;
 L34: do {
  if ($or$cond7) {
   $66 = $5;
   $67 = $6;
   $68 = (_strcmp($66,$67)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $5;
    $71 = (__lou_resolveTable($70,0)|0);
    $9 = $71;
    $72 = ($71|0)!=(0|0);
    if (!($72)) {
     $73 = HEAP32[2640]|0;
     $74 = (($73) + 1)|0;
     HEAP32[2640] = $74;
     break;
    }
    $75 = $9;
    $10 = $75;
    while(1) {
     $76 = $10;
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)!=(0|0);
     if (!($78)) {
      break L34;
     }
     $79 = $10;
     $80 = HEAP32[$79>>2]|0;
     $81 = $7;
     $82 = $8;
     $83 = (_compileFile($80,$81,$82)|0);
     $84 = ($83|0)!=(0);
     if (!($84)) {
      break L34;
     }
     $85 = $10;
     $86 = ((($85)) + 4|0);
     $10 = $86;
    }
   } else {
    label = 29;
   }
  } else {
   label = 29;
  }
 } while(0);
 L44: do {
  if ((label|0) == 29) {
   $87 = $8;
   $88 = ($87|0)!=(0|0);
   if ($88) {
    $89 = $6;
    $90 = (__lou_resolveTable($89,0)|0);
    $9 = $90;
    $91 = ($90|0)!=(0|0);
    if (!($91)) {
     $92 = HEAP32[2640]|0;
     $93 = (($92) + 1)|0;
     HEAP32[2640] = $93;
     break;
    }
    $94 = $9;
    $10 = $94;
    while(1) {
     $95 = $10;
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)!=(0|0);
     if (!($97)) {
      break;
     }
     $98 = $10;
     $99 = HEAP32[$98>>2]|0;
     $100 = $8;
     $101 = (_compileFile($99,0,$100)|0);
     $102 = ($101|0)!=(0);
     if (!($102)) {
      break L44;
     }
     $103 = $10;
     $104 = ((($103)) + 4|0);
     $10 = $104;
    }
    $105 = $9;
    _free_tablefiles($105);
    $9 = 0;
   }
   $106 = $7;
   $107 = ($106|0)!=(0|0);
   if ($107) {
    $108 = $5;
    $109 = (__lou_resolveTable($108,0)|0);
    $9 = $109;
    $110 = ($109|0)!=(0|0);
    if (!($110)) {
     $111 = HEAP32[2640]|0;
     $112 = (($111) + 1)|0;
     HEAP32[2640] = $112;
     break;
    }
    $113 = $9;
    $10 = $113;
    while(1) {
     $114 = $10;
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)!=(0|0);
     if (!($116)) {
      break L44;
     }
     $117 = $10;
     $118 = HEAP32[$117>>2]|0;
     $119 = $7;
     $120 = (_compileFile($118,$119,0)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      break L44;
     }
     $122 = $10;
     $123 = ((($122)) + 4|0);
     $10 = $123;
    }
   }
  }
 } while(0);
 $124 = $9;
 _free_tablefiles($124);
 $125 = HEAP32[3694]|0;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = HEAP32[3694]|0;
  HEAP32[$vararg_buffer>>2] = $127;
  __lou_logMessage(30000,3296,$vararg_buffer);
 }
 $128 = HEAP32[2640]|0;
 $129 = ($128|0)!=(0);
 if (!($129)) {
  $130 = $7;
  $131 = ($130|0)!=(0|0);
  if ($131) {
   $132 = $7;
   $133 = HEAP32[$132>>2]|0;
   (_setDefaults($133)|0);
  }
  $4 = 1;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $134 = HEAP32[2640]|0;
 HEAP32[$vararg_buffer8>>2] = $134;
 __lou_logMessage(40000,3315,$vararg_buffer8);
 $135 = $7;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = $7;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)!=(0|0);
  if ($139) {
   $140 = $7;
   $141 = HEAP32[$140>>2]|0;
   _free($141);
  }
  $142 = $7;
  HEAP32[$142>>2] = 0;
 }
 $143 = $8;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = $8;
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)!=(0|0);
  if ($147) {
   $148 = $8;
   $149 = HEAP32[$148>>2]|0;
   _free($149);
  }
  $150 = $8;
  HEAP32[$150>>2] = 0;
 }
 $4 = 0;
 $151 = $4;
 STACKTOP = sp;return ($151|0);
}
function _lou_checkTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_lou_getTable($3)|0);
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $1 = 1;
 } else {
  $1 = 0;
 }
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _lou_getTypeformForEmphClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (__lou_getTranslationTable($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 $5 = 0;
 while(1) {
  $11 = $5;
  $12 = $6;
  $13 = ((($12)) + 308|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = ((($19)) + 308|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_strcmp($17,$22)|0);
  $24 = ($23|0)==(0);
  $25 = $5;
  if ($24) {
   label = 6;
   break;
  }
  $28 = (($25) + 1)|0;
  $5 = $28;
 }
 if ((label|0) == 6) {
  $26 = 1 << $25;
  $27 = $26&65535;
  $2 = $27;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 8) {
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __lou_allocMem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = ($12|0)<(1024);
 if ($13) {
  $7 = 1024;
 }
 $14 = $8;
 $15 = ($14|0)<(1024);
 if ($15) {
  $8 = 1024;
 }
 $16 = $5;
 switch ($16|0) {
 case 0:  {
  $17 = $8;
  $18 = HEAP32[3676]|0;
  $19 = ($17|0)>($18|0);
  if ($19) {
   $20 = HEAP32[3677]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = HEAP32[3677]|0;
    _free($22);
   }
   $23 = $8;
   $24 = (($23) + 4)|0;
   $25 = $24<<1;
   $26 = (_malloc($25)|0);
   HEAP32[3677] = $26;
   $27 = HEAP32[3677]|0;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    __lou_outOfMemory();
   }
   $29 = $8;
   HEAP32[3676] = $29;
  }
  $30 = HEAP32[3677]|0;
  $4 = $30;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 1:  {
  $31 = HEAP32[3678]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = HEAP32[3678]|0;
   _free($33);
  }
  $34 = $7;
  $35 = (($34) + 4)|0;
  $36 = $35<<2;
  $37 = (_malloc($36)|0);
  HEAP32[3678] = $37;
  $38 = HEAP32[3678]|0;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   __lou_outOfMemory();
  }
  $40 = HEAP32[3678]|0;
  $4 = $40;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 2:  {
  $41 = HEAP32[3679]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = HEAP32[3679]|0;
   _free($43);
  }
  $44 = $7;
  $45 = (($44) + 4)|0;
  $46 = $45<<3;
  $47 = (_malloc($46)|0);
  HEAP32[3679] = $47;
  $48 = HEAP32[3679]|0;
  $49 = ($48|0)!=(0|0);
  if (!($49)) {
   __lou_outOfMemory();
  }
  $50 = HEAP32[3679]|0;
  $4 = $50;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 3:  {
  $51 = $8;
  $52 = HEAP32[3680]|0;
  $53 = ($51|0)>($52|0);
  if ($53) {
   $54 = HEAP32[3681]|0;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = HEAP32[3681]|0;
    _free($56);
   }
   $57 = $8;
   $58 = (($57) + 4)|0;
   $59 = (_malloc($58)|0);
   HEAP32[3681] = $59;
   $60 = HEAP32[3681]|0;
   $61 = ($60|0)!=(0|0);
   if (!($61)) {
    __lou_outOfMemory();
   }
   $62 = $8;
   HEAP32[3680] = $62;
  }
  $63 = HEAP32[3681]|0;
  $4 = $63;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 4:  {
  $64 = $6;
  $65 = ($64|0)<(0);
  $66 = $6;
  $67 = ($66|0)>=(3);
  $or$cond = $65 | $67;
  if ($or$cond) {
   $68 = $6;
   HEAP32[$vararg_buffer>>2] = $68;
   __lou_logMessage(50000,1560,$vararg_buffer);
   _exit(3);
   // unreachable;
  }
  $69 = $8;
  $70 = $6;
  $71 = (14728 + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69|0)>($72|0);
  if ($73) {
   $74 = $6;
   $75 = (14740 + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)!=(0|0);
   if ($77) {
    $78 = $6;
    $79 = (14740 + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    _free($80);
   }
   $81 = $8;
   $82 = (($81) + 4)|0;
   $83 = $82<<1;
   $84 = (_malloc($83)|0);
   $85 = $6;
   $86 = (14740 + ($85<<2)|0);
   HEAP32[$86>>2] = $84;
   $87 = $6;
   $88 = (14740 + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)!=(0|0);
   if (!($90)) {
    __lou_outOfMemory();
   }
   $91 = $8;
   $92 = $6;
   $93 = (14728 + ($92<<2)|0);
   HEAP32[$93>>2] = $91;
  }
  $94 = $6;
  $95 = (14740 + ($94<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $4 = $96;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 5:  {
  $97 = $7;
  $98 = $8;
  $99 = ($97|0)>=($98|0);
  if ($99) {
   $100 = $7;
   $9 = $100;
  } else {
   $101 = $8;
   $9 = $101;
  }
  $102 = $9;
  $103 = HEAP32[3688]|0;
  $104 = ($102|0)>($103|0);
  if ($104) {
   $105 = HEAP32[3689]|0;
   $106 = ($105|0)!=(0|0);
   if ($106) {
    $107 = HEAP32[3689]|0;
    _free($107);
   }
   $108 = $9;
   $109 = (($108) + 4)|0;
   $110 = $109<<2;
   $111 = (_malloc($110)|0);
   HEAP32[3689] = $111;
   $112 = HEAP32[3689]|0;
   $113 = ($112|0)!=(0|0);
   if (!($113)) {
    __lou_outOfMemory();
   }
   $114 = $9;
   HEAP32[3688] = $114;
  }
  $115 = HEAP32[3689]|0;
  $4 = $115;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 6:  {
  $116 = $7;
  $117 = $8;
  $118 = ($116|0)>=($117|0);
  if ($118) {
   $119 = $7;
   $10 = $119;
  } else {
   $120 = $8;
   $10 = $120;
  }
  $121 = $10;
  $122 = HEAP32[3690]|0;
  $123 = ($121|0)>($122|0);
  if ($123) {
   $124 = HEAP32[3691]|0;
   $125 = ($124|0)!=(0|0);
   if ($125) {
    $126 = HEAP32[3691]|0;
    _free($126);
   }
   $127 = $10;
   $128 = (($127) + 4)|0;
   $129 = $128<<2;
   $130 = (_malloc($129)|0);
   HEAP32[3691] = $130;
   $131 = HEAP32[3691]|0;
   $132 = ($131|0)!=(0|0);
   if (!($132)) {
    __lou_outOfMemory();
   }
   $133 = $10;
   HEAP32[3690] = $133;
  }
  $134 = HEAP32[3691]|0;
  $4 = $134;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 7:  {
  $135 = $7;
  $136 = $8;
  $137 = ($135|0)>=($136|0);
  if ($137) {
   $138 = $7;
   $11 = $138;
  } else {
   $139 = $8;
   $11 = $139;
  }
  $140 = $11;
  $141 = HEAP32[3692]|0;
  $142 = ($140|0)>($141|0);
  if ($142) {
   $143 = HEAP32[3693]|0;
   $144 = ($143|0)!=(0|0);
   if ($144) {
    $145 = HEAP32[3693]|0;
    _free($145);
   }
   $146 = $11;
   $147 = (($146) + 4)|0;
   $148 = $147<<2;
   $149 = (_malloc($148)|0);
   HEAP32[3693] = $149;
   $150 = HEAP32[3693]|0;
   $151 = ($150|0)!=(0|0);
   if (!($151)) {
    __lou_outOfMemory();
   }
   $152 = $11;
   HEAP32[3692] = $152;
  }
  $153 = HEAP32[3693]|0;
  $4 = $153;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
  break;
 }
 default: {
  $4 = 0;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
 }
 }
 return (0)|0;
}
function _lou_free() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 _lou_logEnd();
 $5 = HEAP32[3674]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[3674]|0;
  $0 = $7;
  while(1) {
   $8 = $0;
   $9 = ($8|0)!=(0|0);
   if (!($9)) {
    break;
   }
   $10 = $0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $3 = $12;
   $2 = 0;
   while(1) {
    $13 = $2;
    $14 = $3;
    $15 = ((($14)) + 308|0);
    $16 = (($15) + ($13<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break;
    }
    $19 = $2;
    $20 = $3;
    $21 = ((($20)) + 308|0);
    $22 = (($21) + ($19<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _free($23);
    $24 = $2;
    $25 = (($24) + 1)|0;
    $2 = $25;
   }
   $26 = $3;
   $27 = ((($26)) + 1012|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $3;
    _deallocateCharacterClasses($30);
   }
   $31 = $3;
   $32 = ((($31)) + 1024|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $3;
    _deallocateRuleNames($35);
   }
   $36 = $3;
   _free($36);
   $37 = $0;
   $1 = $37;
   $38 = $0;
   $39 = HEAP32[$38>>2]|0;
   $0 = $39;
   $40 = $1;
   _free($40);
  }
  HEAP32[3674] = 0;
 }
 $41 = HEAP32[3677]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = HEAP32[3677]|0;
  _free($43);
 }
 HEAP32[3677] = 0;
 $44 = HEAP32[3678]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = HEAP32[3678]|0;
  _free($46);
 }
 HEAP32[3678] = 0;
 $47 = HEAP32[3679]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = HEAP32[3679]|0;
  _free($49);
 }
 HEAP32[3679] = 0;
 HEAP32[3676] = 0;
 $50 = HEAP32[3681]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = HEAP32[3681]|0;
  _free($52);
 }
 HEAP32[3681] = 0;
 HEAP32[3680] = 0;
 $4 = 0;
 while(1) {
  $53 = $4;
  $54 = ($53|0)<(3);
  if (!($54)) {
   break;
  }
  $55 = $4;
  $56 = (14740 + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $59 = $4;
   $60 = (14740 + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   _free($61);
  }
  $62 = $4;
  $63 = (14740 + ($62<<2)|0);
  HEAP32[$63>>2] = 0;
  $64 = $4;
  $65 = (14728 + ($64<<2)|0);
  HEAP32[$65>>2] = 0;
  $66 = $4;
  $67 = (($66) + 1)|0;
  $4 = $67;
 }
 $68 = HEAP32[3689]|0;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = HEAP32[3689]|0;
  _free($70);
 }
 HEAP32[3689] = 0;
 HEAP32[3688] = 0;
 $71 = HEAP32[3691]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = HEAP32[3691]|0;
  _free($73);
 }
 HEAP32[3691] = 0;
 HEAP32[3690] = 0;
 $74 = HEAP32[3693]|0;
 $75 = ($74|0)!=(0|0);
 if (!($75)) {
  HEAP32[3693] = 0;
  HEAP32[3692] = 0;
  HEAP16[7862] = 0;
  STACKTOP = sp;return;
 }
 $76 = HEAP32[3693]|0;
 _free($76);
 HEAP32[3693] = 0;
 HEAP32[3692] = 0;
 HEAP16[7862] = 0;
 STACKTOP = sp;return;
}
function _deallocateCharacterClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 1012|0);
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  HEAP32[$14>>2] = $13;
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   continue;
  }
  $17 = $3;
  _free($17);
 }
 STACKTOP = sp;return;
}
function _deallocateRuleNames($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 1024|0);
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  HEAP32[$13>>2] = $12;
  $14 = $3;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   continue;
  }
  $16 = $3;
  _free($16);
 }
 STACKTOP = sp;return;
}
function _lou_version() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[165]|0;
 return ($0|0);
}
function _lou_charSize() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _lou_compileString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $3;
 _getTable($7,$8,$5,$6);
 $9 = HEAP32[$5>>2]|0;
 $10 = ($9|0)!=(0|0);
 do {
  if ($10) {
   $11 = $4;
   $12 = (_compileString($11,$5,$6)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  } else {
   $2 = 0;
  }
 } while(0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _compileString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4160|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $3 = 0;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 _memset(($8|0),0,4132)|0;
 $11 = $4;
 HEAP32[$8>>2] = $11;
 $12 = ((($8)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($8)) + 8|0);
 HEAP32[$13>>2] = 1;
 $14 = ((($8)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($8)) + 24|0);
 HEAP32[$15>>2] = 0;
 $7 = 0;
 while(1) {
  $16 = $7;
  $17 = $4;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  $21 = $7;
  if (!($20)) {
   break;
  }
  $22 = $4;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = $7;
  $27 = ((($8)) + 36|0);
  $28 = (($27) + ($26<<1)|0);
  HEAP16[$28>>1] = $25;
  $29 = $7;
  $30 = (($29) + 1)|0;
  $7 = $30;
 }
 $31 = ((($8)) + 36|0);
 $32 = (($31) + ($21<<1)|0);
 HEAP16[$32>>1] = 0;
 $33 = $7;
 $34 = ((($8)) + 20|0);
 HEAP32[$34>>2] = $33;
 $35 = $5;
 $36 = $6;
 $37 = (_compileRule($8,0,0,$35,$36)|0);
 $3 = $37;
 $38 = $3;
 STACKTOP = sp;return ($38|0);
}
function __lou_compileTranslationRule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _getTable($5,0,$4,0);
 $6 = $3;
 $7 = (_compileString($6,$4,0)|0);
 STACKTOP = sp;return ($7|0);
}
function __lou_compileDisplayRule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _getTable(0,$5,0,$4);
 $6 = $3;
 $7 = (_compileString($6,0,$4)|0);
 STACKTOP = sp;return ($7|0);
}
function _compileError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  __lou_logMessage(40000,1651,$vararg_buffer);
  $14 = HEAP32[2640]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2640] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  __lou_logMessage(40000,1668,$vararg_buffer3);
  $14 = HEAP32[2640]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2640] = $15;
  STACKTOP = sp;return;
 }
}
function _compileWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  __lou_logMessage(30000,3074,$vararg_buffer);
  $14 = HEAP32[3694]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3694] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  __lou_logMessage(30000,3093,$vararg_buffer3);
  $14 = HEAP32[3694]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3694] = $15;
  STACKTOP = sp;return;
 }
}
function _hexValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $7 = 0;
 L1: while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 14;
   break;
  }
  $9 = 0;
  $13 = $7;
  $14 = $5;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($17|0)>=(48);
  if ($18) {
   $19 = $7;
   $20 = $5;
   $21 = (($20) + ($19<<1)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = ($23|0)<=(57);
   if ($24) {
    $25 = $7;
    $26 = $5;
    $27 = (($26) + ($25<<1)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = (($29) - 48)|0;
    $9 = $30;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $31 = $7;
    $32 = $5;
    $33 = (($32) + ($31<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $36 = ($35|0)>=(97);
    if ($36) {
     $37 = $7;
     $38 = $5;
     $39 = (($38) + ($37<<1)|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $42 = ($41|0)<=(102);
     if ($42) {
      $43 = $7;
      $44 = $5;
      $45 = (($44) + ($43<<1)|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = (($47) - 97)|0;
      $49 = (($48) + 10)|0;
      $9 = $49;
      break;
     }
    }
    $50 = $7;
    $51 = $5;
    $52 = (($51) + ($50<<1)|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53&65535;
    $55 = ($54|0)>=(65);
    if (!($55)) {
     label = 12;
     break L1;
    }
    $56 = $7;
    $57 = $5;
    $58 = (($57) + ($56<<1)|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = ($60|0)<=(70);
    if (!($61)) {
     label = 12;
     break L1;
    }
    $62 = $7;
    $63 = $5;
    $64 = (($63) + ($62<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = (($66) - 65)|0;
    $68 = (($67) + 10)|0;
    $9 = $68;
   }
  } while(0);
  $71 = $9;
  $72 = $6;
  $73 = (($72) - 1)|0;
  $74 = $7;
  $75 = (($73) - ($74))|0;
  $76 = $75<<2;
  $77 = $71 << $76;
  $78 = $8;
  $79 = $78 | $77;
  $8 = $79;
  $80 = $7;
  $81 = (($80) + 1)|0;
  $7 = $81;
 }
 if ((label|0) == 12) {
  $69 = $4;
  $70 = $6;
  HEAP32[$vararg_buffer>>2] = $70;
  _compileError($69,3105,$vararg_buffer);
  $3 = -1;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 14) {
  $82 = $8;
  $83 = $82&65535;
  $3 = $83;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function _allocateTranslationTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 42192;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $2 = 1;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 $6 = 21104;
 $10 = (_malloc(42192)|0);
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)!=(0|0);
 if (!($12)) {
  $13 = $3;
  _compileError($13,3332,$vararg_buffer);
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   _free($18);
  }
  $19 = $4;
  HEAP32[$19>>2] = 0;
  __lou_outOfMemory();
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 _memset(($21|0),0,42192)|0;
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 28|0);
 HEAP32[$24>>2] = 42192;
 $25 = $6;
 $26 = $4;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 32|0);
 HEAP32[$28>>2] = $25;
 $2 = 1;
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function _allocateDisplayTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 18000;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $2 = 1;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $6 = 9008;
 $10 = (_malloc(18000)|0);
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)!=(0|0);
 if (!($12)) {
  $13 = $3;
  _compileError($13,3332,$vararg_buffer);
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   _free($18);
  }
  $19 = $4;
  HEAP32[$19>>2] = 0;
  __lou_outOfMemory();
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 _memset(($21|0),0,18000)|0;
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$23>>2] = 18000;
 $24 = $6;
 $25 = $4;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 $2 = 1;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _compileFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4160|0);
 $vararg_buffer = sp;
 $7 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[3714]|0;
 $9 = (($8) + 1)|0;
 HEAP32[3714] = $9;
 $10 = $4;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($7)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($7)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$7>>2]|0;
 $15 = (_fopen($14,7337)|0);
 $16 = ((($7)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)!=(0|0);
 if (!($17)) {
  $24 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  __lou_logMessage(40000,7366,$vararg_buffer);
  $25 = HEAP32[2640]|0;
  $26 = (($25) + 1)|0;
  HEAP32[2640] = $26;
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $18 = (__lou_getALine($7)|0);
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = $6;
  (_compileRule($7,0,0,$20,$21)|0);
 }
 $22 = ((($7)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 (_fclose($23)|0);
 $3 = 1;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _setDefaults($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 616|0);
 $4 = ((($3)) + 36|0);
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $1;
  $9 = ((($8)) + 616|0);
  $10 = ((($9)) + 36|0);
  $11 = ((($10)) + 32|0);
  HEAP32[$11>>2] = 4;
 }
 $12 = $1;
 $13 = ((($12)) + 616|0);
 $14 = ((($13)) + 72|0);
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = $1;
  $19 = ((($18)) + 616|0);
  $20 = ((($19)) + 72|0);
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = 4;
 }
 $22 = $1;
 $23 = ((($22)) + 616|0);
 $24 = ((($23)) + 108|0);
 $25 = ((($24)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $28 = $1;
  $29 = ((($28)) + 616|0);
  $30 = ((($29)) + 108|0);
  $31 = ((($30)) + 32|0);
  HEAP32[$31>>2] = 4;
 }
 $32 = $1;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  STACKTOP = sp;return 1;
 }
 $36 = $1;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 1;
 STACKTOP = sp;return 1;
}
function _compileRule($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer106 = 0;
 var $vararg_buffer108 = 0, $vararg_buffer111 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer132 = 0, $vararg_buffer135 = 0, $vararg_buffer137 = 0, $vararg_buffer139 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer51 = 0;
 var $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, $vararg_ptr131 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 62064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(62064|0);
 $vararg_buffer139 = sp + 360|0;
 $vararg_buffer137 = sp + 352|0;
 $vararg_buffer135 = sp + 344|0;
 $vararg_buffer132 = sp + 336|0;
 $vararg_buffer128 = sp + 328|0;
 $vararg_buffer126 = sp + 320|0;
 $vararg_buffer124 = sp + 312|0;
 $vararg_buffer121 = sp + 304|0;
 $vararg_buffer118 = sp + 296|0;
 $vararg_buffer115 = sp + 288|0;
 $vararg_buffer113 = sp + 280|0;
 $vararg_buffer111 = sp + 272|0;
 $vararg_buffer108 = sp + 264|0;
 $vararg_buffer106 = sp + 256|0;
 $vararg_buffer104 = sp + 248|0;
 $vararg_buffer102 = sp + 240|0;
 $vararg_buffer100 = sp + 232|0;
 $vararg_buffer98 = sp + 224|0;
 $vararg_buffer96 = sp + 216|0;
 $vararg_buffer94 = sp + 208|0;
 $vararg_buffer92 = sp + 200|0;
 $vararg_buffer90 = sp + 192|0;
 $vararg_buffer87 = sp + 184|0;
 $vararg_buffer84 = sp + 176|0;
 $vararg_buffer81 = sp + 168|0;
 $vararg_buffer79 = sp + 160|0;
 $vararg_buffer77 = sp + 152|0;
 $vararg_buffer75 = sp + 144|0;
 $vararg_buffer73 = sp + 136|0;
 $vararg_buffer71 = sp + 128|0;
 $vararg_buffer68 = sp + 120|0;
 $vararg_buffer66 = sp + 112|0;
 $vararg_buffer63 = sp + 104|0;
 $vararg_buffer60 = sp + 96|0;
 $vararg_buffer57 = sp + 88|0;
 $vararg_buffer54 = sp + 80|0;
 $vararg_buffer51 = sp + 72|0;
 $vararg_buffer49 = sp + 64|0;
 $vararg_buffer47 = sp + 56|0;
 $vararg_buffer45 = sp + 48|0;
 $vararg_buffer43 = sp + 40|0;
 $vararg_buffer41 = sp + 32|0;
 $vararg_buffer38 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $11 = sp + 564|0;
 $13 = sp + 57964|0;
 $15 = sp + 53866|0;
 $16 = sp + 49768|0;
 $17 = sp + 45670|0;
 $18 = sp + 41572|0;
 $19 = sp + 37474|0;
 $20 = sp + 8|0;
 $21 = sp;
 $29 = sp + 33376|0;
 $30 = sp + 524|0;
 $31 = sp + 520|0;
 $32 = sp + 516|0;
 $33 = sp + 29278|0;
 $34 = sp + 25180|0;
 $35 = sp + 512|0;
 $39 = sp + 496|0;
 $40 = sp + 492|0;
 $41 = sp + 21082|0;
 $42 = sp + 16984|0;
 $43 = sp + 488|0;
 $47 = sp + 472|0;
 $48 = sp + 468|0;
 $49 = sp + 464|0;
 $50 = sp + 460|0;
 $51 = sp + 456|0;
 $52 = sp + 452|0;
 $53 = sp + 448|0;
 $55 = sp + 440|0;
 $57 = sp + 432|0;
 $58 = sp + 428|0;
 $59 = sp + 424|0;
 $60 = sp + 420|0;
 $61 = sp + 416|0;
 $62 = sp + 412|0;
 $63 = sp + 12886|0;
 $66 = sp + 8788|0;
 $67 = sp + 4690|0;
 $69 = sp + 396|0;
 $70 = sp + 392|0;
 $72 = sp + 592|0;
 $78 = sp + 364|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$11>>2] = 0;
 $12 = 1;
 $79 = $20;
 $80 = $79;
 HEAP32[$80>>2] = 0;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = 0;
 $83 = $21;
 $84 = $83;
 HEAP32[$84>>2] = 0;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = 0;
 $22 = 0;
 $23 = 0;
 $28 = 0;
 $27 = 0;
 $26 = 0;
 L1: while(1) {
  $87 = $6;
  $88 = (_getToken($87,$13,0,$11)|0);
  $89 = ($88|0)!=(0);
  if (!($89)) {
   label = 3;
   break;
  }
  $90 = ((($13)) + 2|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91&65535;
  $93 = ($92|0)==(35);
  if ($93) {
   label = 6;
   break;
  }
  $94 = ((($13)) + 2|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95&65535;
  $97 = ($96|0)==(60);
  if ($97) {
   label = 6;
   break;
  }
  $98 = $6;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(1);
  if ($101) {
   $102 = ((($13)) + 2|0);
   $103 = (_eqasc2uni(3350,$102,3)|0);
   $104 = ($103|0)!=(0);
   if ($104) {
    label = 10;
    break;
   }
   $105 = ((($13)) + 2|0);
   $106 = (_eqasc2uni(3354,$105,5)|0);
   $107 = ($106|0)!=(0);
   if ($107) {
    label = 10;
    break;
   }
  }
  $115 = $6;
  $116 = (_getOpcode($115,$13)|0);
  $14 = $116;
  $117 = $14;
  switch ($117|0) {
  case 0:  {
   label = 15;
   break L1;
   break;
  }
  case 60:  {
   label = 25;
   break L1;
   break;
  }
  case 61:  {
   label = 26;
   break L1;
   break;
  }
  case 70:  {
   label = 27;
   break L1;
   break;
  }
  case 62:  {
   label = 28;
   break L1;
   break;
  }
  case 63:  {
   label = 29;
   break L1;
   break;
  }
  case 64:  {
   label = 30;
   break L1;
   break;
  }
  case 65:  {
   label = 31;
   break L1;
   break;
  }
  case 66:  {
   label = 32;
   break L1;
   break;
  }
  case 67:  {
   label = 33;
   break L1;
   break;
  }
  case 68:  {
   label = 34;
   break L1;
   break;
  }
  case 69:  {
   label = 35;
   break L1;
   break;
  }
  case 71:  {
   label = 36;
   break L1;
   break;
  }
  case 53:  {
   $129 = $27;
   $130 = ($129|0)!=(0);
   if ($130) {
    label = 20;
    break L1;
   }
   $26 = 1;
   continue L1;
   break;
  }
  case 54:  {
   $133 = $26;
   $134 = ($133|0)!=(0);
   if ($134) {
    label = 23;
    break L1;
   }
   $27 = 1;
   continue L1;
   break;
  }
  default: {
   $246 = $9;
   $247 = ($246|0)!=(0|0);
   if (!($247)) {
    break L1;
   }
   $248 = $14;
   switch ($248|0) {
   case 114:  {
    break L1;
    break;
   }
   case 1:  {
    label = 45;
    break L1;
    break;
   }
   case 2:  {
    label = 46;
    break L1;
    break;
   }
   case 111:  {
    label = 48;
    break L1;
    break;
   }
   case 112:  {
    label = 70;
    break L1;
    break;
   }
   case 8:  {
    label = 92;
    break L1;
    break;
   }
   case 9:  {
    label = 94;
    break L1;
    break;
   }
   case 6:  {
    label = 104;
    break L1;
    break;
   }
   case 7:  {
    label = 106;
    break L1;
    break;
   }
   case 3:  {
    label = 108;
    break L1;
    break;
   }
   case 4:  {
    label = 110;
    break L1;
    break;
   }
   case 5:  {
    label = 112;
    break L1;
    break;
   }
   case 10:  {
    label = 114;
    break L1;
    break;
   }
   case 24:  {
    label = 115;
    break L1;
    break;
   }
   case 32: case 31: case 30: case 29: case 28: case 27: case 26: case 25:  {
    label = 136;
    break L1;
    break;
   }
   case 11:  {
    label = 180;
    break L1;
    break;
   }
   case 12:  {
    label = 182;
    break L1;
    break;
   }
   case 13:  {
    label = 188;
    break L1;
    break;
   }
   case 14:  {
    label = 194;
    break L1;
    break;
   }
   case 15:  {
    label = 200;
    break L1;
    break;
   }
   case 113:  {
    label = 202;
    break L1;
    break;
   }
   case 16:  {
    label = 221;
    break L1;
    break;
   }
   case 17:  {
    label = 228;
    break L1;
    break;
   }
   case 18:  {
    label = 235;
    break L1;
    break;
   }
   case 46:  {
    label = 242;
    break L1;
    break;
   }
   case 19:  {
    label = 244;
    break L1;
    break;
   }
   case 20:  {
    label = 251;
    break L1;
    break;
   }
   case 21:  {
    label = 257;
    break L1;
    break;
   }
   case 22:  {
    label = 263;
    break L1;
    break;
   }
   case 23:  {
    label = 270;
    break L1;
    break;
   }
   case 33:  {
    label = 275;
    break L1;
    break;
   }
   case 34:  {
    label = 281;
    break L1;
    break;
   }
   case 35:  {
    label = 288;
    break L1;
    break;
   }
   case 45:  {
    label = 290;
    break L1;
    break;
   }
   case 85:  {
    label = 295;
    break L1;
    break;
   }
   case 79: case 78: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97: case 96: case 94: case 93: case 92: case 91: case 90: case 89: case 82:  {
    label = 296;
    break L1;
    break;
   }
   case 80:  {
    label = 311;
    break L1;
    break;
   }
   case 49: case 48:  {
    label = 335;
    break L1;
    break;
   }
   case 83:  {
    label = 346;
    break L1;
    break;
   }
   case 81:  {
    label = 357;
    break L1;
    break;
   }
   case 72:  {
    label = 361;
    break L1;
    break;
   }
   case 74:  {
    label = 377;
    break L1;
    break;
   }
   case 75:  {
    label = 378;
    break L1;
    break;
   }
   case 76:  {
    label = 380;
    break L1;
    break;
   }
   case 77:  {
    label = 382;
    break L1;
    break;
   }
   case 73:  {
    label = 384;
    break L1;
    break;
   }
   case 88: case 87: case 86: case 95:  {
    label = 388;
    break L1;
    break;
   }
   case 47:  {
    label = 397;
    break L1;
    break;
   }
   case 50:  {
    label = 407;
    break L1;
    break;
   }
   case 59: case 58: case 57:  {
    label = 431;
    break L1;
    break;
   }
   case 108: case 109:  {
    label = 433;
    break L1;
    break;
   }
   case 84:  {
    $1701 = $28;
    $1702 = ($1701|0)!=(0);
    if ($1702) {
     label = 293;
     break L1;
    }
    $28 = 1;
    continue L1;
    break;
   }
   case 51:  {
    $77 = $20;
    break;
   }
   case 52:  {
    $77 = $21;
    break;
   }
   case 55:  {
    $2370 = $21;
    $2371 = $2370;
    $2372 = HEAP32[$2371>>2]|0;
    $2373 = (($2370) + 4)|0;
    $2374 = $2373;
    $2375 = HEAP32[$2374>>2]|0;
    $2376 = $2372 | 536870912;
    $2377 = $21;
    $2378 = $2377;
    HEAP32[$2378>>2] = $2376;
    $2379 = (($2377) + 4)|0;
    $2380 = $2379;
    HEAP32[$2380>>2] = $2375;
    continue L1;
    break;
   }
   case 56:  {
    $2381 = $20;
    $2382 = $2381;
    $2383 = HEAP32[$2382>>2]|0;
    $2384 = (($2381) + 4)|0;
    $2385 = $2384;
    $2386 = HEAP32[$2385>>2]|0;
    $2387 = $2383 | 536870912;
    $2388 = $20;
    $2389 = $2388;
    HEAP32[$2389>>2] = $2387;
    $2390 = (($2388) + 4)|0;
    $2391 = $2390;
    HEAP32[$2391>>2] = $2386;
    continue L1;
    break;
   }
   default: {
    label = 440;
    break L1;
   }
   }
   $2335 = $9;
   $2336 = HEAP32[$2335>>2]|0;
   $2337 = ((($2336)) + 1012|0);
   $2338 = HEAP32[$2337>>2]|0;
   $2339 = ($2338|0)!=(0|0);
   if (!($2339)) {
    $2340 = $9;
    $2341 = HEAP32[$2340>>2]|0;
    $2342 = (_allocateCharacterClasses($2341)|0);
    $2343 = ($2342|0)!=(0);
    if (!($2343)) {
     $12 = 0;
    }
   }
   $2344 = $6;
   $2345 = $9;
   $2346 = HEAP32[$2345>>2]|0;
   $2347 = (_getCharacterClass($2344,$78,$2346,$11)|0);
   $2348 = ($2347|0)!=(0);
   if (!($2348)) {
    break L1;
   }
   $2349 = HEAP32[$78>>2]|0;
   $2350 = ((($2349)) + 8|0);
   $2351 = $2350;
   $2352 = $2351;
   $2353 = HEAP32[$2352>>2]|0;
   $2354 = (($2351) + 4)|0;
   $2355 = $2354;
   $2356 = HEAP32[$2355>>2]|0;
   $2357 = $77;
   $2358 = $2357;
   $2359 = $2358;
   $2360 = HEAP32[$2359>>2]|0;
   $2361 = (($2358) + 4)|0;
   $2362 = $2361;
   $2363 = HEAP32[$2362>>2]|0;
   $2364 = $2360 | $2353;
   $2365 = $2363 | $2356;
   $2366 = $2357;
   $2367 = $2366;
   HEAP32[$2367>>2] = $2364;
   $2368 = (($2366) + 4)|0;
   $2369 = $2368;
   HEAP32[$2369>>2] = $2365;
   continue L1;
  }
  }
 }
 L30:  switch (label|0) {
  case 3: {
   $5 = 1;
   $2440 = $5;
   STACKTOP = sp;return ($2440|0);
   break;
  }
  case 6: {
   $5 = 1;
   $2440 = $5;
   STACKTOP = sp;return ($2440|0);
   break;
  }
  case 10: {
   $108 = $9;
   $109 = ($108|0)!=(0|0);
   if ($109) {
    $110 = $6;
    $111 = $9;
    (_compileHyphenation($110,$13,$11,$111)|0);
   } else {
    while(1) {
     $112 = $6;
     $113 = (__lou_getALine($112)|0);
     $114 = ($113|0)!=(0);
     if (!($114)) {
      break;
     }
    }
   }
   $5 = 1;
   $2440 = $5;
   STACKTOP = sp;return ($2440|0);
   break;
  }
  case 15: {
   $118 = $6;
   $119 = (_getToken($118,$13,3360,$11)|0);
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $6;
    $122 = (_parseChars($121,$29,$13)|0);
    $123 = ($122|0)!=(0);
    if ($123) {
     $124 = $6;
     $125 = $9;
     $126 = $10;
     $127 = (_includeFile($124,$29,$125,$126)|0);
     $128 = ($127|0)!=(0);
     if (!($128)) {
      $12 = 0;
     }
    }
   }
   break;
  }
  case 20: {
   $131 = $6;
   $132 = (__lou_findOpcodeName(54)|0);
   HEAP32[$vararg_buffer>>2] = $132;
   _compileError($131,3378,$vararg_buffer);
   $12 = 0;
   break;
  }
  case 23: {
   $135 = $6;
   $136 = (__lou_findOpcodeName(53)|0);
   HEAP32[$vararg_buffer38>>2] = $136;
   _compileError($135,3378,$vararg_buffer38);
   $12 = 0;
   break;
  }
  case 25: {
   $137 = $6;
   $138 = $14;
   $139 = $7;
   $140 = $8;
   $141 = $26;
   $142 = $27;
   $143 = $9;
   $144 = $10;
   (_compileCharDef($137,$138,1,0,$11,$139,$140,$141,$142,$143,$144)|0);
   break;
  }
  case 26: {
   $145 = $6;
   $146 = $14;
   $147 = $7;
   $148 = $8;
   $149 = $26;
   $150 = $27;
   $151 = $9;
   $152 = $10;
   (_compileCharDef($145,$146,4,0,$11,$147,$148,$149,$150,$151,$152)|0);
   break;
  }
  case 27: {
   $153 = $6;
   $154 = $14;
   $155 = $7;
   $156 = $8;
   $157 = $26;
   $158 = $27;
   $159 = $9;
   $160 = $10;
   (_compileCharDef($153,$154,256,0,$11,$155,$156,$157,$158,$159,$160)|0);
   break;
  }
  case 28: {
   $161 = $6;
   $162 = $14;
   $163 = $7;
   $164 = $8;
   $165 = $26;
   $166 = $27;
   $167 = $9;
   $168 = $10;
   (_compileCharDef($161,$162,8,0,$11,$163,$164,$165,$166,$167,$168)|0);
   break;
  }
  case 29: {
   $169 = $6;
   $170 = $14;
   $171 = $7;
   $172 = $8;
   $173 = $26;
   $174 = $27;
   $175 = $9;
   $176 = $10;
   (_compileCharDef($169,$170,64,0,$11,$171,$172,$173,$174,$175,$176)|0);
   break;
  }
  case 30: {
   $177 = $6;
   $178 = $14;
   $179 = $7;
   $180 = $8;
   $181 = $26;
   $182 = $27;
   $183 = $9;
   $184 = $10;
   (_compileCharDef($177,$178,128,0,$11,$179,$180,$181,$182,$183,$184)|0);
   break;
  }
  case 31: {
   $185 = $6;
   $186 = $14;
   $187 = $7;
   $188 = $8;
   $189 = $26;
   $190 = $27;
   $191 = $9;
   $192 = $10;
   (_compileCharDef($185,$186,2,0,$11,$187,$188,$189,$190,$191,$192)|0);
   break;
  }
  case 32: {
   $193 = $6;
   $194 = $14;
   $195 = $7;
   $196 = $8;
   $197 = $26;
   $198 = $27;
   $199 = $9;
   $200 = $10;
   (_compileCharDef($193,$194,16,0,$11,$195,$196,$197,$198,$199,$200)|0);
   break;
  }
  case 33: {
   $201 = $6;
   $202 = $14;
   $203 = $7;
   $204 = $8;
   $205 = $26;
   $206 = $27;
   $207 = $9;
   $208 = $10;
   (_compileCharDef($201,$202,32,0,$11,$203,$204,$205,$206,$207,$208)|0);
   break;
  }
  case 34: {
   $209 = $6;
   $210 = $7;
   $211 = $8;
   $212 = $26;
   $213 = $27;
   $214 = $9;
   $215 = $10;
   $216 = (_compileGrouping($209,$11,$210,$211,$212,$213,$214,$215)|0);
   $12 = $216;
   break;
  }
  case 35: {
   $217 = $6;
   $218 = $7;
   $219 = $8;
   $220 = $26;
   $221 = $27;
   $222 = $9;
   $223 = $10;
   $224 = (_compileUplow($217,$11,$218,$219,$220,$221,$222,$223)|0);
   $12 = $224;
   break;
  }
  case 36: {
   $225 = $10;
   $226 = ($225|0)!=(0|0);
   if ($226) {
    $227 = $6;
    $228 = (_getRuleCharsText($227,$15,$11)|0);
    $229 = ($228|0)!=(0);
    if ($229) {
     $230 = $6;
     $231 = (_getRuleDotsPattern($230,$16,$11)|0);
     $232 = ($231|0)!=(0);
     if ($232) {
      $233 = HEAP16[$15>>1]|0;
      $234 = $233&65535;
      $235 = ($234|0)!=(1);
      if ($235) {
       label = 41;
      } else {
       $236 = HEAP16[$16>>1]|0;
       $237 = $236&65535;
       $238 = ($237|0)!=(1);
       if ($238) {
        label = 41;
       }
      }
      if ((label|0) == 41) {
       $239 = $6;
       _compileError($239,3400,$vararg_buffer41);
       $12 = 0;
      }
      $240 = $6;
      $241 = ((($15)) + 2|0);
      $242 = HEAP16[$241>>1]|0;
      $243 = ((($16)) + 2|0);
      $244 = HEAP16[$243>>1]|0;
      $245 = $10;
      (_putCharAndDots($240,$242,$244,$245)|0);
     }
    }
   }
   break;
  }
  case 45: {
   $249 = $6;
   _compileWarning($249,3449,$vararg_buffer43);
   break;
  }
  case 46: {
   $250 = $9;
   $251 = HEAP32[$250>>2]|0;
   $252 = ((($251)) + 36|0);
   $253 = HEAP32[$252>>2]|0;
   HEAP32[$30>>2] = $253;
   $254 = $6;
   $255 = $8;
   $256 = $26;
   $257 = $27;
   $258 = $9;
   $259 = (_compileBrailleIndicator($254,3521,2,$11,$30,$255,$256,$257,$258)|0);
   $12 = $259;
   $260 = HEAP32[$30>>2]|0;
   $261 = $9;
   $262 = HEAP32[$261>>2]|0;
   $263 = ((($262)) + 36|0);
   HEAP32[$263>>2] = $260;
   $264 = $12;
   $265 = ($264|0)!=(0);
   $266 = $7;
   $267 = ($266|0)!=(0|0);
   $or$cond = $265 & $267;
   if ($or$cond) {
    $268 = HEAP32[$30>>2]|0;
    $269 = $7;
    HEAP32[$269>>2] = $268;
   }
   break;
  }
  case 48: {
   $38 = 55440;
   $270 = $38;
   $271 = (_malloc($270)|0);
   $23 = $271;
   $272 = $23;
   $273 = ($272|0)!=(0|0);
   if (!($273)) {
    __lou_outOfMemory();
   }
   $274 = $23;
   $275 = $38;
   _memset(($274|0),-1,($275|0))|0;
   $26 = 1;
   $276 = $6;
   (_getCharacters($276,$33,$11)|0);
   $277 = $6;
   (_getRuleCharsText($277,$15,$11)|0);
   $278 = $6;
   (_getCharacters($278,$34,$11)|0);
   $279 = $6;
   (_getRuleDotsPattern($279,$16,$11)|0);
   $280 = $6;
   $281 = $14;
   $282 = $20;
   $283 = $282;
   $284 = HEAP32[$283>>2]|0;
   $285 = (($282) + 4)|0;
   $286 = $285;
   $287 = HEAP32[$286>>2]|0;
   $288 = $21;
   $289 = $288;
   $290 = HEAP32[$289>>2]|0;
   $291 = (($288) + 4)|0;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = $26;
   $295 = $27;
   $296 = $9;
   $297 = (_addRule($280,$281,$15,$16,$284,$287,$290,$293,$32,$31,$294,$295,$296)|0);
   $298 = ($297|0)!=(0);
   if (!($298)) {
    $12 = 0;
    break;
   }
   $299 = ((($33)) + 2|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $300&65535;
   $302 = ($301|0)==(45);
   if ($302) {
    $303 = HEAP16[$33>>1]|0;
    $304 = $303&65535;
    $305 = ($304|0)==(1);
    if ($305) {
     $306 = ((($33)) + 2|0);
     $307 = $23;
     $308 = ((($307)) + 2|0);
     $309 = $9;
     $310 = HEAP32[$309>>2]|0;
     $311 = (__lou_pattern_compile($306,0,$308,13841,$310)|0);
     $36 = $311;
    } else {
     label = 55;
    }
   } else {
    label = 55;
   }
   if ((label|0) == 55) {
    $312 = ((($33)) + 2|0);
    $313 = HEAP16[$33>>1]|0;
    $314 = $313&65535;
    $315 = $23;
    $316 = ((($315)) + 2|0);
    $317 = $9;
    $318 = HEAP32[$317>>2]|0;
    $319 = (__lou_pattern_compile($312,$314,$316,13841,$318)|0);
    $36 = $319;
   }
   $320 = $36;
   $321 = ($320|0)!=(0);
   if (!($321)) {
    $12 = 0;
    break;
   }
   $322 = $36;
   $323 = (($322) + 1)|0;
   $324 = $323&65535;
   $325 = $23;
   HEAP16[$325>>1] = $324;
   $326 = $324&65535;
   $37 = $326;
   $327 = $23;
   $328 = ((($327)) + 2|0);
   __lou_pattern_reverse($328);
   $329 = ((($34)) + 2|0);
   $330 = HEAP16[$329>>1]|0;
   $331 = $330&65535;
   $332 = ($331|0)==(45);
   if ($332) {
    $333 = HEAP16[$34>>1]|0;
    $334 = $333&65535;
    $335 = ($334|0)==(1);
    if ($335) {
     $336 = ((($34)) + 2|0);
     $337 = $37;
     $338 = $23;
     $339 = (($338) + ($337<<1)|0);
     $340 = $9;
     $341 = HEAP32[$340>>2]|0;
     $342 = (__lou_pattern_compile($336,0,$339,13841,$341)|0);
     $36 = $342;
    } else {
     label = 61;
    }
   } else {
    label = 61;
   }
   if ((label|0) == 61) {
    $343 = ((($34)) + 2|0);
    $344 = HEAP16[$34>>1]|0;
    $345 = $344&65535;
    $346 = $37;
    $347 = $23;
    $348 = (($347) + ($346<<1)|0);
    $349 = $9;
    $350 = HEAP32[$349>>2]|0;
    $351 = (__lou_pattern_compile($343,$345,$348,13841,$350)|0);
    $36 = $351;
   }
   $352 = $36;
   $353 = ($352|0)!=(0);
   if (!($353)) {
    $12 = 0;
    break;
   }
   $354 = $37;
   $355 = $36;
   $356 = (($355) + ($354))|0;
   $36 = $356;
   $357 = $6;
   $358 = $36;
   $359 = $358<<1;
   $360 = $9;
   $361 = (_allocateSpaceInTranslationTable($357,$35,$359,$360)|0);
   $362 = ($361|0)!=(0);
   if (!($362)) {
    $12 = 0;
    break;
   }
   $363 = HEAP32[$32>>2]|0;
   $364 = $9;
   $365 = HEAP32[$364>>2]|0;
   $366 = ((($365)) + 21088|0);
   $367 = (($366) + ($363<<3)|0);
   HEAP32[$31>>2] = $367;
   $368 = HEAP32[$35>>2]|0;
   $369 = $9;
   $370 = HEAP32[$369>>2]|0;
   $371 = ((($370)) + 21088|0);
   $372 = (($371) + ($368<<3)|0);
   $373 = $23;
   $374 = $36;
   $375 = $374<<1;
   _memcpy(($372|0),($373|0),($375|0))|0;
   $376 = HEAP32[$35>>2]|0;
   $377 = HEAP32[$31>>2]|0;
   $378 = ((($377)) + 24|0);
   HEAP32[$378>>2] = $376;
   $379 = $8;
   $380 = ($379|0)!=(0|0);
   if ($380) {
    $381 = HEAP32[$31>>2]|0;
    $382 = $8;
    HEAP32[$382>>2] = $381;
   }
   $383 = $7;
   $384 = ($383|0)!=(0|0);
   if ($384) {
    $385 = HEAP32[$32>>2]|0;
    $386 = $7;
    HEAP32[$386>>2] = $385;
   }
   break;
  }
  case 70: {
   $46 = 55440;
   $387 = $46;
   $388 = (_malloc($387)|0);
   $23 = $388;
   $389 = $23;
   $390 = ($389|0)!=(0|0);
   if (!($390)) {
    __lou_outOfMemory();
   }
   $391 = $23;
   $392 = $46;
   _memset(($391|0),-1,($392|0))|0;
   $27 = 1;
   $393 = $6;
   (_getCharacters($393,$41,$11)|0);
   $394 = $6;
   (_getRuleCharsText($394,$15,$11)|0);
   $395 = $6;
   (_getCharacters($395,$42,$11)|0);
   $396 = $6;
   (_getRuleDotsPattern($396,$16,$11)|0);
   $397 = $6;
   $398 = $14;
   $399 = $26;
   $400 = $27;
   $401 = $9;
   $402 = (_addRule($397,$398,$15,$16,0,0,0,0,$40,$39,$399,$400,$401)|0);
   $403 = ($402|0)!=(0);
   if (!($403)) {
    $12 = 0;
    break;
   }
   $404 = ((($41)) + 2|0);
   $405 = HEAP16[$404>>1]|0;
   $406 = $405&65535;
   $407 = ($406|0)==(45);
   if ($407) {
    $408 = HEAP16[$41>>1]|0;
    $409 = $408&65535;
    $410 = ($409|0)==(1);
    if ($410) {
     $411 = ((($41)) + 2|0);
     $412 = $23;
     $413 = ((($412)) + 2|0);
     $414 = $9;
     $415 = HEAP32[$414>>2]|0;
     $416 = (__lou_pattern_compile($411,0,$413,13841,$415)|0);
     $44 = $416;
    } else {
     label = 77;
    }
   } else {
    label = 77;
   }
   if ((label|0) == 77) {
    $417 = ((($41)) + 2|0);
    $418 = HEAP16[$41>>1]|0;
    $419 = $418&65535;
    $420 = $23;
    $421 = ((($420)) + 2|0);
    $422 = $9;
    $423 = HEAP32[$422>>2]|0;
    $424 = (__lou_pattern_compile($417,$419,$421,13841,$423)|0);
    $44 = $424;
   }
   $425 = $44;
   $426 = ($425|0)!=(0);
   if (!($426)) {
    $12 = 0;
    break;
   }
   $427 = $44;
   $428 = (($427) + 1)|0;
   $429 = $428&65535;
   $430 = $23;
   HEAP16[$430>>1] = $429;
   $431 = $429&65535;
   $45 = $431;
   $432 = $23;
   $433 = ((($432)) + 2|0);
   __lou_pattern_reverse($433);
   $434 = ((($42)) + 2|0);
   $435 = HEAP16[$434>>1]|0;
   $436 = $435&65535;
   $437 = ($436|0)==(45);
   if ($437) {
    $438 = HEAP16[$42>>1]|0;
    $439 = $438&65535;
    $440 = ($439|0)==(1);
    if ($440) {
     $441 = ((($42)) + 2|0);
     $442 = $45;
     $443 = $23;
     $444 = (($443) + ($442<<1)|0);
     $445 = $9;
     $446 = HEAP32[$445>>2]|0;
     $447 = (__lou_pattern_compile($441,0,$444,13841,$446)|0);
     $44 = $447;
    } else {
     label = 83;
    }
   } else {
    label = 83;
   }
   if ((label|0) == 83) {
    $448 = ((($42)) + 2|0);
    $449 = HEAP16[$42>>1]|0;
    $450 = $449&65535;
    $451 = $45;
    $452 = $23;
    $453 = (($452) + ($451<<1)|0);
    $454 = $9;
    $455 = HEAP32[$454>>2]|0;
    $456 = (__lou_pattern_compile($448,$450,$453,13841,$455)|0);
    $44 = $456;
   }
   $457 = $44;
   $458 = ($457|0)!=(0);
   if (!($458)) {
    $12 = 0;
    break;
   }
   $459 = $45;
   $460 = $44;
   $461 = (($460) + ($459))|0;
   $44 = $461;
   $462 = $6;
   $463 = $44;
   $464 = $463<<1;
   $465 = $9;
   $466 = (_allocateSpaceInTranslationTable($462,$43,$464,$465)|0);
   $467 = ($466|0)!=(0);
   if (!($467)) {
    $12 = 0;
    break;
   }
   $468 = HEAP32[$40>>2]|0;
   $469 = $9;
   $470 = HEAP32[$469>>2]|0;
   $471 = ((($470)) + 21088|0);
   $472 = (($471) + ($468<<3)|0);
   HEAP32[$39>>2] = $472;
   $473 = HEAP32[$43>>2]|0;
   $474 = $9;
   $475 = HEAP32[$474>>2]|0;
   $476 = ((($475)) + 21088|0);
   $477 = (($476) + ($473<<3)|0);
   $478 = $23;
   $479 = $44;
   $480 = $479<<1;
   _memcpy(($477|0),($478|0),($480|0))|0;
   $481 = HEAP32[$43>>2]|0;
   $482 = HEAP32[$39>>2]|0;
   $483 = ((($482)) + 24|0);
   HEAP32[$483>>2] = $481;
   $484 = $8;
   $485 = ($484|0)!=(0|0);
   if ($485) {
    $486 = HEAP32[$39>>2]|0;
    $487 = $8;
    HEAP32[$487>>2] = $486;
   }
   $488 = $7;
   $489 = ($488|0)!=(0|0);
   if ($489) {
    $490 = HEAP32[$40>>2]|0;
    $491 = $7;
    HEAP32[$491>>2] = $490;
   }
   break;
  }
  case 92: {
   $492 = $9;
   $493 = HEAP32[$492>>2]|0;
   $494 = ((($493)) + 616|0);
   $495 = HEAP32[$494>>2]|0;
   HEAP32[$47>>2] = $495;
   $496 = $6;
   $497 = $8;
   $498 = $26;
   $499 = $27;
   $500 = $9;
   $501 = (_compileBrailleIndicator($496,3548,123,$11,$47,$497,$498,$499,$500)|0);
   $12 = $501;
   $502 = HEAP32[$47>>2]|0;
   $503 = $9;
   $504 = HEAP32[$503>>2]|0;
   $505 = ((($504)) + 616|0);
   HEAP32[$505>>2] = $502;
   $506 = $12;
   $507 = ($506|0)!=(0);
   $508 = $7;
   $509 = ($508|0)!=(0|0);
   $or$cond3 = $507 & $509;
   if ($or$cond3) {
    $510 = HEAP32[$47>>2]|0;
    $511 = $7;
    HEAP32[$511>>2] = $510;
   }
   break;
  }
  case 94: {
   $512 = $6;
   $513 = (_compileBeforeAfter($512,$11)|0);
   switch ($513|0) {
   case 1:  {
    $514 = $9;
    $515 = HEAP32[$514>>2]|0;
    $516 = ((($515)) + 616|0);
    $517 = ((($516)) + 8|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = ($518|0)!=(0);
    if ($519) {
     $520 = $6;
     _compileError($520,3572,$vararg_buffer45);
     $12 = 0;
     break L30;
    }
    $521 = $9;
    $522 = HEAP32[$521>>2]|0;
    $523 = ((($522)) + 616|0);
    $524 = ((($523)) + 4|0);
    $525 = HEAP32[$524>>2]|0;
    HEAP32[$48>>2] = $525;
    $526 = $6;
    $527 = $8;
    $528 = $26;
    $529 = $27;
    $530 = $9;
    $531 = (_compileBrailleIndicator($526,3618,124,$11,$48,$527,$528,$529,$530)|0);
    $12 = $531;
    $532 = HEAP32[$48>>2]|0;
    $533 = $9;
    $534 = HEAP32[$533>>2]|0;
    $535 = ((($534)) + 616|0);
    $536 = ((($535)) + 4|0);
    HEAP32[$536>>2] = $532;
    $537 = $12;
    $538 = ($537|0)!=(0);
    $539 = $7;
    $540 = ($539|0)!=(0|0);
    $or$cond5 = $538 & $540;
    if (!($or$cond5)) {
     break L30;
    }
    $541 = HEAP32[$48>>2]|0;
    $542 = $7;
    HEAP32[$542>>2] = $541;
    break L30;
    break;
   }
   case 2:  {
    $543 = $9;
    $544 = HEAP32[$543>>2]|0;
    $545 = ((($544)) + 616|0);
    $546 = ((($545)) + 4|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = ($547|0)!=(0);
    if ($548) {
     $549 = $6;
     _compileError($549,3648,$vararg_buffer47);
     $12 = 0;
     break L30;
    }
    $550 = $9;
    $551 = HEAP32[$550>>2]|0;
    $552 = ((($551)) + 616|0);
    $553 = ((($552)) + 8|0);
    $554 = HEAP32[$553>>2]|0;
    HEAP32[$48>>2] = $554;
    $555 = $6;
    $556 = $8;
    $557 = $26;
    $558 = $27;
    $559 = $9;
    $560 = (_compileBrailleIndicator($555,3695,125,$11,$48,$556,$557,$558,$559)|0);
    $12 = $560;
    $561 = HEAP32[$48>>2]|0;
    $562 = $9;
    $563 = HEAP32[$562>>2]|0;
    $564 = ((($563)) + 616|0);
    $565 = ((($564)) + 8|0);
    HEAP32[$565>>2] = $561;
    $566 = $12;
    $567 = ($566|0)!=(0);
    $568 = $7;
    $569 = ($568|0)!=(0|0);
    $or$cond7 = $567 & $569;
    if (!($or$cond7)) {
     break L30;
    }
    $570 = HEAP32[$48>>2]|0;
    $571 = $7;
    HEAP32[$571>>2] = $570;
    break L30;
    break;
   }
   default: {
    $572 = $6;
    _compileError($572,3724,$vararg_buffer49);
    $12 = 0;
    break L30;
   }
   }
   break;
  }
  case 104: {
   $573 = $9;
   $574 = HEAP32[$573>>2]|0;
   $575 = ((($574)) + 616|0);
   $576 = ((($575)) + 12|0);
   $577 = HEAP32[$576>>2]|0;
   HEAP32[$49>>2] = $577;
   $578 = $6;
   $579 = $8;
   $580 = $26;
   $581 = $27;
   $582 = $9;
   $583 = (_compileBrailleIndicator($578,3761,121,$11,$49,$579,$580,$581,$582)|0);
   $12 = $583;
   $584 = HEAP32[$49>>2]|0;
   $585 = $9;
   $586 = HEAP32[$585>>2]|0;
   $587 = ((($586)) + 616|0);
   $588 = ((($587)) + 12|0);
   HEAP32[$588>>2] = $584;
   $589 = $12;
   $590 = ($589|0)!=(0);
   $591 = $7;
   $592 = ($591|0)!=(0|0);
   $or$cond9 = $590 & $592;
   if ($or$cond9) {
    $593 = HEAP32[$49>>2]|0;
    $594 = $7;
    HEAP32[$594>>2] = $593;
   }
   break;
  }
  case 106: {
   $595 = $9;
   $596 = HEAP32[$595>>2]|0;
   $597 = ((($596)) + 616|0);
   $598 = ((($597)) + 16|0);
   $599 = HEAP32[$598>>2]|0;
   HEAP32[$50>>2] = $599;
   $600 = $6;
   $601 = $8;
   $602 = $26;
   $603 = $27;
   $604 = $9;
   $605 = (_compileBrailleIndicator($600,3787,122,$11,$50,$601,$602,$603,$604)|0);
   $12 = $605;
   $606 = HEAP32[$50>>2]|0;
   $607 = $9;
   $608 = HEAP32[$607>>2]|0;
   $609 = ((($608)) + 616|0);
   $610 = ((($609)) + 16|0);
   HEAP32[$610>>2] = $606;
   $611 = $12;
   $612 = ($611|0)!=(0);
   $613 = $7;
   $614 = ($613|0)!=(0|0);
   $or$cond11 = $612 & $614;
   if ($or$cond11) {
    $615 = HEAP32[$50>>2]|0;
    $616 = $7;
    HEAP32[$616>>2] = $615;
   }
   break;
  }
  case 108: {
   $617 = $9;
   $618 = HEAP32[$617>>2]|0;
   $619 = ((($618)) + 616|0);
   $620 = ((($619)) + 20|0);
   $621 = HEAP32[$620>>2]|0;
   HEAP32[$51>>2] = $621;
   $622 = $6;
   $623 = $8;
   $624 = $26;
   $625 = $27;
   $626 = $9;
   $627 = (_compileBrailleIndicator($622,3812,118,$11,$51,$623,$624,$625,$626)|0);
   $12 = $627;
   $628 = HEAP32[$51>>2]|0;
   $629 = $9;
   $630 = HEAP32[$629>>2]|0;
   $631 = ((($630)) + 616|0);
   $632 = ((($631)) + 20|0);
   HEAP32[$632>>2] = $628;
   $633 = $12;
   $634 = ($633|0)!=(0);
   $635 = $7;
   $636 = ($635|0)!=(0|0);
   $or$cond13 = $634 & $636;
   if ($or$cond13) {
    $637 = HEAP32[$51>>2]|0;
    $638 = $7;
    HEAP32[$638>>2] = $637;
   }
   break;
  }
  case 110: {
   $639 = $9;
   $640 = HEAP32[$639>>2]|0;
   $641 = ((($640)) + 616|0);
   $642 = ((($641)) + 24|0);
   $643 = HEAP32[$642>>2]|0;
   HEAP32[$52>>2] = $643;
   $644 = $6;
   $645 = $8;
   $646 = $26;
   $647 = $27;
   $648 = $9;
   $649 = (_compileBrailleIndicator($644,3839,119,$11,$52,$645,$646,$647,$648)|0);
   $12 = $649;
   $650 = HEAP32[$52>>2]|0;
   $651 = $9;
   $652 = HEAP32[$651>>2]|0;
   $653 = ((($652)) + 616|0);
   $654 = ((($653)) + 24|0);
   HEAP32[$654>>2] = $650;
   $655 = $12;
   $656 = ($655|0)!=(0);
   $657 = $7;
   $658 = ($657|0)!=(0|0);
   $or$cond15 = $656 & $658;
   if ($or$cond15) {
    $659 = HEAP32[$52>>2]|0;
    $660 = $7;
    HEAP32[$660>>2] = $659;
   }
   break;
  }
  case 112: {
   $661 = $9;
   $662 = HEAP32[$661>>2]|0;
   $663 = ((($662)) + 616|0);
   $664 = ((($663)) + 28|0);
   $665 = HEAP32[$664>>2]|0;
   HEAP32[$53>>2] = $665;
   $666 = $6;
   $667 = $8;
   $668 = $26;
   $669 = $27;
   $670 = $9;
   $671 = (_compileBrailleIndicator($666,3852,120,$11,$53,$667,$668,$669,$670)|0);
   $12 = $671;
   $672 = HEAP32[$53>>2]|0;
   $673 = $9;
   $674 = HEAP32[$673>>2]|0;
   $675 = ((($674)) + 616|0);
   $676 = ((($675)) + 28|0);
   HEAP32[$676>>2] = $672;
   $677 = $12;
   $678 = ($677|0)!=(0);
   $679 = $7;
   $680 = ($679|0)!=(0|0);
   $or$cond17 = $678 & $680;
   if ($or$cond17) {
    $681 = HEAP32[$53>>2]|0;
    $682 = $7;
    HEAP32[$682>>2] = $681;
   }
   break;
  }
  case 114: {
   $683 = $6;
   $684 = (_compileNumber($683,$11)|0);
   $685 = $9;
   $686 = HEAP32[$685>>2]|0;
   $687 = ((($686)) + 616|0);
   $688 = ((($687)) + 32|0);
   HEAP32[$688>>2] = $684;
   $12 = $684;
   break;
  }
  case 115: {
   $689 = $6;
   $690 = (_getToken($689,$13,3870,$11)|0);
   $691 = ($690|0)!=(0);
   if ($691) {
    $692 = $6;
    $693 = (_parseChars($692,$19,$13)|0);
    $694 = ($693|0)!=(0);
    if ($694) {
     $695 = HEAP16[$19>>1]|0;
     $696 = $695&65535;
     $697 = (($696) + 1)|0;
     $698 = $697;
     $699 = (_malloc($698)|0);
     $54 = $699;
     $24 = 0;
     while(1) {
      $700 = $24;
      $701 = HEAP16[$19>>1]|0;
      $702 = $701&65535;
      $703 = ($700|0)<($702|0);
      $704 = $24;
      if (!($703)) {
       break;
      }
      $705 = ((($19)) + 2|0);
      $706 = (($705) + ($704<<1)|0);
      $707 = HEAP16[$706>>1]|0;
      $708 = $707&255;
      $709 = $24;
      $710 = $54;
      $711 = (($710) + ($709)|0);
      HEAP8[$711>>0] = $708;
      $712 = $24;
      $713 = (($712) + 1)|0;
      $24 = $713;
     }
     $714 = (($704) + 1)|0;
     $24 = $714;
     $715 = $54;
     $716 = (($715) + ($704)|0);
     HEAP8[$716>>0] = 0;
     $25 = 0;
     while(1) {
      $717 = $25;
      $718 = $9;
      $719 = HEAP32[$718>>2]|0;
      $720 = ((($719)) + 308|0);
      $721 = (($720) + ($717<<2)|0);
      $722 = HEAP32[$721>>2]|0;
      $723 = ($722|0)!=(0|0);
      if (!($723)) {
       break;
      }
      $724 = $54;
      $725 = $25;
      $726 = $9;
      $727 = HEAP32[$726>>2]|0;
      $728 = ((($727)) + 308|0);
      $729 = (($728) + ($725<<2)|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = (_strcmp($724,$730)|0);
      $732 = ($731|0)==(0);
      if ($732) {
       label = 123;
       break;
      }
      $737 = $25;
      $738 = (($737) + 1)|0;
      $25 = $738;
     }
     if ((label|0) == 123) {
      $733 = $54;
      HEAP32[$vararg_buffer51>>2] = $733;
      __lou_logMessage(30000,3885,$vararg_buffer51);
      $734 = HEAP32[3694]|0;
      $735 = (($734) + 1)|0;
      HEAP32[3694] = $735;
      $736 = $54;
      _free($736);
      $5 = 1;
      $2440 = $5;
      STACKTOP = sp;return ($2440|0);
     }
     $739 = $25;
     $740 = ($739|0)<(10);
     if (!($740)) {
      HEAP32[$vararg_buffer63>>2] = 10;
      __lou_logMessage(40000,4085,$vararg_buffer63);
      $775 = HEAP32[2640]|0;
      $776 = (($775) + 1)|0;
      HEAP32[2640] = $776;
      $777 = $54;
      _free($777);
      $12 = 0;
      break;
     }
     $741 = $25;
     switch ($741|0) {
     case 0:  {
      $742 = $54;
      $743 = (_strcmp($742,3914)|0);
      $744 = ($743|0)!=(0);
      if ($744) {
       $745 = $54;
       HEAP32[$vararg_buffer54>>2] = $745;
       __lou_logMessage(40000,3921,$vararg_buffer54);
       $746 = HEAP32[2640]|0;
       $747 = (($746) + 1)|0;
       HEAP32[2640] = $747;
       $748 = $54;
       _free($748);
       $5 = 0;
       $2440 = $5;
       STACKTOP = sp;return ($2440|0);
      }
      break;
     }
     case 1:  {
      $749 = $54;
      $750 = (_strcmp($749,3970)|0);
      $751 = ($750|0)!=(0);
      if ($751) {
       $752 = $54;
       HEAP32[$vararg_buffer57>>2] = $752;
       __lou_logMessage(40000,3980,$vararg_buffer57);
       $753 = HEAP32[2640]|0;
       $754 = (($753) + 1)|0;
       HEAP32[2640] = $754;
       $755 = $54;
       _free($755);
       $5 = 0;
       $2440 = $5;
       STACKTOP = sp;return ($2440|0);
      }
      break;
     }
     case 2:  {
      $756 = $54;
      $757 = (_strcmp($756,4033)|0);
      $758 = ($757|0)!=(0);
      if ($758) {
       $759 = $54;
       HEAP32[$vararg_buffer60>>2] = $759;
       __lou_logMessage(40000,4038,$vararg_buffer60);
       $760 = HEAP32[2640]|0;
       $761 = (($760) + 1)|0;
       HEAP32[2640] = $761;
       $762 = $54;
       _free($762);
       $5 = 0;
       $2440 = $5;
       STACKTOP = sp;return ($2440|0);
      }
      break;
     }
     default: {
     }
     }
     $763 = $54;
     $764 = $25;
     $765 = $9;
     $766 = HEAP32[$765>>2]|0;
     $767 = ((($766)) + 308|0);
     $768 = (($767) + ($764<<2)|0);
     HEAP32[$768>>2] = $763;
     $769 = $25;
     $770 = (($769) + 1)|0;
     $771 = $9;
     $772 = HEAP32[$771>>2]|0;
     $773 = ((($772)) + 308|0);
     $774 = (($773) + ($770<<2)|0);
     HEAP32[$774>>2] = 0;
     $12 = 1;
     break;
    }
   }
   $778 = $6;
   _compileError($778,4129,$vararg_buffer66);
   $12 = 0;
   break;
  }
  case 136: {
   $12 = 0;
   HEAP32[$55>>2] = 0;
   $779 = $6;
   $780 = (_getToken($779,$13,3870,$11)|0);
   $781 = ($780|0)!=(0);
   if ($781) {
    $782 = $6;
    $783 = (_parseChars($782,$19,$13)|0);
    $784 = ($783|0)!=(0);
    if ($784) {
     $785 = HEAP16[$19>>1]|0;
     $786 = $785&65535;
     $787 = (($786) + 1)|0;
     $788 = $787;
     $789 = (_malloc($788)|0);
     $56 = $789;
     $24 = 0;
     while(1) {
      $790 = $24;
      $791 = HEAP16[$19>>1]|0;
      $792 = $791&65535;
      $793 = ($790|0)<($792|0);
      $794 = $24;
      if (!($793)) {
       break;
      }
      $795 = ((($19)) + 2|0);
      $796 = (($795) + ($794<<1)|0);
      $797 = HEAP16[$796>>1]|0;
      $798 = $797&255;
      $799 = $24;
      $800 = $56;
      $801 = (($800) + ($799)|0);
      HEAP8[$801>>0] = $798;
      $802 = $24;
      $803 = (($802) + 1)|0;
      $24 = $803;
     }
     $804 = (($794) + 1)|0;
     $24 = $804;
     $805 = $56;
     $806 = (($805) + ($794)|0);
     HEAP8[$806>>0] = 0;
     $25 = 0;
     while(1) {
      $807 = $25;
      $808 = $9;
      $809 = HEAP32[$808>>2]|0;
      $810 = ((($809)) + 308|0);
      $811 = (($810) + ($807<<2)|0);
      $812 = HEAP32[$811>>2]|0;
      $813 = ($812|0)!=(0|0);
      if (!($813)) {
       break;
      }
      $814 = $56;
      $815 = $25;
      $816 = $9;
      $817 = HEAP32[$816>>2]|0;
      $818 = ((($817)) + 308|0);
      $819 = (($818) + ($815<<2)|0);
      $820 = HEAP32[$819>>2]|0;
      $821 = (_strcmp($814,$820)|0);
      $822 = ($821|0)==(0);
      if ($822) {
       break;
      }
      $823 = $25;
      $824 = (($823) + 1)|0;
      $25 = $824;
     }
     $825 = $25;
     $826 = $9;
     $827 = HEAP32[$826>>2]|0;
     $828 = ((($827)) + 308|0);
     $829 = (($828) + ($825<<2)|0);
     $830 = HEAP32[$829>>2]|0;
     $831 = ($830|0)!=(0|0);
     if (!($831)) {
      $832 = $56;
      HEAP32[$vararg_buffer68>>2] = $832;
      __lou_logMessage(40000,4179,$vararg_buffer68);
      $833 = HEAP32[2640]|0;
      $834 = (($833) + 1)|0;
      HEAP32[2640] = $834;
      $835 = $56;
      _free($835);
      break;
     }
     $836 = $25;
     $837 = (($836) + 1)|0;
     $25 = $837;
     $838 = $14;
     $839 = ($838|0)==(25);
     L177: do {
      if ($839) {
       $840 = $25;
       $841 = $9;
       $842 = HEAP32[$841>>2]|0;
       $843 = ((($842)) + 616|0);
       $844 = (($843) + (($840*36)|0)|0);
       $845 = ((($844)) + 20|0);
       $846 = HEAP32[$845>>2]|0;
       HEAP32[$55>>2] = $846;
       $847 = $6;
       $848 = $25;
       $849 = $848<<3;
       $850 = (131 + ($849))|0;
       $851 = $8;
       $852 = $26;
       $853 = $27;
       $854 = $9;
       $855 = (_compileBrailleIndicator($847,4210,$850,$11,$55,$851,$852,$853,$854)|0);
       $12 = $855;
       $856 = HEAP32[$55>>2]|0;
       $857 = $25;
       $858 = $9;
       $859 = HEAP32[$858>>2]|0;
       $860 = ((($859)) + 616|0);
       $861 = (($860) + (($857*36)|0)|0);
       $862 = ((($861)) + 20|0);
       HEAP32[$862>>2] = $856;
      } else {
       $863 = $14;
       $864 = ($863|0)==(26);
       if ($864) {
        $865 = $25;
        $866 = $9;
        $867 = HEAP32[$866>>2]|0;
        $868 = ((($867)) + 616|0);
        $869 = (($868) + (($865*36)|0)|0);
        $870 = ((($869)) + 24|0);
        $871 = HEAP32[$870>>2]|0;
        HEAP32[$55>>2] = $871;
        $872 = $6;
        $873 = $25;
        $874 = $873<<3;
        $875 = (132 + ($874))|0;
        $876 = $8;
        $877 = $26;
        $878 = $27;
        $879 = $9;
        $880 = (_compileBrailleIndicator($872,2611,$875,$11,$55,$876,$877,$878,$879)|0);
        $12 = $880;
        $881 = HEAP32[$55>>2]|0;
        $882 = $25;
        $883 = $9;
        $884 = HEAP32[$883>>2]|0;
        $885 = ((($884)) + 616|0);
        $886 = (($885) + (($882*36)|0)|0);
        $887 = ((($886)) + 24|0);
        HEAP32[$887>>2] = $881;
        break;
       }
       $888 = $14;
       $889 = ($888|0)==(27);
       if ($889) {
        $890 = $25;
        $891 = $9;
        $892 = HEAP32[$891>>2]|0;
        $893 = ((($892)) + 616|0);
        $894 = (($893) + (($890*36)|0)|0);
        $895 = ((($894)) + 28|0);
        $896 = HEAP32[$895>>2]|0;
        HEAP32[$55>>2] = $896;
        $897 = $6;
        $898 = $25;
        $899 = $898<<3;
        $900 = (133 + ($899))|0;
        $901 = $8;
        $902 = $26;
        $903 = $27;
        $904 = $9;
        $905 = (_compileBrailleIndicator($897,4224,$900,$11,$55,$901,$902,$903,$904)|0);
        $12 = $905;
        $906 = HEAP32[$55>>2]|0;
        $907 = $25;
        $908 = $9;
        $909 = HEAP32[$908>>2]|0;
        $910 = ((($909)) + 616|0);
        $911 = (($910) + (($907*36)|0)|0);
        $912 = ((($911)) + 28|0);
        HEAP32[$912>>2] = $906;
        break;
       }
       $913 = $14;
       $914 = ($913|0)==(28);
       if ($914) {
        $915 = $25;
        $916 = $9;
        $917 = HEAP32[$916>>2]|0;
        $918 = ((($917)) + 616|0);
        $919 = (($918) + (($915*36)|0)|0);
        $920 = ((($919)) + 24|0);
        $921 = HEAP32[$920>>2]|0;
        $922 = ($921|0)!=(0);
        if (!($922)) {
         $923 = $25;
         $924 = $9;
         $925 = HEAP32[$924>>2]|0;
         $926 = ((($925)) + 616|0);
         $927 = (($926) + (($923*36)|0)|0);
         $928 = HEAP32[$927>>2]|0;
         $929 = ($928|0)!=(0);
         if (!($929)) {
          $931 = $25;
          $932 = $9;
          $933 = HEAP32[$932>>2]|0;
          $934 = ((($933)) + 616|0);
          $935 = (($934) + (($931*36)|0)|0);
          $936 = ((($935)) + 12|0);
          $937 = HEAP32[$936>>2]|0;
          HEAP32[$55>>2] = $937;
          $938 = $6;
          $939 = $25;
          $940 = $939<<3;
          $941 = (129 + ($940))|0;
          $942 = $8;
          $943 = $26;
          $944 = $27;
          $945 = $9;
          $946 = (_compileBrailleIndicator($938,4369,$941,$11,$55,$942,$943,$944,$945)|0);
          $12 = $946;
          $947 = HEAP32[$55>>2]|0;
          $948 = $25;
          $949 = $9;
          $950 = HEAP32[$949>>2]|0;
          $951 = ((($950)) + 616|0);
          $952 = (($951) + (($948*36)|0)|0);
          $953 = ((($952)) + 12|0);
          HEAP32[$953>>2] = $947;
          break;
         }
        }
        $930 = $6;
        _compileError($930,4234,$vararg_buffer71);
        $12 = 0;
        break L30;
       }
       $954 = $14;
       $955 = ($954|0)==(29);
       if ($955) {
        $956 = $25;
        $957 = $9;
        $958 = HEAP32[$957>>2]|0;
        $959 = ((($958)) + 616|0);
        $960 = (($959) + (($956*36)|0)|0);
        $961 = ((($960)) + 28|0);
        $962 = HEAP32[$961>>2]|0;
        $963 = ($962|0)!=(0);
        if (!($963)) {
         $964 = $25;
         $965 = $9;
         $966 = HEAP32[$965>>2]|0;
         $967 = ((($966)) + 616|0);
         $968 = (($967) + (($964*36)|0)|0);
         $969 = ((($968)) + 4|0);
         $970 = HEAP32[$969>>2]|0;
         $971 = ($970|0)!=(0);
         if (!($971)) {
          $972 = $25;
          $973 = $9;
          $974 = HEAP32[$973>>2]|0;
          $975 = ((($974)) + 616|0);
          $976 = (($975) + (($972*36)|0)|0);
          $977 = ((($976)) + 8|0);
          $978 = HEAP32[$977>>2]|0;
          $979 = ($978|0)!=(0);
          if (!($979)) {
           $981 = $25;
           $982 = $9;
           $983 = HEAP32[$982>>2]|0;
           $984 = ((($983)) + 616|0);
           $985 = (($984) + (($981*36)|0)|0);
           $986 = ((($985)) + 16|0);
           $987 = HEAP32[$986>>2]|0;
           HEAP32[$55>>2] = $987;
           $988 = $6;
           $989 = $25;
           $990 = $989<<3;
           $991 = (130 + ($990))|0;
           $992 = $8;
           $993 = $26;
           $994 = $27;
           $995 = $9;
           $996 = (_compileBrailleIndicator($988,4517,$991,$11,$55,$992,$993,$994,$995)|0);
           $12 = $996;
           $997 = HEAP32[$55>>2]|0;
           $998 = $25;
           $999 = $9;
           $1000 = HEAP32[$999>>2]|0;
           $1001 = ((($1000)) + 616|0);
           $1002 = (($1001) + (($998*36)|0)|0);
           $1003 = ((($1002)) + 16|0);
           HEAP32[$1003>>2] = $997;
           break;
          }
         }
        }
        $980 = $6;
        _compileError($980,4382,$vararg_buffer73);
        $12 = 0;
        break L30;
       }
       $1004 = $14;
       $1005 = ($1004|0)==(30);
       if ($1005) {
        $1006 = $25;
        $1007 = $9;
        $1008 = HEAP32[$1007>>2]|0;
        $1009 = ((($1008)) + 616|0);
        $1010 = (($1009) + (($1006*36)|0)|0);
        $1011 = HEAP32[$1010>>2]|0;
        HEAP32[$55>>2] = $1011;
        $1012 = $6;
        $1013 = $25;
        $1014 = $1013<<3;
        $1015 = (126 + ($1014))|0;
        $1016 = $8;
        $1017 = $26;
        $1018 = $27;
        $1019 = $9;
        $1020 = (_compileBrailleIndicator($1012,4529,$1015,$11,$55,$1016,$1017,$1018,$1019)|0);
        $12 = $1020;
        $1021 = HEAP32[$55>>2]|0;
        $1022 = $25;
        $1023 = $9;
        $1024 = HEAP32[$1023>>2]|0;
        $1025 = ((($1024)) + 616|0);
        $1026 = (($1025) + (($1022*36)|0)|0);
        HEAP32[$1026>>2] = $1021;
        break;
       }
       $1027 = $14;
       $1028 = ($1027|0)==(31);
       if (!($1028)) {
        $1096 = $14;
        $1097 = ($1096|0)==(32);
        if (!($1097)) {
         break;
        }
        $1098 = $6;
        $1099 = (_compileNumber($1098,$11)|0);
        $1100 = $25;
        $1101 = $9;
        $1102 = HEAP32[$1101>>2]|0;
        $1103 = ((($1102)) + 616|0);
        $1104 = (($1103) + (($1100*36)|0)|0);
        $1105 = ((($1104)) + 32|0);
        HEAP32[$1105>>2] = $1099;
        $12 = $1099;
        break;
       }
       $1029 = $6;
       $1030 = (_compileBeforeAfter($1029,$11)|0);
       switch ($1030|0) {
       case 1:  {
        $1031 = $25;
        $1032 = $9;
        $1033 = HEAP32[$1032>>2]|0;
        $1034 = ((($1033)) + 616|0);
        $1035 = (($1034) + (($1031*36)|0)|0);
        $1036 = ((($1035)) + 8|0);
        $1037 = HEAP32[$1036>>2]|0;
        $1038 = ($1037|0)!=(0);
        if ($1038) {
         $1039 = $6;
         _compileError($1039,4540,$vararg_buffer75);
         $12 = 0;
         break L177;
        } else {
         $1040 = $25;
         $1041 = $9;
         $1042 = HEAP32[$1041>>2]|0;
         $1043 = ((($1042)) + 616|0);
         $1044 = (($1043) + (($1040*36)|0)|0);
         $1045 = ((($1044)) + 4|0);
         $1046 = HEAP32[$1045>>2]|0;
         HEAP32[$55>>2] = $1046;
         $1047 = $6;
         $1048 = $25;
         $1049 = $1048<<3;
         $1050 = (127 + ($1049))|0;
         $1051 = $8;
         $1052 = $26;
         $1053 = $27;
         $1054 = $9;
         $1055 = (_compileBrailleIndicator($1047,4573,$1050,$11,$55,$1051,$1052,$1053,$1054)|0);
         $12 = $1055;
         $1056 = HEAP32[$55>>2]|0;
         $1057 = $25;
         $1058 = $9;
         $1059 = HEAP32[$1058>>2]|0;
         $1060 = ((($1059)) + 616|0);
         $1061 = (($1060) + (($1057*36)|0)|0);
         $1062 = ((($1061)) + 4|0);
         HEAP32[$1062>>2] = $1056;
         break L177;
        }
        break;
       }
       case 2:  {
        $1063 = $25;
        $1064 = $9;
        $1065 = HEAP32[$1064>>2]|0;
        $1066 = ((($1065)) + 616|0);
        $1067 = (($1066) + (($1063*36)|0)|0);
        $1068 = ((($1067)) + 4|0);
        $1069 = HEAP32[$1068>>2]|0;
        $1070 = ($1069|0)!=(0);
        if ($1070) {
         $1071 = $6;
         _compileError($1071,4590,$vararg_buffer77);
         $12 = 0;
         break L177;
        } else {
         $1072 = $25;
         $1073 = $9;
         $1074 = HEAP32[$1073>>2]|0;
         $1075 = ((($1074)) + 616|0);
         $1076 = (($1075) + (($1072*36)|0)|0);
         $1077 = ((($1076)) + 8|0);
         $1078 = HEAP32[$1077>>2]|0;
         HEAP32[$55>>2] = $1078;
         $1079 = $6;
         $1080 = $25;
         $1081 = $1080<<3;
         $1082 = (128 + ($1081))|0;
         $1083 = $8;
         $1084 = $26;
         $1085 = $27;
         $1086 = $9;
         $1087 = (_compileBrailleIndicator($1079,4624,$1082,$11,$55,$1083,$1084,$1085,$1086)|0);
         $12 = $1087;
         $1088 = HEAP32[$55>>2]|0;
         $1089 = $25;
         $1090 = $9;
         $1091 = HEAP32[$1090>>2]|0;
         $1092 = ((($1091)) + 616|0);
         $1093 = (($1092) + (($1089*36)|0)|0);
         $1094 = ((($1093)) + 8|0);
         HEAP32[$1094>>2] = $1088;
         break L177;
        }
        break;
       }
       default: {
        $1095 = $6;
        _compileError($1095,3724,$vararg_buffer79);
        $12 = 0;
        break L177;
       }
       }
      }
     } while(0);
     $1106 = $56;
     _free($1106);
    }
   }
   $1107 = $12;
   $1108 = ($1107|0)!=(0);
   $1109 = $7;
   $1110 = ($1109|0)!=(0|0);
   $or$cond19 = $1108 & $1110;
   if ($or$cond19) {
    $1111 = HEAP32[$55>>2]|0;
    $1112 = $7;
    HEAP32[$1112>>2] = $1111;
   }
   break;
  }
  case 180: {
   $1113 = $9;
   $1114 = HEAP32[$1113>>2]|0;
   $1115 = ((($1114)) + 40|0);
   $1116 = HEAP32[$1115>>2]|0;
   HEAP32[$57>>2] = $1116;
   $1117 = $6;
   $1118 = $8;
   $1119 = $26;
   $1120 = $27;
   $1121 = $9;
   $1122 = (_compileBrailleIndicator($1117,4640,115,$11,$57,$1118,$1119,$1120,$1121)|0);
   $12 = $1122;
   $1123 = HEAP32[$57>>2]|0;
   $1124 = $9;
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = ((($1125)) + 40|0);
   HEAP32[$1126>>2] = $1123;
   $1127 = $12;
   $1128 = ($1127|0)!=(0);
   $1129 = $7;
   $1130 = ($1129|0)!=(0|0);
   $or$cond21 = $1128 & $1130;
   if ($or$cond21) {
    $1131 = HEAP32[$57>>2]|0;
    $1132 = $7;
    HEAP32[$1132>>2] = $1131;
   }
   break;
  }
  case 182: {
   $1133 = $6;
   $1134 = (_getRuleCharsText($1133,$15,$11)|0);
   $1135 = ($1134|0)!=(0);
   if ($1135) {
    $1136 = $9;
    $1137 = HEAP32[$1136>>2]|0;
    $1138 = ((($1137)) + 1204|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = HEAP16[$15>>1]|0;
    $1141 = $1140&65535;
    $1142 = (($1139) + ($1141))|0;
    $1143 = ($1142|0)>(64);
    if ($1143) {
     $1144 = $6;
     HEAP32[$vararg_buffer81>>2] = 64;
     _compileError($1144,4652,$vararg_buffer81);
     $12 = 0;
     break;
    }
    $24 = 0;
    while(1) {
     $1145 = $24;
     $1146 = HEAP16[$15>>1]|0;
     $1147 = $1146&65535;
     $1148 = ($1145|0)<($1147|0);
     if (!($1148)) {
      break L30;
     }
     $1149 = $24;
     $1150 = ((($15)) + 2|0);
     $1151 = (($1150) + ($1149<<1)|0);
     $1152 = HEAP16[$1151>>1]|0;
     $1153 = $9;
     $1154 = HEAP32[$1153>>2]|0;
     $1155 = ((($1154)) + 1204|0);
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = (($1156) + 1)|0;
     HEAP32[$1155>>2] = $1157;
     $1158 = $9;
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = ((($1159)) + 1076|0);
     $1161 = (($1160) + ($1156<<1)|0);
     HEAP16[$1161>>1] = $1152;
     $1162 = $24;
     $1163 = (($1162) + 1)|0;
     $24 = $1163;
    }
   }
   break;
  }
  case 188: {
   $1164 = $6;
   $1165 = (_getRuleCharsText($1164,$15,$11)|0);
   $1166 = ($1165|0)!=(0);
   if ($1166) {
    $1167 = $9;
    $1168 = HEAP32[$1167>>2]|0;
    $1169 = ((($1168)) + 1720|0);
    $1170 = HEAP32[$1169>>2]|0;
    $1171 = HEAP16[$15>>1]|0;
    $1172 = $1171&65535;
    $1173 = (($1170) + ($1172))|0;
    $1174 = ($1173|0)>(256);
    if ($1174) {
     $1175 = $6;
     HEAP32[$vararg_buffer84>>2] = 256;
     _compileError($1175,4652,$vararg_buffer84);
     $12 = 0;
     break;
    }
    $24 = 0;
    while(1) {
     $1176 = $24;
     $1177 = HEAP16[$15>>1]|0;
     $1178 = $1177&65535;
     $1179 = ($1176|0)<($1178|0);
     if (!($1179)) {
      break L30;
     }
     $1180 = $24;
     $1181 = ((($15)) + 2|0);
     $1182 = (($1181) + ($1180<<1)|0);
     $1183 = HEAP16[$1182>>1]|0;
     $1184 = $9;
     $1185 = HEAP32[$1184>>2]|0;
     $1186 = ((($1185)) + 1720|0);
     $1187 = HEAP32[$1186>>2]|0;
     $1188 = (($1187) + 1)|0;
     HEAP32[$1186>>2] = $1188;
     $1189 = $9;
     $1190 = HEAP32[$1189>>2]|0;
     $1191 = ((($1190)) + 1208|0);
     $1192 = (($1191) + ($1187<<1)|0);
     HEAP16[$1192>>1] = $1183;
     $1193 = $24;
     $1194 = (($1193) + 1)|0;
     $24 = $1194;
    }
   }
   break;
  }
  case 194: {
   $1195 = $6;
   $1196 = (_getRuleCharsText($1195,$15,$11)|0);
   $1197 = ($1196|0)!=(0);
   if ($1197) {
    $1198 = $9;
    $1199 = HEAP32[$1198>>2]|0;
    $1200 = ((($1199)) + 1852|0);
    $1201 = HEAP32[$1200>>2]|0;
    $1202 = HEAP16[$15>>1]|0;
    $1203 = $1202&65535;
    $1204 = (($1201) + ($1203))|0;
    $1205 = ($1204|0)>(64);
    if ($1205) {
     $1206 = $6;
     HEAP32[$vararg_buffer87>>2] = 64;
     _compileError($1206,4652,$vararg_buffer87);
     $12 = 0;
     break;
    }
    $24 = 0;
    while(1) {
     $1207 = $24;
     $1208 = HEAP16[$15>>1]|0;
     $1209 = $1208&65535;
     $1210 = ($1207|0)<($1209|0);
     if (!($1210)) {
      break L30;
     }
     $1211 = $24;
     $1212 = ((($15)) + 2|0);
     $1213 = (($1212) + ($1211<<1)|0);
     $1214 = HEAP16[$1213>>1]|0;
     $1215 = $9;
     $1216 = HEAP32[$1215>>2]|0;
     $1217 = ((($1216)) + 1852|0);
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = (($1218) + 1)|0;
     HEAP32[$1217>>2] = $1219;
     $1220 = $9;
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = ((($1221)) + 1724|0);
     $1223 = (($1222) + ($1218<<1)|0);
     HEAP16[$1223>>1] = $1214;
     $1224 = $24;
     $1225 = (($1224) + 1)|0;
     $24 = $1225;
    }
   }
   break;
  }
  case 200: {
   $1226 = $9;
   $1227 = HEAP32[$1226>>2]|0;
   $1228 = ((($1227)) + 44|0);
   $1229 = HEAP32[$1228>>2]|0;
   HEAP32[$58>>2] = $1229;
   $1230 = $6;
   $1231 = $8;
   $1232 = $26;
   $1233 = $27;
   $1234 = $9;
   $1235 = (_compileBrailleIndicator($1230,4676,116,$11,$58,$1231,$1232,$1233,$1234)|0);
   $12 = $1235;
   $1236 = HEAP32[$58>>2]|0;
   $1237 = $9;
   $1238 = HEAP32[$1237>>2]|0;
   $1239 = ((($1238)) + 44|0);
   HEAP32[$1239>>2] = $1236;
   $1240 = $12;
   $1241 = ($1240|0)!=(0);
   $1242 = $7;
   $1243 = ($1242|0)!=(0|0);
   $or$cond23 = $1241 & $1243;
   if ($or$cond23) {
    $1244 = HEAP32[$58>>2]|0;
    $1245 = $7;
    HEAP32[$1245>>2] = $1244;
   }
   break;
  }
  case 202: {
   $22 = 0;
   $12 = 1;
   $1246 = $6;
   $1247 = (_getToken($1246,$15,4688,$11)|0);
   $1248 = ($1247|0)!=(0);
   if (!($1248)) {
    $1249 = $6;
    _compileError($1249,4705,$vararg_buffer90);
    $12 = 0;
    break;
   }
   $24 = -1;
   $1250 = ((($15)) + 2|0);
   $1251 = HEAP16[$1250>>1]|0;
   $1252 = $1251&65535;
   switch ($1252|0) {
   case 48:  {
    $24 = 0;
    break;
   }
   case 49:  {
    $24 = 1;
    break;
   }
   case 50:  {
    $24 = 2;
    break;
   }
   case 51:  {
    $24 = 3;
    break;
   }
   case 52:  {
    $24 = 4;
    break;
   }
   case 53:  {
    $24 = 5;
    break;
   }
   case 54:  {
    $24 = 6;
    break;
   }
   case 55:  {
    $24 = 7;
    break;
   }
   default: {
   }
   }
   $1253 = $24;
   $1254 = ($1253|0)==(-1);
   $1255 = $6;
   if ($1254) {
    _compileError($1255,4732,$vararg_buffer92);
    $12 = 0;
    break;
   }
   $1256 = (_getRuleCharsText($1255,$15,$11)|0);
   $1257 = ($1256|0)!=(0);
   if ($1257) {
    $25 = 0;
    while(1) {
     $1258 = $25;
     $1259 = HEAP16[$15>>1]|0;
     $1260 = $1259&65535;
     $1261 = ($1258|0)<($1260|0);
     if (!($1261)) {
      break L30;
     }
     $1262 = $25;
     $1263 = ((($15)) + 2|0);
     $1264 = (($1263) + ($1262<<1)|0);
     $1265 = HEAP16[$1264>>1]|0;
     $1266 = $9;
     $1267 = HEAP32[$1266>>2]|0;
     $1268 = (_compile_findCharOrDots($1265,0,$1267)|0);
     $22 = $1268;
     $1269 = $22;
     $1270 = ($1269|0)!=(0|0);
     if (!($1270)) {
      break;
     }
     $1271 = $24;
     $1272 = 65536 << $1271;
     $1273 = ($1272|0)<(0);
     $1274 = $1273 << 31 >> 31;
     $1275 = $22;
     $1276 = ((($1275)) + 16|0);
     $1277 = $1276;
     $1278 = $1277;
     $1279 = HEAP32[$1278>>2]|0;
     $1280 = (($1277) + 4)|0;
     $1281 = $1280;
     $1282 = HEAP32[$1281>>2]|0;
     $1283 = $1279 | $1272;
     $1284 = $1282 | $1274;
     $1285 = $1276;
     $1286 = $1285;
     HEAP32[$1286>>2] = $1283;
     $1287 = (($1285) + 4)|0;
     $1288 = $1287;
     HEAP32[$1288>>2] = $1284;
     $1289 = $25;
     $1290 = (($1289) + 1)|0;
     $25 = $1290;
    }
    $1291 = $6;
    _compileError($1291,4758,$vararg_buffer94);
    $12 = 0;
   }
   break;
  }
  case 221: {
   $22 = 0;
   $12 = 1;
   $1292 = $6;
   $1293 = (_getRuleCharsText($1292,$15,$11)|0);
   $1294 = ($1293|0)!=(0);
   if ($1294) {
    $24 = 0;
    while(1) {
     $1295 = $24;
     $1296 = HEAP16[$15>>1]|0;
     $1297 = $1296&65535;
     $1298 = ($1295|0)<($1297|0);
     if (!($1298)) {
      break;
     }
     $1299 = $24;
     $1300 = ((($15)) + 2|0);
     $1301 = (($1300) + ($1299<<1)|0);
     $1302 = HEAP16[$1301>>1]|0;
     $1303 = $9;
     $1304 = HEAP32[$1303>>2]|0;
     $1305 = (_compile_findCharOrDots($1302,0,$1304)|0);
     $22 = $1305;
     $1306 = $22;
     $1307 = ($1306|0)!=(0|0);
     if (!($1307)) {
      label = 226;
      break;
     }
     $1308 = $22;
     $1309 = ((($1308)) + 16|0);
     $1310 = $1309;
     $1311 = $1310;
     $1312 = HEAP32[$1311>>2]|0;
     $1313 = (($1310) + 4)|0;
     $1314 = $1313;
     $1315 = HEAP32[$1314>>2]|0;
     $1316 = $1312 | 67108864;
     $1317 = $1309;
     $1318 = $1317;
     HEAP32[$1318>>2] = $1316;
     $1319 = (($1317) + 4)|0;
     $1320 = $1319;
     HEAP32[$1320>>2] = $1315;
     $1321 = $24;
     $1322 = (($1321) + 1)|0;
     $24 = $1322;
    }
    if ((label|0) == 226) {
     $1323 = $6;
     _compileError($1323,4788,$vararg_buffer96);
     $12 = 0;
    }
    $1324 = $9;
    $1325 = HEAP32[$1324>>2]|0;
    $1326 = ((($1325)) + 20|0);
    HEAP32[$1326>>2] = 1;
   }
   break;
  }
  case 228: {
   $22 = 0;
   $12 = 1;
   $1327 = $6;
   $1328 = (_getRuleCharsText($1327,$15,$11)|0);
   $1329 = ($1328|0)!=(0);
   if ($1329) {
    $24 = 0;
    while(1) {
     $1330 = $24;
     $1331 = HEAP16[$15>>1]|0;
     $1332 = $1331&65535;
     $1333 = ($1330|0)<($1332|0);
     if (!($1333)) {
      break;
     }
     $1334 = $24;
     $1335 = ((($15)) + 2|0);
     $1336 = (($1335) + ($1334<<1)|0);
     $1337 = HEAP16[$1336>>1]|0;
     $1338 = $9;
     $1339 = HEAP32[$1338>>2]|0;
     $1340 = (_compile_findCharOrDots($1337,0,$1339)|0);
     $22 = $1340;
     $1341 = $22;
     $1342 = ($1341|0)!=(0|0);
     if (!($1342)) {
      label = 233;
      break;
     }
     $1343 = $22;
     $1344 = ((($1343)) + 16|0);
     $1345 = $1344;
     $1346 = $1345;
     $1347 = HEAP32[$1346>>2]|0;
     $1348 = (($1345) + 4)|0;
     $1349 = $1348;
     $1350 = HEAP32[$1349>>2]|0;
     $1351 = $1347 | 1073741824;
     $1352 = $1344;
     $1353 = $1352;
     HEAP32[$1353>>2] = $1351;
     $1354 = (($1352) + 4)|0;
     $1355 = $1354;
     HEAP32[$1355>>2] = $1350;
     $1356 = $24;
     $1357 = (($1356) + 1)|0;
     $24 = $1357;
    }
    if ((label|0) == 233) {
     $1358 = $6;
     _compileError($1358,4821,$vararg_buffer98);
     $12 = 0;
    }
    $1359 = $9;
    $1360 = HEAP32[$1359>>2]|0;
    $1361 = ((($1360)) + 20|0);
    HEAP32[$1361>>2] = 1;
   }
   break;
  }
  case 235: {
   $22 = 0;
   $12 = 1;
   $1362 = $6;
   $1363 = (_getRuleCharsText($1362,$15,$11)|0);
   $1364 = ($1363|0)!=(0);
   if ($1364) {
    $24 = 0;
    while(1) {
     $1365 = $24;
     $1366 = HEAP16[$15>>1]|0;
     $1367 = $1366&65535;
     $1368 = ($1365|0)<($1367|0);
     if (!($1368)) {
      break;
     }
     $1369 = $24;
     $1370 = ((($15)) + 2|0);
     $1371 = (($1370) + ($1369<<1)|0);
     $1372 = HEAP16[$1371>>1]|0;
     $1373 = $9;
     $1374 = HEAP32[$1373>>2]|0;
     $1375 = (_compile_findCharOrDots($1372,0,$1374)|0);
     $22 = $1375;
     $1376 = $22;
     $1377 = ($1376|0)!=(0|0);
     if (!($1377)) {
      label = 240;
      break;
     }
     $1378 = $22;
     $1379 = ((($1378)) + 16|0);
     $1380 = $1379;
     $1381 = $1380;
     $1382 = HEAP32[$1381>>2]|0;
     $1383 = (($1380) + 4)|0;
     $1384 = $1383;
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = $1382 | 134217728;
     $1387 = $1379;
     $1388 = $1387;
     HEAP32[$1388>>2] = $1386;
     $1389 = (($1387) + 4)|0;
     $1390 = $1389;
     HEAP32[$1390>>2] = $1385;
     $1391 = $24;
     $1392 = (($1391) + 1)|0;
     $24 = $1392;
    }
    if ((label|0) == 240) {
     $1393 = $6;
     _compileError($1393,4860,$vararg_buffer100);
     $12 = 0;
    }
    $1394 = $9;
    $1395 = HEAP32[$1394>>2]|0;
    $1396 = ((($1395)) + 20|0);
    HEAP32[$1396>>2] = 1;
   }
   break;
  }
  case 242: {
   $1397 = $9;
   $1398 = HEAP32[$1397>>2]|0;
   $1399 = ((($1398)) + 48|0);
   $1400 = HEAP32[$1399>>2]|0;
   HEAP32[$59>>2] = $1400;
   $1401 = $6;
   $1402 = $8;
   $1403 = $26;
   $1404 = $27;
   $1405 = $9;
   $1406 = (_compileBrailleIndicator($1401,4903,117,$11,$59,$1402,$1403,$1404,$1405)|0);
   $12 = $1406;
   $1407 = HEAP32[$59>>2]|0;
   $1408 = $9;
   $1409 = HEAP32[$1408>>2]|0;
   $1410 = ((($1409)) + 48|0);
   HEAP32[$1410>>2] = $1407;
   $1411 = $12;
   $1412 = ($1411|0)!=(0);
   $1413 = $7;
   $1414 = ($1413|0)!=(0|0);
   $or$cond25 = $1412 & $1414;
   if ($or$cond25) {
    $1415 = HEAP32[$59>>2]|0;
    $1416 = $7;
    HEAP32[$1416>>2] = $1415;
   }
   break;
  }
  case 244: {
   $22 = 0;
   $12 = 1;
   $1417 = $6;
   $1418 = (_getRuleCharsText($1417,$15,$11)|0);
   $1419 = ($1418|0)!=(0);
   if ($1419) {
    $24 = 0;
    while(1) {
     $1420 = $24;
     $1421 = HEAP16[$15>>1]|0;
     $1422 = $1421&65535;
     $1423 = ($1420|0)<($1422|0);
     if (!($1423)) {
      break;
     }
     $1424 = $24;
     $1425 = ((($15)) + 2|0);
     $1426 = (($1425) + ($1424<<1)|0);
     $1427 = HEAP16[$1426>>1]|0;
     $1428 = $9;
     $1429 = HEAP32[$1428>>2]|0;
     $1430 = (_compile_findCharOrDots($1427,0,$1429)|0);
     $22 = $1430;
     $1431 = $22;
     $1432 = ($1431|0)!=(0|0);
     if (!($1432)) {
      label = 249;
      break;
     }
     $1433 = $22;
     $1434 = ((($1433)) + 16|0);
     $1435 = $1434;
     $1436 = $1435;
     $1437 = HEAP32[$1436>>2]|0;
     $1438 = (($1435) + 4)|0;
     $1439 = $1438;
     $1440 = HEAP32[$1439>>2]|0;
     $1441 = $1437 | 8192;
     $1442 = $1434;
     $1443 = $1442;
     HEAP32[$1443>>2] = $1441;
     $1444 = (($1442) + 4)|0;
     $1445 = $1444;
     HEAP32[$1445>>2] = $1440;
     $1446 = $24;
     $1447 = (($1446) + 1)|0;
     $24 = $1447;
    }
    if ((label|0) == 249) {
     $1448 = $6;
     _compileError($1448,4924,$vararg_buffer102);
     $12 = 0;
    }
    $1449 = $9;
    $1450 = HEAP32[$1449>>2]|0;
    $1451 = ((($1450)) + 16|0);
    HEAP32[$1451>>2] = 1;
   }
   break;
  }
  case 251: {
   $22 = 0;
   $12 = 1;
   $1452 = $6;
   $1453 = (_getRuleCharsText($1452,$15,$11)|0);
   $1454 = ($1453|0)!=(0);
   if ($1454) {
    $24 = 0;
    while(1) {
     $1455 = $24;
     $1456 = HEAP16[$15>>1]|0;
     $1457 = $1456&65535;
     $1458 = ($1455|0)<($1457|0);
     if (!($1458)) {
      break L30;
     }
     $1459 = $24;
     $1460 = ((($15)) + 2|0);
     $1461 = (($1460) + ($1459<<1)|0);
     $1462 = HEAP16[$1461>>1]|0;
     $1463 = $9;
     $1464 = HEAP32[$1463>>2]|0;
     $1465 = (_compile_findCharOrDots($1462,0,$1464)|0);
     $22 = $1465;
     $1466 = $22;
     $1467 = ($1466|0)!=(0|0);
     if (!($1467)) {
      break;
     }
     $1468 = $22;
     $1469 = ((($1468)) + 16|0);
     $1470 = $1469;
     $1471 = $1470;
     $1472 = HEAP32[$1471>>2]|0;
     $1473 = (($1470) + 4)|0;
     $1474 = $1473;
     $1475 = HEAP32[$1474>>2]|0;
     $1476 = $1472 | 16384;
     $1477 = $1469;
     $1478 = $1477;
     HEAP32[$1478>>2] = $1476;
     $1479 = (($1477) + 4)|0;
     $1480 = $1479;
     HEAP32[$1480>>2] = $1475;
     $1481 = $24;
     $1482 = (($1481) + 1)|0;
     $24 = $1482;
    }
    $1483 = $6;
    _compileError($1483,4963,$vararg_buffer104);
    $12 = 0;
   }
   break;
  }
  case 257: {
   $22 = 0;
   $12 = 1;
   $1484 = $6;
   $1485 = (_getRuleCharsText($1484,$15,$11)|0);
   $1486 = ($1485|0)!=(0);
   if ($1486) {
    $24 = 0;
    while(1) {
     $1487 = $24;
     $1488 = HEAP16[$15>>1]|0;
     $1489 = $1488&65535;
     $1490 = ($1487|0)<($1489|0);
     if (!($1490)) {
      break L30;
     }
     $1491 = $24;
     $1492 = ((($15)) + 2|0);
     $1493 = (($1492) + ($1491<<1)|0);
     $1494 = HEAP16[$1493>>1]|0;
     $1495 = $9;
     $1496 = HEAP32[$1495>>2]|0;
     $1497 = (_compile_findCharOrDots($1494,0,$1496)|0);
     $22 = $1497;
     $1498 = $22;
     $1499 = ($1498|0)!=(0|0);
     if (!($1499)) {
      break;
     }
     $1500 = $22;
     $1501 = ((($1500)) + 16|0);
     $1502 = $1501;
     $1503 = $1502;
     $1504 = HEAP32[$1503>>2]|0;
     $1505 = (($1502) + 4)|0;
     $1506 = $1505;
     $1507 = HEAP32[$1506>>2]|0;
     $1508 = $1504 | 32768;
     $1509 = $1501;
     $1510 = $1509;
     HEAP32[$1510>>2] = $1508;
     $1511 = (($1509) + 4)|0;
     $1512 = $1511;
     HEAP32[$1512>>2] = $1507;
     $1513 = $24;
     $1514 = (($1513) + 1)|0;
     $24 = $1514;
    }
    $1515 = $6;
    _compileError($1515,4999,$vararg_buffer106);
    $12 = 0;
   }
   break;
  }
  case 263: {
   $1516 = $6;
   $1517 = (_getRuleCharsText($1516,$15,$11)|0);
   $1518 = ($1517|0)!=(0);
   if ($1518) {
    $1519 = $9;
    $1520 = HEAP32[$1519>>2]|0;
    $1521 = ((($1520)) + 352|0);
    $1522 = HEAP32[$1521>>2]|0;
    $1523 = HEAP16[$15>>1]|0;
    $1524 = $1523&65535;
    $1525 = (($1522) + ($1524))|0;
    $1526 = (($1525) + 1)|0;
    $1527 = ($1526|0)>(128);
    if ($1527) {
     $1528 = $6;
     HEAP32[$vararg_buffer108>>2] = 128;
     _compileError($1528,4652,$vararg_buffer108);
     $12 = 0;
     break;
    }
    $24 = 0;
    while(1) {
     $1529 = $24;
     $1530 = HEAP16[$15>>1]|0;
     $1531 = $1530&65535;
     $1532 = ($1529|0)<($1531|0);
     if (!($1532)) {
      break;
     }
     $1533 = $24;
     $1534 = ((($15)) + 2|0);
     $1535 = (($1534) + ($1533<<1)|0);
     $1536 = HEAP16[$1535>>1]|0;
     $1537 = $9;
     $1538 = HEAP32[$1537>>2]|0;
     $1539 = ((($1538)) + 352|0);
     $1540 = HEAP32[$1539>>2]|0;
     $1541 = (($1540) + 1)|0;
     HEAP32[$1539>>2] = $1541;
     $1542 = $9;
     $1543 = HEAP32[$1542>>2]|0;
     $1544 = ((($1543)) + 52|0);
     $1545 = (($1544) + ($1540<<1)|0);
     HEAP16[$1545>>1] = $1536;
     $1546 = $24;
     $1547 = (($1546) + 1)|0;
     $24 = $1547;
    }
    $1548 = $9;
    $1549 = HEAP32[$1548>>2]|0;
    $1550 = ((($1549)) + 352|0);
    $1551 = HEAP32[$1550>>2]|0;
    $1552 = (($1551) + 1)|0;
    HEAP32[$1550>>2] = $1552;
    $1553 = $9;
    $1554 = HEAP32[$1553>>2]|0;
    $1555 = ((($1554)) + 52|0);
    $1556 = (($1555) + ($1551<<1)|0);
    HEAP16[$1556>>1] = 0;
   }
   break;
  }
  case 270: {
   $1557 = $6;
   $1558 = (_getRuleCharsText($1557,$15,$11)|0);
   $1559 = ($1558|0)!=(0);
   if ($1559) {
    $1560 = $9;
    $1561 = HEAP32[$1560>>2]|0;
    $1562 = ((($1561)) + 612|0);
    HEAP32[$1562>>2] = 0;
    while(1) {
     $1563 = $9;
     $1564 = HEAP32[$1563>>2]|0;
     $1565 = ((($1564)) + 612|0);
     $1566 = HEAP32[$1565>>2]|0;
     $1567 = HEAP16[$15>>1]|0;
     $1568 = $1567&65535;
     $1569 = ($1566|0)<($1568|0);
     $1570 = $9;
     $1571 = HEAP32[$1570>>2]|0;
     $1572 = ((($1571)) + 612|0);
     $1573 = HEAP32[$1572>>2]|0;
     if (!($1569)) {
      break;
     }
     $1574 = ((($15)) + 2|0);
     $1575 = (($1574) + ($1573<<1)|0);
     $1576 = HEAP16[$1575>>1]|0;
     $1577 = $9;
     $1578 = HEAP32[$1577>>2]|0;
     $1579 = ((($1578)) + 612|0);
     $1580 = HEAP32[$1579>>2]|0;
     $1581 = $9;
     $1582 = HEAP32[$1581>>2]|0;
     $1583 = ((($1582)) + 356|0);
     $1584 = (($1583) + ($1580<<1)|0);
     HEAP16[$1584>>1] = $1576;
     $1585 = $9;
     $1586 = HEAP32[$1585>>2]|0;
     $1587 = ((($1586)) + 612|0);
     $1588 = HEAP32[$1587>>2]|0;
     $1589 = (($1588) + 1)|0;
     HEAP32[$1587>>2] = $1589;
    }
    $1590 = $9;
    $1591 = HEAP32[$1590>>2]|0;
    $1592 = ((($1591)) + 356|0);
    $1593 = (($1592) + ($1573<<1)|0);
    HEAP16[$1593>>1] = 0;
   }
   break;
  }
  case 275: {
   $22 = 0;
   $12 = 1;
   $1594 = $6;
   $1595 = (_getRuleCharsText($1594,$15,$11)|0);
   $1596 = ($1595|0)!=(0);
   if ($1596) {
    $24 = 0;
    while(1) {
     $1597 = $24;
     $1598 = HEAP16[$15>>1]|0;
     $1599 = $1598&65535;
     $1600 = ($1597|0)<($1599|0);
     if (!($1600)) {
      break L30;
     }
     $1601 = $24;
     $1602 = ((($15)) + 2|0);
     $1603 = (($1602) + ($1601<<1)|0);
     $1604 = HEAP16[$1603>>1]|0;
     $1605 = $9;
     $1606 = HEAP32[$1605>>2]|0;
     $1607 = (_compile_findCharOrDots($1604,0,$1606)|0);
     $22 = $1607;
     $1608 = $22;
     $1609 = ($1608|0)!=(0|0);
     if (!($1609)) {
      break;
     }
     $1610 = $22;
     $1611 = ((($1610)) + 16|0);
     $1612 = $1611;
     $1613 = $1612;
     $1614 = HEAP32[$1613>>2]|0;
     $1615 = (($1612) + 4)|0;
     $1616 = $1615;
     $1617 = HEAP32[$1616>>2]|0;
     $1618 = $1614 | 16777216;
     $1619 = $1611;
     $1620 = $1619;
     HEAP32[$1620>>2] = $1618;
     $1621 = (($1619) + 4)|0;
     $1622 = $1621;
     HEAP32[$1622>>2] = $1617;
     $1623 = $24;
     $1624 = (($1623) + 1)|0;
     $24 = $1624;
    }
    $1625 = $6;
    _compileError($1625,5034,$vararg_buffer111);
    $12 = 0;
   }
   break;
  }
  case 281: {
   $22 = 0;
   $12 = 1;
   $1626 = $6;
   $1627 = (_getRuleCharsText($1626,$15,$11)|0);
   $1628 = ($1627|0)!=(0);
   L347: do {
    if ($1628) {
     $24 = 0;
     while(1) {
      $1629 = $24;
      $1630 = HEAP16[$15>>1]|0;
      $1631 = $1630&65535;
      $1632 = ($1629|0)<($1631|0);
      if (!($1632)) {
       break L347;
      }
      $1633 = $24;
      $1634 = ((($15)) + 2|0);
      $1635 = (($1634) + ($1633<<1)|0);
      $1636 = HEAP16[$1635>>1]|0;
      $1637 = $9;
      $1638 = HEAP32[$1637>>2]|0;
      $1639 = (_compile_findCharOrDots($1636,0,$1638)|0);
      $22 = $1639;
      $1640 = $22;
      $1641 = ($1640|0)!=(0|0);
      if (!($1641)) {
       break;
      }
      $1642 = $22;
      $1643 = ((($1642)) + 16|0);
      $1644 = $1643;
      $1645 = $1644;
      $1646 = HEAP32[$1645>>2]|0;
      $1647 = (($1644) + 4)|0;
      $1648 = $1647;
      $1649 = HEAP32[$1648>>2]|0;
      $1650 = $1646 | 33554432;
      $1651 = $1643;
      $1652 = $1651;
      HEAP32[$1652>>2] = $1650;
      $1653 = (($1651) + 4)|0;
      $1654 = $1653;
      HEAP32[$1654>>2] = $1649;
      $1655 = $24;
      $1656 = (($1655) + 1)|0;
      $24 = $1656;
     }
     $1657 = $6;
     _compileError($1657,5067,$vararg_buffer113);
     $12 = 0;
    }
   } while(0);
   $1658 = $9;
   $1659 = HEAP32[$1658>>2]|0;
   $1660 = ((($1659)) + 24|0);
   HEAP32[$1660>>2] = 1;
   break;
  }
  case 288: {
   $1661 = $9;
   $1662 = HEAP32[$1661>>2]|0;
   $1663 = ((($1662)) + 1028|0);
   $1664 = HEAP32[$1663>>2]|0;
   HEAP32[$60>>2] = $1664;
   $1665 = $6;
   $1666 = $8;
   $1667 = $26;
   $1668 = $27;
   $1669 = $9;
   $1670 = (_compileBrailleIndicator($1665,5101,206,$11,$60,$1666,$1667,$1668,$1669)|0);
   $12 = $1670;
   $1671 = HEAP32[$60>>2]|0;
   $1672 = $9;
   $1673 = HEAP32[$1672>>2]|0;
   $1674 = ((($1673)) + 1028|0);
   HEAP32[$1674>>2] = $1671;
   $1675 = $12;
   $1676 = ($1675|0)!=(0);
   $1677 = $7;
   $1678 = ($1677|0)!=(0|0);
   $or$cond27 = $1676 & $1678;
   if ($or$cond27) {
    $1679 = HEAP32[$60>>2]|0;
    $1680 = $7;
    HEAP32[$1680>>2] = $1679;
   }
   break;
  }
  case 290: {
   $1681 = $9;
   $1682 = HEAP32[$1681>>2]|0;
   $1683 = ((($1682)) + 1068|0);
   $1684 = HEAP32[$1683>>2]|0;
   HEAP32[$61>>2] = $1684;
   $1685 = $6;
   $1686 = $8;
   $1687 = $26;
   $1688 = $27;
   $1689 = $9;
   $1690 = (_compileBrailleIndicator($1685,5124,216,$11,$61,$1686,$1687,$1688,$1689)|0);
   $12 = $1690;
   $1691 = HEAP32[$61>>2]|0;
   $1692 = $9;
   $1693 = HEAP32[$1692>>2]|0;
   $1694 = ((($1693)) + 1068|0);
   HEAP32[$1694>>2] = $1691;
   $1695 = $12;
   $1696 = ($1695|0)!=(0);
   $1697 = $7;
   $1698 = ($1697|0)!=(0|0);
   $or$cond29 = $1696 & $1698;
   if ($or$cond29) {
    $1699 = HEAP32[$61>>2]|0;
    $1700 = $7;
    HEAP32[$1700>>2] = $1699;
   }
   break;
  }
  case 293: {
   $1703 = $6;
   $1704 = (__lou_findOpcodeName(84)|0);
   HEAP32[$vararg_buffer115>>2] = $1704;
   _compileError($1703,3378,$vararg_buffer115);
   $12 = 0;
   break;
  }
  case 295: {
   $1705 = $9;
   $1706 = HEAP32[$1705>>2]|0;
   $1707 = ((($1706)) + 12|0);
   HEAP32[$1707>>2] = 1;
   label = 296;
   break;
  }
  case 311: {
   $12 = 0;
   $1769 = $6;
   $1770 = (_getRuleCharsText($1769,$15,$11)|0);
   $1771 = ($1770|0)!=(0);
   if ($1771) {
    $1772 = $6;
    $1773 = (_getToken($1772,$63,5173,$11)|0);
    $1774 = ($1773|0)!=(0);
    if ($1774) {
     $1775 = HEAP16[$63>>1]|0;
     $1776 = $1775&65535;
     $64 = $1776;
     $24 = 0;
     while(1) {
      $1777 = $24;
      $1778 = $64;
      $1779 = (($1778) - 1)|0;
      $1780 = ($1777|0)<($1779|0);
      if (!($1780)) {
       break L30;
      }
      $1781 = $24;
      $1782 = ((($63)) + 2|0);
      $1783 = (($1782) + ($1781<<1)|0);
      $1784 = HEAP16[$1783>>1]|0;
      $1785 = $1784&65535;
      $1786 = ($1785|0)==(44);
      if ($1786) {
       $1787 = $24;
       $1788 = $1787&65535;
       HEAP16[$63>>1] = $1788;
       $1789 = $6;
       $1790 = (_parseDots($1789,$16,$63)|0);
       $1791 = ($1790|0)!=(0);
       if ($1791) {
        break;
       }
      }
      $1885 = $24;
      $1886 = (($1885) + 1)|0;
      $24 = $1886;
     }
     $1792 = HEAP16[$16>>1]|0;
     $1793 = (($1792) + 1)<<16>>16;
     HEAP16[$16>>1] = $1793;
     $1794 = $1792&65535;
     $1795 = ((($16)) + 2|0);
     $1796 = (($1795) + ($1794<<1)|0);
     HEAP16[$1796>>1] = 44;
     $1797 = $24;
     $1798 = (($1797) + 1)|0;
     $24 = $1798;
     $1799 = $24;
     $1800 = $64;
     $1801 = (($1800) - 1)|0;
     $1802 = ($1799|0)==($1801|0);
     L370: do {
      if ($1802) {
       $1803 = $24;
       $1804 = ((($63)) + 2|0);
       $1805 = (($1804) + ($1803<<1)|0);
       $1806 = HEAP16[$1805>>1]|0;
       $1807 = $1806&65535;
       $1808 = ($1807|0)==(61);
       if ($1808) {
        $65 = 0;
        while(1) {
         $1809 = $65;
         $1810 = HEAP16[$15>>1]|0;
         $1811 = $1810&65535;
         $1812 = ($1809|0)<($1811|0);
         if (!($1812)) {
          break L370;
         }
         $1813 = $65;
         $1814 = ((($15)) + 2|0);
         $1815 = (($1814) + ($1813<<1)|0);
         $1816 = HEAP16[$1815>>1]|0;
         $1817 = $9;
         $1818 = HEAP32[$1817>>2]|0;
         $1819 = (_compile_findCharOrDots($1816,0,$1818)|0);
         $22 = $1819;
         $1820 = $22;
         $1821 = ($1820|0)!=(0|0);
         if (!($1821)) {
          break;
         }
         $1822 = $22;
         $1823 = ((($1822)) + 4|0);
         $1824 = HEAP32[$1823>>2]|0;
         $1825 = ($1824|0)!=(0);
         if (!($1825)) {
          break;
         }
         $1831 = $65;
         $1832 = (($1831) + 1)|0;
         $65 = $1832;
        }
        $1826 = $6;
        $1827 = $65;
        $1828 = ((($15)) + 2|0);
        $1829 = (($1828) + ($1827<<1)|0);
        $1830 = (__lou_showString($1829,1,0)|0);
        HEAP32[$vararg_buffer121>>2] = $1830;
        _compileError($1826,5145,$vararg_buffer121);
        $5 = 0;
        $2440 = $5;
        STACKTOP = sp;return ($2440|0);
       } else {
        label = 325;
       }
      } else {
       label = 325;
      }
     } while(0);
     L380: do {
      if ((label|0) == 325) {
       HEAP16[$66>>1] = 0;
       while(1) {
        $1833 = $24;
        $1834 = $64;
        $1835 = ($1833|0)<($1834|0);
        if (!($1835)) {
         break;
        }
        $1836 = $24;
        $1837 = (($1836) + 1)|0;
        $24 = $1837;
        $1838 = ((($63)) + 2|0);
        $1839 = (($1838) + ($1836<<1)|0);
        $1840 = HEAP16[$1839>>1]|0;
        $1841 = HEAP16[$66>>1]|0;
        $1842 = (($1841) + 1)<<16>>16;
        HEAP16[$66>>1] = $1842;
        $1843 = $1841&65535;
        $1844 = ((($66)) + 2|0);
        $1845 = (($1844) + ($1843<<1)|0);
        HEAP16[$1845>>1] = $1840;
       }
       $1846 = $6;
       $1847 = (_parseDots($1846,$67,$66)|0);
       $1848 = ($1847|0)!=(0);
       if ($1848) {
        $68 = 0;
        while(1) {
         $1849 = $68;
         $1850 = HEAP16[$67>>1]|0;
         $1851 = $1850&65535;
         $1852 = ($1849|0)<($1851|0);
         if (!($1852)) {
          break L380;
         }
         $1853 = $68;
         $1854 = ((($67)) + 2|0);
         $1855 = (($1854) + ($1853<<1)|0);
         $1856 = HEAP16[$1855>>1]|0;
         $1857 = HEAP16[$16>>1]|0;
         $1858 = (($1857) + 1)<<16>>16;
         HEAP16[$16>>1] = $1858;
         $1859 = $1857&65535;
         $1860 = ((($16)) + 2|0);
         $1861 = (($1860) + ($1859<<1)|0);
         HEAP16[$1861>>1] = $1856;
         $1862 = $68;
         $1863 = (($1862) + 1)|0;
         $68 = $1863;
        }
       }
      }
     } while(0);
     $1864 = $6;
     $1865 = $14;
     $1866 = $20;
     $1867 = $1866;
     $1868 = HEAP32[$1867>>2]|0;
     $1869 = (($1866) + 4)|0;
     $1870 = $1869;
     $1871 = HEAP32[$1870>>2]|0;
     $1872 = $21;
     $1873 = $1872;
     $1874 = HEAP32[$1873>>2]|0;
     $1875 = (($1872) + 4)|0;
     $1876 = $1875;
     $1877 = HEAP32[$1876>>2]|0;
     $1878 = $7;
     $1879 = $8;
     $1880 = $26;
     $1881 = $27;
     $1882 = $9;
     $1883 = (_addRule($1864,$1865,$15,$16,$1868,$1871,$1874,$1877,$1878,$1879,$1880,$1881,$1882)|0);
     $1884 = ($1883|0)!=(0);
     if ($1884) {
      $12 = 1;
     }
    }
   }
   break;
  }
  case 335: {
   $1887 = $6;
   $1888 = (_getRuleCharsText($1887,$15,$11)|0);
   $1889 = ($1888|0)!=(0);
   if (!($1889)) {
    $5 = 0;
    $2440 = $5;
    STACKTOP = sp;return ($2440|0);
   }
   $1890 = HEAP16[$15>>1]|0;
   $1891 = $1890&65535;
   $1892 = ($1891|0)!=(1);
   if (!($1892)) {
    $1893 = ((($15)) + 2|0);
    $1894 = HEAP16[$1893>>1]|0;
    $1895 = $1894&65535;
    $1896 = ($1895|0)>(255);
    if (!($1896)) {
     $1898 = $6;
     $1899 = (_getRuleDotsPattern($1898,$16,$11)|0);
     $1900 = ($1899|0)!=(0);
     if (!($1900)) {
      $5 = 0;
      $2440 = $5;
      STACKTOP = sp;return ($2440|0);
     }
     $1901 = $6;
     $1902 = $14;
     $1903 = $20;
     $1904 = $1903;
     $1905 = HEAP32[$1904>>2]|0;
     $1906 = (($1903) + 4)|0;
     $1907 = $1906;
     $1908 = HEAP32[$1907>>2]|0;
     $1909 = $21;
     $1910 = $1909;
     $1911 = HEAP32[$1910>>2]|0;
     $1912 = (($1909) + 4)|0;
     $1913 = $1912;
     $1914 = HEAP32[$1913>>2]|0;
     $1915 = $8;
     $1916 = $26;
     $1917 = $27;
     $1918 = $9;
     $1919 = (_addRule($1901,$1902,$15,$16,$1905,$1908,$1911,$1914,$69,$1915,$1916,$1917,$1918)|0);
     $1920 = ($1919|0)!=(0);
     if (!($1920)) {
      $12 = 0;
     }
     $1921 = HEAP32[$69>>2]|0;
     $1922 = ((($15)) + 2|0);
     $1923 = HEAP16[$1922>>1]|0;
     $1924 = $1923&65535;
     $1925 = $9;
     $1926 = HEAP32[$1925>>2]|0;
     $1927 = ((($1926)) + 10840|0);
     $1928 = (($1927) + ($1924<<2)|0);
     HEAP32[$1928>>2] = $1921;
     $1929 = $12;
     $1930 = ($1929|0)!=(0);
     $1931 = $7;
     $1932 = ($1931|0)!=(0|0);
     $or$cond31 = $1930 & $1932;
     if (!($or$cond31)) {
      break;
     }
     $1933 = HEAP32[$69>>2]|0;
     $1934 = $7;
     HEAP32[$1934>>2] = $1933;
     break;
    }
   }
   $1897 = $6;
   _compileError($1897,5191,$vararg_buffer124);
   $5 = 0;
   $2440 = $5;
   STACKTOP = sp;return ($2440|0);
   break;
  }
  case 346: {
   $1935 = $6;
   $1936 = (_getRuleCharsText($1935,$15,$11)|0);
   $1937 = ($1936|0)!=(0);
   if (!($1937)) {
    $5 = 0;
    $2440 = $5;
    STACKTOP = sp;return ($2440|0);
   }
   $1938 = ((($15)) + 2|0);
   $1939 = HEAP16[$1938>>1]|0;
   $1940 = $1939&65535;
   $1941 = ($1940|0)!=(64);
   if ($1941) {
    $1942 = $6;
    _compileError($1942,5235,$vararg_buffer126);
    $5 = 0;
    $2440 = $5;
    STACKTOP = sp;return ($2440|0);
   }
   $24 = 1;
   while(1) {
    $1943 = $24;
    $1944 = HEAP16[$15>>1]|0;
    $1945 = $1944&65535;
    $1946 = ($1943|0)<($1945|0);
    if (!($1946)) {
     break;
    }
    $1947 = $24;
    $1948 = ((($15)) + 2|0);
    $1949 = (($1948) + ($1947<<1)|0);
    $1950 = HEAP16[$1949>>1]|0;
    $1951 = $24;
    $1952 = (($1951) - 1)|0;
    $1953 = ((($18)) + 2|0);
    $1954 = (($1953) + ($1952<<1)|0);
    HEAP16[$1954>>1] = $1950;
    $1955 = $24;
    $1956 = (($1955) + 1)|0;
    $24 = $1956;
   }
   $1957 = HEAP16[$15>>1]|0;
   $1958 = $1957&65535;
   $1959 = (($1958) - 1)|0;
   $1960 = $1959&65535;
   HEAP16[$18>>1] = $1960;
   $1961 = $6;
   $1962 = (_parseDots($1961,$16,$18)|0);
   $1963 = ($1962|0)!=(0);
   if ($1963) {
    $1964 = $6;
    $1965 = $14;
    $1966 = $21;
    $1967 = $1966;
    $1968 = HEAP32[$1967>>2]|0;
    $1969 = (($1966) + 4)|0;
    $1970 = $1969;
    $1971 = HEAP32[$1970>>2]|0;
    $1972 = $20;
    $1973 = $1972;
    $1974 = HEAP32[$1973>>2]|0;
    $1975 = (($1972) + 4)|0;
    $1976 = $1975;
    $1977 = HEAP32[$1976>>2]|0;
    $1978 = $7;
    $1979 = $8;
    $1980 = $26;
    $1981 = $27;
    $1982 = $9;
    $1983 = (_addRule($1964,$1965,$15,$16,$1968,$1971,$1974,$1977,$1978,$1979,$1980,$1981,$1982)|0);
    $1984 = ($1983|0)!=(0);
    if ($1984) {
     break;
    }
    $12 = 0;
    break;
   } else {
    $5 = 0;
    $2440 = $5;
    STACKTOP = sp;return ($2440|0);
   }
   break;
  }
  case 357: {
   HEAP16[$15>>1] = 1;
   $1985 = ((($15)) + 2|0);
   HEAP16[$1985>>1] = 97;
   $1986 = $6;
   $1987 = $20;
   $1988 = $1987;
   $1989 = HEAP32[$1988>>2]|0;
   $1990 = (($1987) + 4)|0;
   $1991 = $1990;
   $1992 = HEAP32[$1991>>2]|0;
   $1993 = $21;
   $1994 = $1993;
   $1995 = HEAP32[$1994>>2]|0;
   $1996 = (($1993) + 4)|0;
   $1997 = $1996;
   $1998 = HEAP32[$1997>>2]|0;
   $1999 = $8;
   $2000 = $26;
   $2001 = $27;
   $2002 = $9;
   $2003 = (_addRule($1986,217,$15,0,$1989,$1992,$1995,$1998,$70,$1999,$2000,$2001,$2002)|0);
   $2004 = ($2003|0)!=(0);
   if (!($2004)) {
    $12 = 0;
   }
   $2005 = HEAP32[$70>>2]|0;
   $2006 = $9;
   $2007 = HEAP32[$2006>>2]|0;
   HEAP32[$2007>>2] = $2005;
   $2008 = $12;
   $2009 = ($2008|0)!=(0);
   $2010 = $7;
   $2011 = ($2010|0)!=(0|0);
   $or$cond33 = $2009 & $2011;
   if ($or$cond33) {
    $2012 = HEAP32[$70>>2]|0;
    $2013 = $7;
    HEAP32[$2013>>2] = $2012;
   }
   break;
  }
  case 361: {
   $2014 = $6;
   $2015 = (_getRuleCharsText($2014,$15,$11)|0);
   $2016 = ($2015|0)!=(0);
   do {
    if ($2016) {
     $2017 = HEAP32[$11>>2]|0;
     $2018 = ($2017|0)!=(0);
     if ($2018) {
      $2019 = ((($16)) + 2|0);
      HEAP16[$2019>>1] = 0;
      HEAP16[$16>>1] = 0;
      break;
     }
     $2020 = $6;
     (_getRuleDotsText($2020,$16,$11)|0);
     $2021 = ((($16)) + 2|0);
     $2022 = HEAP16[$2021>>1]|0;
     $2023 = $2022&65535;
     $2024 = ($2023|0)==(35);
     $2025 = ((($16)) + 2|0);
     if ($2024) {
      HEAP16[$2025>>1] = 0;
      HEAP16[$16>>1] = 0;
      break;
     }
     $2026 = HEAP16[$2025>>1]|0;
     $2027 = $2026&65535;
     $2028 = ($2027|0)==(92);
     if ($2028) {
      $2029 = ((($16)) + 2|0);
      $2030 = ((($2029)) + 2|0);
      $2031 = HEAP16[$2030>>1]|0;
      $2032 = $2031&65535;
      $2033 = ($2032|0)==(35);
      if ($2033) {
       $2034 = ((($16)) + 2|0);
       $2035 = ((($16)) + 2|0);
       $2036 = ((($2035)) + 2|0);
       $2037 = HEAP16[$16>>1]|0;
       $2038 = (($2037) + -1)<<16>>16;
       HEAP16[$16>>1] = $2038;
       $2039 = $2037&65535;
       $2040 = $2039<<1;
       _memmove(($2034|0),($2036|0),($2040|0))|0;
      }
     }
    }
   } while(0);
   $24 = 0;
   while(1) {
    $2041 = $24;
    $2042 = HEAP16[$15>>1]|0;
    $2043 = $2042&65535;
    $2044 = ($2041|0)<($2043|0);
    if (!($2044)) {
     break;
    }
    $2045 = $6;
    $2046 = $24;
    $2047 = ((($15)) + 2|0);
    $2048 = (($2047) + ($2046<<1)|0);
    $2049 = HEAP16[$2048>>1]|0;
    $2050 = $9;
    (_addCharOrDots($2045,$2049,0,$2050)|0);
    $2051 = $24;
    $2052 = (($2051) + 1)|0;
    $24 = $2052;
   }
   $24 = 0;
   while(1) {
    $2053 = $24;
    $2054 = HEAP16[$16>>1]|0;
    $2055 = $2054&65535;
    $2056 = ($2053|0)<($2055|0);
    $2057 = $6;
    if (!($2056)) {
     break;
    }
    $2058 = $24;
    $2059 = ((($16)) + 2|0);
    $2060 = (($2059) + ($2058<<1)|0);
    $2061 = HEAP16[$2060>>1]|0;
    $2062 = $9;
    (_addCharOrDots($2057,$2061,0,$2062)|0);
    $2063 = $24;
    $2064 = (($2063) + 1)|0;
    $24 = $2064;
   }
   $2065 = $14;
   $2066 = $20;
   $2067 = $2066;
   $2068 = HEAP32[$2067>>2]|0;
   $2069 = (($2066) + 4)|0;
   $2070 = $2069;
   $2071 = HEAP32[$2070>>2]|0;
   $2072 = $21;
   $2073 = $2072;
   $2074 = HEAP32[$2073>>2]|0;
   $2075 = (($2072) + 4)|0;
   $2076 = $2075;
   $2077 = HEAP32[$2076>>2]|0;
   $2078 = $7;
   $2079 = $8;
   $2080 = $26;
   $2081 = $27;
   $2082 = $9;
   $2083 = (_addRule($2057,$2065,$15,$16,$2068,$2071,$2074,$2077,$2078,$2079,$2080,$2081,$2082)|0);
   $2084 = ($2083|0)!=(0);
   if (!($2084)) {
    $12 = 0;
   }
   break;
  }
  case 377: {
   $2085 = $9;
   $2086 = HEAP32[$2085>>2]|0;
   $2087 = ((($2086)) + 8|0);
   HEAP32[$2087>>2] = 1;
   label = 384;
   break;
  }
  case 378: {
   $2088 = $9;
   $2089 = HEAP32[$2088>>2]|0;
   $2090 = ((($2089)) + 4|0);
   $2091 = HEAP32[$2090>>2]|0;
   $2092 = ($2091|0)<(2);
   if ($2092) {
    $2093 = $9;
    $2094 = HEAP32[$2093>>2]|0;
    $2095 = ((($2094)) + 4|0);
    HEAP32[$2095>>2] = 2;
    label = 384;
   } else {
    label = 384;
   }
   break;
  }
  case 380: {
   $2096 = $9;
   $2097 = HEAP32[$2096>>2]|0;
   $2098 = ((($2097)) + 4|0);
   $2099 = HEAP32[$2098>>2]|0;
   $2100 = ($2099|0)<(3);
   if ($2100) {
    $2101 = $9;
    $2102 = HEAP32[$2101>>2]|0;
    $2103 = ((($2102)) + 4|0);
    HEAP32[$2103>>2] = 3;
    label = 384;
   } else {
    label = 384;
   }
   break;
  }
  case 382: {
   $2104 = $9;
   $2105 = HEAP32[$2104>>2]|0;
   $2106 = ((($2105)) + 4|0);
   $2107 = HEAP32[$2106>>2]|0;
   $2108 = ($2107|0)<(4);
   if ($2108) {
    $2109 = $9;
    $2110 = HEAP32[$2109>>2]|0;
    $2111 = ((($2110)) + 4|0);
    HEAP32[$2111>>2] = 4;
    label = 384;
   } else {
    label = 384;
   }
   break;
  }
  case 388: {
   $2127 = $6;
   $2128 = (_getRuleCharsText($2127,$15,$11)|0);
   $2129 = ($2128|0)!=(0);
   if ($2129) {
    $24 = 0;
    while(1) {
     $2130 = $24;
     $2131 = HEAP16[$15>>1]|0;
     $2132 = $2131&65535;
     $2133 = ($2130|0)<($2132|0);
     if (!($2133)) {
      label = 395;
      break;
     }
     $2134 = $24;
     $2135 = ((($15)) + 2|0);
     $2136 = (($2135) + ($2134<<1)|0);
     $2137 = HEAP16[$2136>>1]|0;
     $2138 = $9;
     $2139 = HEAP32[$2138>>2]|0;
     $2140 = (_compile_findCharOrDots($2137,0,$2139)|0);
     $22 = $2140;
     $2141 = $22;
     $2142 = ($2141|0)!=(0|0);
     if (!($2142)) {
      label = 393;
      break;
     }
     $2143 = $22;
     $2144 = ((($2143)) + 4|0);
     $2145 = HEAP32[$2144>>2]|0;
     $2146 = ($2145|0)!=(0);
     if (!($2146)) {
      label = 393;
      break;
     }
     $2152 = $24;
     $2153 = (($2152) + 1)|0;
     $24 = $2153;
    }
    if ((label|0) == 393) {
     $2147 = $6;
     $2148 = $24;
     $2149 = ((($15)) + 2|0);
     $2150 = (($2149) + ($2148<<1)|0);
     $2151 = (__lou_showString($2150,1,0)|0);
     HEAP32[$vararg_buffer132>>2] = $2151;
     _compileError($2147,5145,$vararg_buffer132);
     $5 = 0;
     $2440 = $5;
     STACKTOP = sp;return ($2440|0);
    }
    else if ((label|0) == 395) {
     $2154 = $6;
     $2155 = $14;
     $2156 = $20;
     $2157 = $2156;
     $2158 = HEAP32[$2157>>2]|0;
     $2159 = (($2156) + 4)|0;
     $2160 = $2159;
     $2161 = HEAP32[$2160>>2]|0;
     $2162 = $21;
     $2163 = $2162;
     $2164 = HEAP32[$2163>>2]|0;
     $2165 = (($2162) + 4)|0;
     $2166 = $2165;
     $2167 = HEAP32[$2166>>2]|0;
     $2168 = $7;
     $2169 = $8;
     $2170 = $26;
     $2171 = $27;
     $2172 = $9;
     $2173 = (_addRule($2154,$2155,$15,0,$2158,$2161,$2164,$2167,$2168,$2169,$2170,$2171,$2172)|0);
     $2174 = ($2173|0)!=(0);
     if ($2174) {
      break;
     }
     $12 = 0;
     break;
    }
   }
   break;
  }
  case 397: {
   HEAP16[$15>>1] = 0;
   $2175 = $6;
   $2176 = (_getToken($2175,$13,5306,$11)|0);
   $2177 = ($2176|0)!=(0);
   L474: do {
    if ($2177) {
     $2178 = $6;
     $2179 = (_parseDots($2178,$17,$13)|0);
     $2180 = ($2179|0)!=(0);
     if ($2180) {
      while(1) {
       $2181 = $6;
       $2182 = (_getToken($2181,$13,5334,$11)|0);
       $71 = $2182;
       $2183 = ($2182|0)!=(0);
       if (!($2183)) {
        break L474;
       }
       $2184 = $6;
       $2185 = (_getOpcode($2184,$13)|0);
       $14 = $2185;
       $2186 = $14;
       $2187 = ($2186>>>0)>=(3);
       $2188 = $14;
       $2189 = ($2188>>>0)<(47);
       $or$cond37 = $2187 & $2189;
       if ($or$cond37) {
        $2190 = $14;
        $2191 = $2190&65535;
        $2192 = HEAP16[$15>>1]|0;
        $2193 = (($2192) + 1)<<16>>16;
        HEAP16[$15>>1] = $2193;
        $2194 = $2192&65535;
        $2195 = ((($15)) + 2|0);
        $2196 = (($2195) + ($2194<<1)|0);
        HEAP16[$2196>>1] = $2191;
       } else {
        $2197 = $6;
        _compileError($2197,5350,$vararg_buffer135);
        $12 = 0;
       }
       $2198 = $71;
       $2199 = ($2198|0)==(2);
       if ($2199) {
        break;
       }
      }
     } else {
      label = 404;
     }
    } else {
     label = 404;
    }
   } while(0);
   if ((label|0) == 404) {
    $12 = 0;
   }
   $2200 = $6;
   $2201 = $20;
   $2202 = $2201;
   $2203 = HEAP32[$2202>>2]|0;
   $2204 = (($2201) + 4)|0;
   $2205 = $2204;
   $2206 = HEAP32[$2205>>2]|0;
   $2207 = $21;
   $2208 = $2207;
   $2209 = HEAP32[$2208>>2]|0;
   $2210 = (($2207) + 4)|0;
   $2211 = $2210;
   $2212 = HEAP32[$2211>>2]|0;
   $2213 = $7;
   $2214 = $8;
   $2215 = $26;
   $2216 = $27;
   $2217 = $9;
   $2218 = (_addRule($2200,47,$15,$17,$2203,$2206,$2209,$2212,$2213,$2214,$2215,$2216,$2217)|0);
   $2219 = ($2218|0)!=(0);
   if (!($2219)) {
    $12 = 0;
   }
   break;
  }
  case 407: {
   $2220 = $9;
   $2221 = HEAP32[$2220>>2]|0;
   $2222 = ((($2221)) + 1012|0);
   $2223 = HEAP32[$2222>>2]|0;
   $2224 = ($2223|0)!=(0|0);
   if (!($2224)) {
    $2225 = $9;
    $2226 = HEAP32[$2225>>2]|0;
    $2227 = (_allocateCharacterClasses($2226)|0);
    $2228 = ($2227|0)!=(0);
    if (!($2228)) {
     $12 = 0;
    }
   }
   $2229 = $6;
   $2230 = (_getToken($2229,$13,5382,$11)|0);
   $2231 = ($2230|0)!=(0);
   if ($2231) {
    $2232 = $9;
    $2233 = HEAP32[$2232>>2]|0;
    $2234 = (_findCharacterClass($13,$2233)|0);
    $73 = $2234;
    $2235 = $73;
    $2236 = ($2235|0)!=(0|0);
    if (!($2236)) {
     $2237 = $6;
     $2238 = ((($13)) + 2|0);
     $2239 = HEAP16[$13>>1]|0;
     $2240 = $2239&65535;
     $2241 = $9;
     $2242 = HEAP32[$2241>>2]|0;
     $2243 = (_addCharacterClass($2237,$2238,$2240,$2242)|0);
     $73 = $2243;
    }
    $2244 = $73;
    $2245 = ($2244|0)!=(0|0);
    if ($2245) {
     $2246 = $6;
     $2247 = (_getCharacters($2246,$72,$11)|0);
     $2248 = ($2247|0)!=(0);
     if ($2248) {
      $74 = 0;
      while(1) {
       $2249 = $74;
       $2250 = HEAP16[$72>>1]|0;
       $2251 = $2250&65535;
       $2252 = ($2249|0)<($2251|0);
       if (!($2252)) {
        break L30;
       }
       $2253 = $6;
       $2254 = $74;
       $2255 = ((($72)) + 2|0);
       $2256 = (($2255) + ($2254<<1)|0);
       $2257 = HEAP16[$2256>>1]|0;
       $2258 = $9;
       $2259 = (_addCharOrDots($2253,$2257,0,$2258)|0);
       $76 = $2259;
       $2260 = $73;
       $2261 = ((($2260)) + 8|0);
       $2262 = $2261;
       $2263 = $2262;
       $2264 = HEAP32[$2263>>2]|0;
       $2265 = (($2262) + 4)|0;
       $2266 = $2265;
       $2267 = HEAP32[$2266>>2]|0;
       $2268 = $76;
       $2269 = ((($2268)) + 16|0);
       $2270 = $2269;
       $2271 = $2270;
       $2272 = HEAP32[$2271>>2]|0;
       $2273 = (($2270) + 4)|0;
       $2274 = $2273;
       $2275 = HEAP32[$2274>>2]|0;
       $2276 = $2272 | $2264;
       $2277 = $2275 | $2267;
       $2278 = $2269;
       $2279 = $2278;
       HEAP32[$2279>>2] = $2276;
       $2280 = (($2278) + 4)|0;
       $2281 = $2280;
       HEAP32[$2281>>2] = $2277;
       $2282 = $76;
       $2283 = ((($2282)) + 4|0);
       $2284 = HEAP32[$2283>>2]|0;
       $2285 = ($2284|0)!=(0);
       if ($2285) {
        $2286 = $76;
        $2287 = ((($2286)) + 4|0);
        $2288 = HEAP32[$2287>>2]|0;
        $2289 = $9;
        $2290 = HEAP32[$2289>>2]|0;
        $2291 = ((($2290)) + 21088|0);
        $2292 = (($2291) + ($2288<<3)|0);
        $75 = $2292;
        $2293 = $75;
        $2294 = ((($2293)) + 36|0);
        $2295 = HEAP16[$2294>>1]|0;
        $2296 = $2295 << 16 >> 16;
        $2297 = ($2296|0)==(1);
        if ($2297) {
         $2298 = $75;
         $2299 = ((($2298)) + 34|0);
         $2300 = HEAP16[$2299>>1]|0;
         $2301 = $2300 << 16 >> 16;
         $2302 = $75;
         $2303 = ((($2302)) + 38|0);
         $2304 = (($2303) + ($2301<<1)|0);
         $2305 = HEAP16[$2304>>1]|0;
         $2306 = $9;
         $2307 = HEAP32[$2306>>2]|0;
         $2308 = (_compile_findCharOrDots($2305,1,$2307)|0);
         $76 = $2308;
         $2309 = $76;
         $2310 = ($2309|0)!=(0|0);
         if ($2310) {
          $2311 = $73;
          $2312 = ((($2311)) + 8|0);
          $2313 = $2312;
          $2314 = $2313;
          $2315 = HEAP32[$2314>>2]|0;
          $2316 = (($2313) + 4)|0;
          $2317 = $2316;
          $2318 = HEAP32[$2317>>2]|0;
          $2319 = $76;
          $2320 = ((($2319)) + 16|0);
          $2321 = $2320;
          $2322 = $2321;
          $2323 = HEAP32[$2322>>2]|0;
          $2324 = (($2321) + 4)|0;
          $2325 = $2324;
          $2326 = HEAP32[$2325>>2]|0;
          $2327 = $2323 | $2315;
          $2328 = $2326 | $2318;
          $2329 = $2320;
          $2330 = $2329;
          HEAP32[$2330>>2] = $2327;
          $2331 = (($2329) + 4)|0;
          $2332 = $2331;
          HEAP32[$2332>>2] = $2328;
         }
        }
       }
       $2333 = $74;
       $2334 = (($2333) + 1)|0;
       $74 = $2334;
      }
     }
    }
   }
   break;
  }
  case 431: {
   $2392 = $6;
   $2393 = $14;
   $2394 = $7;
   $2395 = $8;
   $2396 = $26;
   $2397 = $27;
   $2398 = $9;
   $2399 = (_compileSwap($2392,$2393,$11,$2394,$2395,$2396,$2397,$2398)|0);
   $2400 = ($2399|0)!=(0);
   if (!($2400)) {
    $12 = 0;
   }
   break;
  }
  case 433: {
   $2401 = $6;
   $2402 = (_getRuleCharsText($2401,$15,$11)|0);
   $2403 = ($2402|0)!=(0);
   if ($2403) {
    $2404 = $6;
    $2405 = (_getRuleDotsPattern($2404,$16,$11)|0);
    $2406 = ($2405|0)!=(0);
    if ($2406) {
     $2407 = HEAP16[$15>>1]|0;
     $2408 = $2407&65535;
     $2409 = ($2408|0)!=(1);
     if ($2409) {
      label = 437;
     } else {
      $2410 = HEAP16[$16>>1]|0;
      $2411 = $2410&65535;
      $2412 = ($2411|0)<(1);
      if ($2412) {
       label = 437;
      }
     }
     if ((label|0) == 437) {
      $2413 = $6;
      _compileError($2413,5403,$vararg_buffer137);
      $12 = 0;
     }
     $2414 = $6;
     $2415 = $14;
     $2416 = $20;
     $2417 = $2416;
     $2418 = HEAP32[$2417>>2]|0;
     $2419 = (($2416) + 4)|0;
     $2420 = $2419;
     $2421 = HEAP32[$2420>>2]|0;
     $2422 = $21;
     $2423 = $2422;
     $2424 = HEAP32[$2423>>2]|0;
     $2425 = (($2422) + 4)|0;
     $2426 = $2425;
     $2427 = HEAP32[$2426>>2]|0;
     $2428 = $7;
     $2429 = $8;
     $2430 = $26;
     $2431 = $27;
     $2432 = $9;
     $2433 = (_addRule($2414,$2415,$15,$16,$2418,$2421,$2424,$2427,$2428,$2429,$2430,$2431,$2432)|0);
     $2434 = ($2433|0)!=(0);
     if (!($2434)) {
      $12 = 0;
     }
    }
   }
   break;
  }
  case 440: {
   $2435 = $6;
   _compileError($2435,5461,$vararg_buffer139);
   $12 = 0;
   break;
  }
 }
 do {
  if ((label|0) == 296) {
   $12 = 0;
   $1708 = $6;
   $1709 = (_getRuleCharsText($1708,$15,$11)|0);
   $1710 = ($1709|0)!=(0);
   if ($1710) {
    $1711 = $6;
    $1712 = (_getRuleDotsPattern($1711,$16,$11)|0);
    $1713 = ($1712|0)!=(0);
    if ($1713) {
     $1714 = HEAP16[$16>>1]|0;
     $1715 = $1714&65535;
     $1716 = ($1715|0)==(0);
     L554: do {
      if ($1716) {
       $24 = 0;
       while(1) {
        $1717 = $24;
        $1718 = HEAP16[$15>>1]|0;
        $1719 = $1718&65535;
        $1720 = ($1717|0)<($1719|0);
        if (!($1720)) {
         break L554;
        }
        $1721 = $24;
        $1722 = ((($15)) + 2|0);
        $1723 = (($1722) + ($1721<<1)|0);
        $1724 = HEAP16[$1723>>1]|0;
        $1725 = $9;
        $1726 = HEAP32[$1725>>2]|0;
        $1727 = (_compile_findCharOrDots($1724,0,$1726)|0);
        $22 = $1727;
        $1728 = $22;
        $1729 = ($1728|0)!=(0|0);
        if (!($1729)) {
         break;
        }
        $1730 = $22;
        $1731 = ((($1730)) + 4|0);
        $1732 = HEAP32[$1731>>2]|0;
        $1733 = ($1732|0)!=(0);
        if (!($1733)) {
         break;
        }
        $1739 = $24;
        $1740 = (($1739) + 1)|0;
        $24 = $1740;
       }
       $1734 = $6;
       $1735 = $24;
       $1736 = ((($15)) + 2|0);
       $1737 = (($1736) + ($1735<<1)|0);
       $1738 = (__lou_showString($1737,1,0)|0);
       HEAP32[$vararg_buffer118>>2] = $1738;
       _compileError($1734,5145,$vararg_buffer118);
       $5 = 0;
       $2440 = $5;
       STACKTOP = sp;return ($2440|0);
      }
     } while(0);
     $1741 = $6;
     $1742 = $14;
     $1743 = $20;
     $1744 = $1743;
     $1745 = HEAP32[$1744>>2]|0;
     $1746 = (($1743) + 4)|0;
     $1747 = $1746;
     $1748 = HEAP32[$1747>>2]|0;
     $1749 = $21;
     $1750 = $1749;
     $1751 = HEAP32[$1750>>2]|0;
     $1752 = (($1749) + 4)|0;
     $1753 = $1752;
     $1754 = HEAP32[$1753>>2]|0;
     $1755 = $7;
     $1756 = $26;
     $1757 = $27;
     $1758 = $9;
     $1759 = (_addRule($1741,$1742,$15,$16,$1745,$1748,$1751,$1754,$1755,$62,$1756,$1757,$1758)|0);
     $1760 = ($1759|0)!=(0);
     if ($1760) {
      $1761 = $28;
      $1762 = ($1761|0)!=(0);
      if ($1762) {
       $1763 = HEAP32[$62>>2]|0;
       $1764 = ((($1763)) + 32|0);
       HEAP8[$1764>>0] = 1;
      }
      $1765 = $8;
      $1766 = ($1765|0)!=(0|0);
      if ($1766) {
       $1767 = HEAP32[$62>>2]|0;
       $1768 = $8;
       HEAP32[$1768>>2] = $1767;
      }
      $12 = 1;
     }
    }
   }
  }
  else if ((label|0) == 384) {
   $2112 = $27;
   $2113 = ($2112|0)!=(0);
   $2114 = $26;
   $2115 = ($2114|0)!=(0);
   $or$cond35 = $2113 | $2115;
   $2116 = $6;
   if (!($or$cond35)) {
    $2117 = (__lou_findOpcodeName(54)|0);
    $2118 = (__lou_findOpcodeName(53)|0);
    HEAP32[$vararg_buffer128>>2] = $2117;
    $vararg_ptr131 = ((($vararg_buffer128)) + 4|0);
    HEAP32[$vararg_ptr131>>2] = $2118;
    _compileError($2116,5278,$vararg_buffer128);
    $12 = 0;
    break;
   }
   $2119 = $14;
   $2120 = $7;
   $2121 = $8;
   $2122 = $26;
   $2123 = $27;
   $2124 = $9;
   $2125 = (_compilePassOpcode($2116,$2119,$2120,$2121,$2122,$2123,$2124)|0);
   $2126 = ($2125|0)!=(0);
   if (!($2126)) {
    $12 = 0;
   }
  }
 } while(0);
 $2436 = $23;
 $2437 = ($2436|0)!=(0|0);
 if ($2437) {
  $2438 = $23;
  _free($2438);
 }
 $2439 = $12;
 $5 = $2439;
 $2440 = $5;
 STACKTOP = sp;return ($2440|0);
}
function _getToken($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $10 = $5;
  $11 = (_atEndOfLine($10)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   break;
  }
  $13 = $5;
  $14 = (_atTokenDelimiter($13)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
 }
 $20 = $6;
 HEAP16[$20>>1] = 0;
 while(1) {
  $21 = $5;
  $22 = (_atEndOfLine($21)|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   break;
  }
  $24 = $5;
  $25 = (_atTokenDelimiter($24)|0);
  $26 = ($25|0)!=(0);
  $27 = $26 ^ 1;
  if (!($27)) {
   break;
  }
  $9 = 2048;
  $28 = $6;
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $9;
  $32 = ($30|0)>=($31|0);
  $33 = $5;
  if ($32) {
   label = 9;
   break;
  }
  $35 = ((($33)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$35>>2] = $37;
  $38 = $5;
  $39 = ((($38)) + 36|0);
  $40 = (($39) + ($36<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $6;
  $43 = HEAP16[$42>>1]|0;
  $44 = (($43) + 1)<<16>>16;
  HEAP16[$42>>1] = $44;
  $45 = $43&65535;
  $46 = $6;
  $47 = ((($46)) + 2|0);
  $48 = (($47) + ($45<<1)|0);
  HEAP16[$48>>1] = $41;
 }
 if ((label|0) == 9) {
  $34 = $9;
  HEAP32[$vararg_buffer>>2] = $34;
  _compileError($33,5483,$vararg_buffer);
  $4 = 0;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $49 = $6;
 $50 = HEAP16[$49>>1]|0;
 $51 = ($50<<16>>16)!=(0);
 if (!($51)) {
  $52 = $7;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = $5;
   $55 = $7;
   HEAP32[$vararg_buffer2>>2] = $55;
   _compileError($54,5515,$vararg_buffer2);
  }
  $4 = 0;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $56 = $6;
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = $6;
 $60 = ((($59)) + 2|0);
 $61 = (($60) + ($58<<1)|0);
 HEAP16[$61>>1] = 0;
 while(1) {
  $62 = $5;
  $63 = (_atEndOfLine($62)|0);
  $64 = ($63|0)!=(0);
  if ($64) {
   $77 = 0;
  } else {
   $65 = $5;
   $66 = (_atTokenDelimiter($65)|0);
   $67 = ($66|0)!=(0);
   $77 = $67;
  }
  $68 = $5;
  if (!($77)) {
   break;
  }
  $69 = ((($68)) + 24|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
 }
 $72 = (_atEndOfLine($68)|0);
 $73 = $8;
 HEAP32[$73>>2] = $72;
 $74 = ($72|0)!=(0);
 $75 = $74 ? 2 : 1;
 $4 = $75;
 $76 = $4;
 STACKTOP = sp;return ($76|0);
}
function _eqasc2uni($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $7;
  $12 = $4;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15&65535;
  $17 = $7;
  $18 = $5;
  $19 = (($18) + ($17<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = ($16|0)!=($21|0);
  if ($22) {
   label = 4;
   break;
  }
  $23 = $7;
  $24 = (($23) + 1)|0;
  $7 = $24;
 }
 if ((label|0) == 4) {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $3 = 1;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _compileHyphenation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10320|0);
 $8 = sp + 4168|0;
 $11 = sp + 70|0;
 $12 = sp + 8266|0;
 $21 = sp + 8|0;
 $22 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = 0;
 $14 = 0;
 $23 = $5;
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $17 = $25;
 $26 = $4;
 $27 = $7;
 (_allocateSpaceInTranslationTable($26,0,250000,$27)|0);
 $28 = (_hyphenHashNew()|0);
 $10 = $28;
 HEAP32[$21>>2] = 1;
 $29 = (_malloc(12)|0);
 $30 = ((($21)) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($21)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  __lou_outOfMemory();
 }
 $34 = ((($21)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($21)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 8|0);
 HEAP16[$39>>1] = -1;
 $40 = ((($21)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 10|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($21)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$44>>2] = 0;
 while(1) {
  $45 = $5;
  $46 = ((($45)) + 2|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = ($48|0)==(73);
  $50 = $4;
  $51 = $6;
  if ($49) {
   $52 = (_getToken($50,$8,0,$51)|0);
   $53 = ($52|0)!=(0);
   if ($53) {
    label = 8;
   }
  } else {
   $54 = (_getToken($50,$11,0,$51)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $4;
    (_parseChars($56,$8,$11)|0);
    label = 8;
   }
  }
  L10: do {
   if ((label|0) == 8) {
    label = 0;
    $57 = HEAP16[$8>>1]|0;
    $58 = $57&65535;
    $59 = ($58|0)==(0);
    if (!($59)) {
     $60 = ((($8)) + 2|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = ($62|0)==(35);
     if (!($63)) {
      $64 = ((($8)) + 2|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65&65535;
      $67 = ($66|0)==(37);
      if (!($67)) {
       $68 = ((($8)) + 2|0);
       $69 = HEAP16[$68>>1]|0;
       $70 = $69&65535;
       $71 = ($70|0)==(60);
       if (!($71)) {
        $16 = 0;
        $72 = $16;
        $73 = (($12) + ($72)|0);
        HEAP8[$73>>0] = 48;
        $15 = 0;
        while(1) {
         $74 = $15;
         $75 = HEAP16[$8>>1]|0;
         $76 = $75&65535;
         $77 = ($74|0)<($76|0);
         if (!($77)) {
          break;
         }
         $78 = $15;
         $79 = ((($8)) + 2|0);
         $80 = (($79) + ($78<<1)|0);
         $81 = HEAP16[$80>>1]|0;
         $82 = $81&65535;
         $83 = ($82|0)>=(48);
         if ($83) {
          $84 = $15;
          $85 = ((($8)) + 2|0);
          $86 = (($85) + ($84<<1)|0);
          $87 = HEAP16[$86>>1]|0;
          $88 = $87&65535;
          $89 = ($88|0)<=(57);
          if ($89) {
           $90 = $15;
           $91 = ((($8)) + 2|0);
           $92 = (($91) + ($90<<1)|0);
           $93 = HEAP16[$92>>1]|0;
           $94 = $93&255;
           $95 = $16;
           $96 = (($12) + ($95)|0);
           HEAP8[$96>>0] = $94;
          } else {
           label = 17;
          }
         } else {
          label = 17;
         }
         if ((label|0) == 17) {
          label = 0;
          $97 = $15;
          $98 = ((($8)) + 2|0);
          $99 = (($98) + ($97<<1)|0);
          $100 = HEAP16[$99>>1]|0;
          $101 = $16;
          $102 = ((($11)) + 2|0);
          $103 = (($102) + ($101<<1)|0);
          HEAP16[$103>>1] = $100;
          $104 = $16;
          $105 = (($104) + 1)|0;
          $16 = $105;
          $106 = (($12) + ($105)|0);
          HEAP8[$106>>0] = 48;
         }
         $107 = $15;
         $108 = (($107) + 1)|0;
         $15 = $108;
        }
        $109 = $16;
        $110 = ((($11)) + 2|0);
        $111 = (($110) + ($109<<1)|0);
        HEAP16[$111>>1] = 0;
        $112 = $16;
        $113 = $112&65535;
        HEAP16[$11>>1] = $113;
        $114 = $16;
        $115 = (($114) + 1)|0;
        $116 = (($12) + ($115)|0);
        HEAP8[$116>>0] = 0;
        $15 = 0;
        while(1) {
         $117 = $15;
         $118 = (($12) + ($117)|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = $119 << 24 >> 24;
         $121 = ($120|0)==(48);
         if (!($121)) {
          break;
         }
         $122 = $15;
         $123 = (($122) + 1)|0;
         $15 = $123;
        }
        $124 = $10;
        $125 = (_hyphenHashLookup($124,$11)|0);
        $19 = $125;
        $126 = $19;
        $127 = ($126|0)!=(65535);
        if ($127) {
         $128 = $19;
         $13 = $128;
        } else {
         $129 = $10;
         $130 = (_hyphenGetNewState($21,$129,$11)|0);
         $13 = $130;
        }
        $131 = $16;
        $132 = (($131) + 2)|0;
        $133 = $15;
        $134 = (($132) - ($133))|0;
        $17 = $134;
        $135 = $17;
        $136 = ($135|0)>(0);
        if ($136) {
         $137 = $4;
         $138 = $13;
         $139 = ((($21)) + 4|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = (($140) + (($138*12)|0)|0);
         $142 = ((($141)) + 4|0);
         $143 = $17;
         $144 = $7;
         (_allocateSpaceInTranslationTable($137,$142,$143,$144)|0);
         $145 = $13;
         $146 = ((($21)) + 4|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = (($147) + (($145*12)|0)|0);
         $149 = ((($148)) + 4|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = $7;
         $152 = HEAP32[$151>>2]|0;
         $153 = ((($152)) + 21088|0);
         $154 = (($153) + ($150<<3)|0);
         $155 = $15;
         $156 = (($12) + ($155)|0);
         $157 = $17;
         _memcpy(($154|0),($156|0),($157|0))|0;
        }
        while(1) {
         $158 = $19;
         $159 = ($158|0)==(65535);
         if (!($159)) {
          break L10;
         }
         $160 = $13;
         $14 = $160;
         $161 = HEAP16[$11>>1]|0;
         $162 = (($161) + -1)<<16>>16;
         HEAP16[$11>>1] = $162;
         $163 = $161&65535;
         $164 = (($163) - 1)|0;
         $165 = ((($11)) + 2|0);
         $166 = (($165) + ($164<<1)|0);
         $167 = HEAP16[$166>>1]|0;
         $18 = $167;
         $168 = $10;
         $169 = (_hyphenHashLookup($168,$11)|0);
         $19 = $169;
         $170 = $19;
         $171 = ($170|0)!=(65535);
         if ($171) {
          $172 = $19;
          $13 = $172;
         } else {
          $173 = $10;
          $174 = (_hyphenGetNewState($21,$173,$11)|0);
          $13 = $174;
         }
         $175 = $13;
         $176 = $14;
         $177 = $18;
         _hyphenAddTrans($21,$175,$176,$177);
        }
       }
      }
     }
    }
   }
  } while(0);
  $178 = $4;
  $179 = (__lou_getALine($178)|0);
  $180 = ($179|0)!=(0);
  if (!($180)) {
   break;
  }
 }
 $15 = 0;
 while(1) {
  $181 = $15;
  $182 = ($181|0)<(8191);
  if (!($182)) {
   break;
  }
  $183 = $15;
  $184 = $10;
  $185 = (($184) + ($183<<2)|0);
  $186 = HEAP32[$185>>2]|0;
  $20 = $186;
  while(1) {
   $187 = $20;
   $188 = ($187|0)!=(0|0);
   if (!($188)) {
    break;
   }
   $16 = 1;
   while(1) {
    $189 = $16;
    $190 = $20;
    $191 = ((($190)) + 4|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = HEAP16[$192>>1]|0;
    $194 = $193&65535;
    $195 = ($189|0)<=($194|0);
    if (!($195)) {
     break;
    }
    HEAP16[$11>>1] = 0;
    $196 = $16;
    $17 = $196;
    while(1) {
     $197 = $17;
     $198 = $20;
     $199 = ((($198)) + 4|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = HEAP16[$200>>1]|0;
     $202 = $201&65535;
     $203 = ($197|0)<($202|0);
     if (!($203)) {
      break;
     }
     $204 = $17;
     $205 = $20;
     $206 = ((($205)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($207)) + 2|0);
     $209 = (($208) + ($204<<1)|0);
     $210 = HEAP16[$209>>1]|0;
     $211 = HEAP16[$11>>1]|0;
     $212 = (($211) + 1)<<16>>16;
     HEAP16[$11>>1] = $212;
     $213 = $211&65535;
     $214 = ((($11)) + 2|0);
     $215 = (($214) + ($213<<1)|0);
     HEAP16[$215>>1] = $210;
     $216 = $17;
     $217 = (($216) + 1)|0;
     $17 = $217;
    }
    $218 = $10;
    $219 = (_hyphenHashLookup($218,$11)|0);
    $13 = $219;
    $220 = $13;
    $221 = ($220|0)!=(65535);
    if ($221) {
     break;
    }
    $222 = $16;
    $223 = (($222) + 1)|0;
    $16 = $223;
   }
   $224 = $20;
   $225 = ((($224)) + 8|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = ($226|0)!=(0);
   if ($227) {
    $228 = $13;
    $229 = $228&65535;
    $230 = $20;
    $231 = ((($230)) + 8|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ((($21)) + 4|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + (($232*12)|0)|0);
    $236 = ((($235)) + 8|0);
    HEAP16[$236>>1] = $229;
   }
   $237 = $20;
   $238 = HEAP32[$237>>2]|0;
   $20 = $238;
  }
  $239 = $15;
  $240 = (($239) + 1)|0;
  $15 = $240;
 }
 $241 = $10;
 _hyphenHashFree($241);
 $15 = 0;
 while(1) {
  $242 = $15;
  $243 = HEAP32[$21>>2]|0;
  $244 = ($242|0)<($243|0);
  if (!($244)) {
   break;
  }
  $245 = $15;
  $246 = ((($21)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + (($245*12)|0)|0);
  $249 = ((($248)) + 10|0);
  $250 = HEAP16[$249>>1]|0;
  $251 = $250&65535;
  $252 = ($251|0)==(0);
  $253 = $15;
  $254 = ((($21)) + 4|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($255) + (($253*12)|0)|0);
  if ($252) {
   HEAP32[$256>>2] = 0;
  } else {
   $257 = HEAP32[$256>>2]|0;
   $9 = $257;
   $258 = $4;
   $259 = $15;
   $260 = ((($21)) + 4|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (($261) + (($259*12)|0)|0);
   $263 = $15;
   $264 = ((($21)) + 4|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = (($265) + (($263*12)|0)|0);
   $267 = ((($266)) + 10|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = $268&65535;
   $270 = $269<<2;
   $271 = $7;
   (_allocateSpaceInTranslationTable($258,$262,$270,$271)|0);
   $272 = $15;
   $273 = ((($21)) + 4|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = (($274) + (($272*12)|0)|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $7;
   $278 = HEAP32[$277>>2]|0;
   $279 = ((($278)) + 21088|0);
   $280 = (($279) + ($276<<3)|0);
   $281 = $9;
   $282 = $15;
   $283 = ((($21)) + 4|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (($284) + (($282*12)|0)|0);
   $286 = ((($285)) + 10|0);
   $287 = HEAP16[$286>>1]|0;
   $288 = $287&65535;
   $289 = $288<<2;
   _memcpy(($280|0),($281|0),($289|0))|0;
   $290 = $9;
   _free($290);
  }
  $291 = $15;
  $292 = (($291) + 1)|0;
  $15 = $292;
 }
 $293 = $4;
 $294 = HEAP32[$21>>2]|0;
 $295 = ($294*12)|0;
 $296 = $7;
 (_allocateSpaceInTranslationTable($293,$22,$295,$296)|0);
 $297 = HEAP32[$22>>2]|0;
 $298 = $7;
 $299 = HEAP32[$298>>2]|0;
 $300 = ((($299)) + 1072|0);
 HEAP32[$300>>2] = $297;
 $301 = $7;
 $302 = HEAP32[$301>>2]|0;
 $303 = ((($302)) + 1072|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = $7;
 $306 = HEAP32[$305>>2]|0;
 $307 = ((($306)) + 21088|0);
 $308 = (($307) + ($304<<3)|0);
 $309 = ((($21)) + 4|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = HEAP32[$21>>2]|0;
 $312 = ($311*12)|0;
 _memcpy(($308|0),($310|0),($312|0))|0;
 $313 = ((($21)) + 4|0);
 $314 = HEAP32[$313>>2]|0;
 _free($314);
 STACKTOP = sp;return 1;
}
function _getOpcode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[3715]|0;
 $5 = $6;
 while(1) {
  $7 = $4;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $5;
  $11 = (15724 + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($9|0)==($13|0);
  if ($14) {
   $15 = $5;
   $16 = (200 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $4;
   $19 = ((($18)) + 2|0);
   $20 = $4;
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   $23 = (_eqasc2uni($17,$19,$22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    label = 4;
    break;
   }
  }
  $27 = $5;
  $28 = (($27) + 1)|0;
  $5 = $28;
  $29 = $5;
  $30 = ($29>>>0)>=(114);
  $$ = $30 ? 0 : $28;
  $5 = $$;
  $31 = $5;
  $32 = HEAP32[3715]|0;
  $33 = ($31|0)!=($32|0);
  if (!($33)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $25 = $5;
  HEAP32[3715] = $25;
  $26 = $5;
  $2 = $26;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $34 = $3;
  $35 = $4;
  $36 = ((($35)) + 2|0);
  $37 = $4;
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = (__lou_showString($36,$39,0)|0);
  HEAP32[$vararg_buffer>>2] = $40;
  _compileError($34,5533,$vararg_buffer);
  $2 = 114;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _includeFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $13 = $9;
  $14 = $6;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($13|0)<($16|0);
  $18 = $9;
  if (!($17)) {
   break;
  }
  $19 = $6;
  $20 = ((($19)) + 2|0);
  $21 = (($20) + ($18<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&255;
  $24 = $9;
  $25 = (($10) + ($24)|0);
  HEAP8[$25>>0] = $23;
  $26 = $9;
  $27 = (($26) + 1)|0;
  $9 = $27;
 }
 $28 = ($18|0)>=(2048);
 if ($28) {
  $29 = $5;
  HEAP32[$vararg_buffer>>2] = $10;
  _compileError($29,5556,$vararg_buffer);
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $30 = $9;
 $31 = (($10) + ($30)|0);
 HEAP8[$31>>0] = 0;
 $32 = $5;
 $33 = HEAP32[$32>>2]|0;
 $34 = (__lou_resolveTable($10,$33)|0);
 $11 = $34;
 $35 = $11;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = HEAP32[2640]|0;
  $38 = (($37) + 1)|0;
  HEAP32[2640] = $38;
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $39 = $11;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 $43 = $11;
 if ($42) {
  _free_tablefiles($43);
  $44 = $5;
  HEAP32[$vararg_buffer1>>2] = $10;
  _compileError($44,5597,$vararg_buffer1);
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 } else {
  $45 = HEAP32[$43>>2]|0;
  $46 = $7;
  $47 = $8;
  $48 = (_compileFile($45,$46,$47)|0);
  $12 = $48;
  $49 = $11;
  _free_tablefiles($49);
  $50 = $12;
  $4 = $50;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _compileCharDef($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8272|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $14 = sp;
 $22 = sp + 4170|0;
 $23 = sp + 72|0;
 $12 = $0;
 $13 = $1;
 $27 = $14;
 $28 = $27;
 HEAP32[$28>>2] = $2;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $31 = $12;
 $32 = $15;
 $33 = (_getRuleCharsText($31,$22,$32)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $11 = 0;
  $177 = $11;
  STACKTOP = sp;return ($177|0);
 }
 $35 = $12;
 $36 = $15;
 $37 = (_getRuleDotsPattern($35,$23,$36)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $11 = 0;
  $177 = $11;
  STACKTOP = sp;return ($177|0);
 }
 $39 = HEAP16[$22>>1]|0;
 $40 = $39&65535;
 $41 = ($40|0)!=(1);
 if ($41) {
  $42 = $12;
  _compileError($42,5657,$vararg_buffer);
  $11 = 0;
  $177 = $11;
  STACKTOP = sp;return ($177|0);
 }
 $43 = HEAP16[$23>>1]|0;
 $44 = $43&65535;
 $45 = ($44|0)<(1);
 if ($45) {
  $46 = $12;
  _compileError($46,5692,$vararg_buffer1);
  $11 = 0;
  $177 = $11;
  STACKTOP = sp;return ($177|0);
 }
 $47 = $20;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $25 = 0;
  $49 = $14;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $51 & 48;
  $56 = ($55|0)!=(0);
  $57 = (0)!=(0);
  $58 = $56 | $57;
  if ($58) {
   $59 = $14;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = $61 | 2;
   $66 = $14;
   $67 = $66;
   HEAP32[$67>>2] = $65;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $64;
  }
  $70 = $12;
  $71 = ((($22)) + 2|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $20;
  $74 = (_addCharOrDots($70,$72,0,$73)|0);
  $24 = $74;
  $75 = $14;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $24;
  $82 = ((($81)) + 16|0);
  $83 = $82;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = $85 | $77;
  $90 = $88 | $80;
  $91 = $82;
  $92 = $91;
  HEAP32[$92>>2] = $89;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
  $95 = $24;
  $96 = ((($95)) + 24|0);
  $97 = HEAP16[$96>>1]|0;
  $98 = $24;
  $99 = ((($98)) + 28|0);
  HEAP16[$99>>1] = $97;
  $100 = $24;
  $101 = ((($100)) + 26|0);
  HEAP16[$101>>1] = $97;
  $102 = HEAP16[$23>>1]|0;
  $103 = $102&65535;
  $104 = (($103) - 1)|0;
  $26 = $104;
  while(1) {
   $105 = $26;
   $106 = ($105|0)>=(0);
   if (!($106)) {
    break;
   }
   $107 = $26;
   $108 = ((($23)) + 2|0);
   $109 = (($108) + ($107<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $20;
   $112 = HEAP32[$111>>2]|0;
   $113 = (_compile_findCharOrDots($110,1,$112)|0);
   $25 = $113;
   $114 = $25;
   $115 = ($114|0)!=(0|0);
   if (!($115)) {
    $116 = $12;
    $117 = $26;
    $118 = ((($23)) + 2|0);
    $119 = (($118) + ($117<<1)|0);
    $120 = HEAP16[$119>>1]|0;
    $121 = $20;
    $122 = (_addCharOrDots($116,$120,1,$121)|0);
    $25 = $122;
    $123 = $25;
    $124 = ((($123)) + 24|0);
    $125 = HEAP16[$124>>1]|0;
    $126 = $25;
    $127 = ((($126)) + 28|0);
    HEAP16[$127>>1] = $125;
    $128 = $25;
    $129 = ((($128)) + 26|0);
    HEAP16[$129>>1] = $125;
   }
   $130 = $26;
   $131 = (($130) - 1)|0;
   $26 = $131;
  }
  $132 = HEAP16[$23>>1]|0;
  $133 = $132&65535;
  $134 = ($133|0)==(1);
  if ($134) {
   $135 = $14;
   $136 = $135;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($135) + 4)|0;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = $25;
   $142 = ((($141)) + 16|0);
   $143 = $142;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = $145 | $137;
   $150 = $148 | $140;
   $151 = $142;
   $152 = $151;
   HEAP32[$152>>2] = $149;
   $153 = (($151) + 4)|0;
   $154 = $153;
   HEAP32[$154>>2] = $150;
  }
 }
 $155 = $21;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = HEAP16[$23>>1]|0;
  $158 = $157&65535;
  $159 = ($158|0)==(1);
  if ($159) {
   $160 = $12;
   $161 = ((($22)) + 2|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = ((($23)) + 2|0);
   $164 = HEAP16[$163>>1]|0;
   $165 = $21;
   (_putCharAndDots($160,$162,$164,$165)|0);
  }
 }
 $166 = $20;
 $167 = ($166|0)!=(0|0);
 if ($167) {
  $168 = $12;
  $169 = $13;
  $170 = $16;
  $171 = $17;
  $172 = $18;
  $173 = $19;
  $174 = $20;
  $175 = (_addRule($168,$169,$22,$23,0,0,0,0,$170,$171,$172,$173,$174)|0);
  $176 = ($175|0)!=(0);
  if (!($176)) {
   $11 = 0;
   $177 = $11;
   STACKTOP = sp;return ($177|0);
  }
 }
 $11 = 1;
 $177 = $11;
 STACKTOP = sp;return ($177|0);
}
function _compileGrouping($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16464|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $18 = sp + 12358|0;
 $19 = sp + 8260|0;
 $20 = sp + 4162|0;
 $21 = sp + 64|0;
 $22 = sp + 16|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $26 = $9;
 $27 = $10;
 $28 = (_getToken($26,$18,5723,$27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $8 = 0;
  $245 = $8;
  STACKTOP = sp;return ($245|0);
 }
 $30 = $9;
 $31 = $10;
 $32 = (_getRuleCharsText($30,$19,$31)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $8 = 0;
  $245 = $8;
  STACKTOP = sp;return ($245|0);
 }
 $34 = $9;
 $35 = $10;
 $36 = (_getToken($34,$20,5736,$35)|0);
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $8 = 0;
  $245 = $8;
  STACKTOP = sp;return ($245|0);
 }
 $17 = 0;
 while(1) {
  $38 = $17;
  $39 = HEAP16[$20>>1]|0;
  $40 = $39&65535;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $17;
  $43 = ((($20)) + 2|0);
  $44 = (($43) + ($42<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = ($46|0)!=(44);
  if (!($47)) {
   break;
  }
  $48 = $17;
  $49 = (($48) + 1)|0;
  $17 = $49;
 }
 $50 = $17;
 $51 = HEAP16[$20>>1]|0;
 $52 = $51&65535;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = $9;
  _compileError($54,5749,$vararg_buffer);
  $8 = 0;
  $245 = $8;
  STACKTOP = sp;return ($245|0);
 }
 $55 = $17;
 $56 = ((($20)) + 2|0);
 $57 = (($56) + ($55<<1)|0);
 HEAP16[$57>>1] = 45;
 $58 = $9;
 $59 = (_parseDots($58,$21,$20)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $8 = 0;
  $245 = $8;
  STACKTOP = sp;return ($245|0);
 }
 $61 = HEAP16[$19>>1]|0;
 $62 = $61&65535;
 $63 = ($62|0)!=(2);
 if (!($63)) {
  $64 = HEAP16[$21>>1]|0;
  $65 = $64&65535;
  $66 = ($65|0)!=(2);
  if (!($66)) {
   $68 = $15;
   $69 = ($68|0)!=(0|0);
   do {
    if ($69) {
     $70 = $9;
     $71 = ((($19)) + 2|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $15;
     $74 = (_addCharOrDots($70,$72,0,$73)|0);
     $23 = $74;
     $75 = $23;
     $76 = ((($75)) + 16|0);
     $77 = $76;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $79 | 64;
     $84 = $76;
     $85 = $84;
     HEAP32[$85>>2] = $83;
     $86 = (($84) + 4)|0;
     $87 = $86;
     HEAP32[$87>>2] = $82;
     $88 = $23;
     $89 = ((($88)) + 24|0);
     $90 = HEAP16[$89>>1]|0;
     $91 = $23;
     $92 = ((($91)) + 26|0);
     HEAP16[$92>>1] = $90;
     $93 = $23;
     $94 = ((($93)) + 24|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = $23;
     $97 = ((($96)) + 28|0);
     HEAP16[$97>>1] = $95;
     $98 = $9;
     $99 = ((($19)) + 2|0);
     $100 = ((($99)) + 2|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $15;
     $103 = (_addCharOrDots($98,$101,0,$102)|0);
     $23 = $103;
     $104 = $23;
     $105 = ((($104)) + 16|0);
     $106 = $105;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (($106) + 4)|0;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = $108 | 64;
     $113 = $105;
     $114 = $113;
     HEAP32[$114>>2] = $112;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $111;
     $117 = $23;
     $118 = ((($117)) + 24|0);
     $119 = HEAP16[$118>>1]|0;
     $120 = $23;
     $121 = ((($120)) + 26|0);
     HEAP16[$121>>1] = $119;
     $122 = $23;
     $123 = ((($122)) + 24|0);
     $124 = HEAP16[$123>>1]|0;
     $125 = $23;
     $126 = ((($125)) + 28|0);
     HEAP16[$126>>1] = $124;
     $127 = $9;
     $128 = ((($21)) + 2|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = $15;
     $131 = (_addCharOrDots($127,$129,1,$130)|0);
     $23 = $131;
     $132 = $23;
     $133 = ((($132)) + 16|0);
     $134 = $133;
     $135 = $134;
     $136 = HEAP32[$135>>2]|0;
     $137 = (($134) + 4)|0;
     $138 = $137;
     $139 = HEAP32[$138>>2]|0;
     $140 = $136 | 64;
     $141 = $133;
     $142 = $141;
     HEAP32[$142>>2] = $140;
     $143 = (($141) + 4)|0;
     $144 = $143;
     HEAP32[$144>>2] = $139;
     $145 = $23;
     $146 = ((($145)) + 24|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $23;
     $149 = ((($148)) + 26|0);
     HEAP16[$149>>1] = $147;
     $150 = $23;
     $151 = ((($150)) + 24|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $23;
     $154 = ((($153)) + 28|0);
     HEAP16[$154>>1] = $152;
     $155 = $9;
     $156 = ((($21)) + 2|0);
     $157 = ((($156)) + 2|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $15;
     $160 = (_addCharOrDots($155,$158,1,$159)|0);
     $23 = $160;
     $161 = $23;
     $162 = ((($161)) + 16|0);
     $163 = $162;
     $164 = $163;
     $165 = HEAP32[$164>>2]|0;
     $166 = (($163) + 4)|0;
     $167 = $166;
     $168 = HEAP32[$167>>2]|0;
     $169 = $165 | 64;
     $170 = $162;
     $171 = $170;
     HEAP32[$171>>2] = $169;
     $172 = (($170) + 4)|0;
     $173 = $172;
     HEAP32[$173>>2] = $168;
     $174 = $23;
     $175 = ((($174)) + 24|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = $23;
     $178 = ((($177)) + 26|0);
     HEAP16[$178>>1] = $176;
     $179 = $23;
     $180 = ((($179)) + 24|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $23;
     $183 = ((($182)) + 28|0);
     HEAP16[$183>>1] = $181;
     $184 = $9;
     $185 = $12;
     $186 = $13;
     $187 = $14;
     $188 = $15;
     $189 = (_addRule($184,68,$19,$21,0,0,0,0,$22,$185,$186,$187,$188)|0);
     $190 = ($189|0)!=(0);
     if (!($190)) {
      $8 = 0;
      $245 = $8;
      STACKTOP = sp;return ($245|0);
     }
     $191 = $9;
     $192 = HEAP32[$22>>2]|0;
     $193 = $15;
     $194 = HEAP32[$193>>2]|0;
     $195 = (_addRuleName($191,$18,$192,$194)|0);
     $196 = ($195|0)!=(0);
     if ($196) {
      $197 = $11;
      $198 = ($197|0)!=(0|0);
      if (!($198)) {
       break;
      }
      $199 = HEAP32[$22>>2]|0;
      $200 = $11;
      HEAP32[$200>>2] = $199;
      break;
     } else {
      $8 = 0;
      $245 = $8;
      STACKTOP = sp;return ($245|0);
     }
    }
   } while(0);
   $201 = $16;
   $202 = ($201|0)!=(0|0);
   if ($202) {
    $203 = $9;
    $204 = ((($19)) + 2|0);
    $205 = HEAP16[$204>>1]|0;
    $206 = ((($21)) + 2|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $16;
    (_putCharAndDots($203,$205,$207,$208)|0);
    $209 = $9;
    $210 = ((($19)) + 2|0);
    $211 = ((($210)) + 2|0);
    $212 = HEAP16[$211>>1]|0;
    $213 = ((($21)) + 2|0);
    $214 = ((($213)) + 2|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = $16;
    (_putCharAndDots($209,$212,$215,$216)|0);
   }
   $217 = $15;
   $218 = ($217|0)!=(0|0);
   if ($218) {
    $219 = ((($19)) + 2|0);
    $220 = ((($219)) + 2|0);
    $221 = HEAP16[$220>>1]|0;
    $24 = $221;
    $222 = ((($21)) + 2|0);
    $223 = ((($222)) + 2|0);
    $224 = HEAP16[$223>>1]|0;
    $25 = $224;
    HEAP16[$21>>1] = 1;
    HEAP16[$19>>1] = 1;
    $225 = $9;
    $226 = $11;
    $227 = $12;
    $228 = $13;
    $229 = $14;
    $230 = $15;
    $231 = (_addRule($225,63,$19,$21,0,0,0,0,$226,$227,$228,$229,$230)|0);
    $232 = ($231|0)!=(0);
    if (!($232)) {
     $8 = 0;
     $245 = $8;
     STACKTOP = sp;return ($245|0);
    }
    $233 = $24;
    $234 = ((($19)) + 2|0);
    HEAP16[$234>>1] = $233;
    $235 = $25;
    $236 = ((($21)) + 2|0);
    HEAP16[$236>>1] = $235;
    $237 = $9;
    $238 = $11;
    $239 = $12;
    $240 = $13;
    $241 = $14;
    $242 = $15;
    $243 = (_addRule($237,63,$19,$21,0,0,0,0,$238,$239,$240,$241,$242)|0);
    $244 = ($243|0)!=(0);
    if (!($244)) {
     $8 = 0;
     $245 = $8;
     STACKTOP = sp;return ($245|0);
    }
   }
   $8 = 1;
   $245 = $8;
   STACKTOP = sp;return ($245|0);
  }
 }
 $67 = $9;
 _compileError($67,5809,$vararg_buffer1);
 $8 = 0;
 $245 = $8;
 STACKTOP = sp;return ($245|0);
}
function _compileUplow($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16480|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $22 = sp + 12374|0;
 $23 = sp + 8276|0;
 $24 = sp + 4178|0;
 $25 = sp + 80|0;
 $27 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $20 = 0;
 $21 = 0;
 $26 = 0;
 $28 = $9;
 $29 = $10;
 $30 = (_getRuleCharsText($28,$22,$29)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $8 = 0;
  $357 = $8;
  STACKTOP = sp;return ($357|0);
 }
 $32 = $9;
 $33 = $10;
 $34 = (_getToken($32,$23,5736,$33)|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $8 = 0;
  $357 = $8;
  STACKTOP = sp;return ($357|0);
 }
 $17 = 0;
 while(1) {
  $36 = $17;
  $37 = HEAP16[$23>>1]|0;
  $38 = $37&65535;
  $39 = ($36|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $17;
  $41 = ((($23)) + 2|0);
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = ($44|0)!=(44);
  if (!($45)) {
   break;
  }
  $46 = $17;
  $47 = (($46) + 1)|0;
  $17 = $47;
 }
 $48 = $17;
 $49 = HEAP16[$23>>1]|0;
 $50 = $49&65535;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = $9;
  $53 = (_parseDots($52,$24,$23)|0);
  $54 = ($53|0)!=(0);
  if (!($54)) {
   $8 = 0;
   $357 = $8;
   STACKTOP = sp;return ($357|0);
  }
  $55 = HEAP16[$24>>1]|0;
  HEAP16[$25>>1] = $55;
  $17 = 0;
  while(1) {
   $56 = $17;
   $57 = HEAP16[$24>>1]|0;
   $58 = $57&65535;
   $59 = ($56|0)<($58|0);
   $60 = $17;
   if (!($59)) {
    break;
   }
   $61 = ((($24)) + 2|0);
   $62 = (($61) + ($60<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $17;
   $65 = ((($25)) + 2|0);
   $66 = (($65) + ($64<<1)|0);
   HEAP16[$66>>1] = $63;
   $67 = $17;
   $68 = (($67) + 1)|0;
   $17 = $68;
  }
  $69 = ((($25)) + 2|0);
  $70 = (($69) + ($60<<1)|0);
  HEAP16[$70>>1] = 0;
 } else {
  $71 = HEAP16[$23>>1]|0;
  $72 = $71&65535;
  $26 = $72;
  $73 = $17;
  $74 = $73&65535;
  HEAP16[$23>>1] = $74;
  $75 = $9;
  $76 = (_parseDots($75,$24,$23)|0);
  $77 = ($76|0)!=(0);
  if (!($77)) {
   $8 = 0;
   $357 = $8;
   STACKTOP = sp;return ($357|0);
  }
  HEAP16[$23>>1] = 0;
  $78 = $17;
  $79 = (($78) + 1)|0;
  $17 = $79;
  while(1) {
   $80 = $17;
   $81 = $26;
   $82 = ($80|0)<($81|0);
   if (!($82)) {
    break;
   }
   $83 = $17;
   $84 = ((($23)) + 2|0);
   $85 = (($84) + ($83<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = HEAP16[$23>>1]|0;
   $88 = (($87) + 1)<<16>>16;
   HEAP16[$23>>1] = $88;
   $89 = $87&65535;
   $90 = ((($23)) + 2|0);
   $91 = (($90) + ($89<<1)|0);
   HEAP16[$91>>1] = $86;
   $92 = $17;
   $93 = (($92) + 1)|0;
   $17 = $93;
  }
  $94 = $9;
  $95 = (_parseDots($94,$25,$23)|0);
  $96 = ($95|0)!=(0);
  if (!($96)) {
   $8 = 0;
   $357 = $8;
   STACKTOP = sp;return ($357|0);
  }
 }
 $97 = HEAP16[$22>>1]|0;
 $98 = $97&65535;
 $99 = ($98|0)!=(2);
 if (!($99)) {
  $100 = HEAP16[$24>>1]|0;
  $101 = $100&65535;
  $102 = ($101|0)<(1);
  if (!($102)) {
   $104 = $26;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = HEAP16[$25>>1]|0;
    $107 = $106&65535;
    $108 = ($107|0)<(1);
    if ($108) {
     $109 = $9;
     _compileError($109,5996,$vararg_buffer1);
     $8 = 0;
     $357 = $8;
     STACKTOP = sp;return ($357|0);
    }
   }
   $110 = $15;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = $9;
    $113 = ((($22)) + 2|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = $15;
    $116 = (_addCharOrDots($112,$114,0,$115)|0);
    $18 = $116;
    $117 = $18;
    $118 = ((($117)) + 16|0);
    $119 = $118;
    $120 = $119;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 4)|0;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = $121 | 18;
    $126 = $118;
    $127 = $126;
    HEAP32[$127>>2] = $125;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = ((($22)) + 2|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $18;
    $133 = ((($132)) + 26|0);
    HEAP16[$133>>1] = $131;
    $134 = ((($22)) + 2|0);
    $135 = ((($134)) + 2|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $18;
    $138 = ((($137)) + 28|0);
    HEAP16[$138>>1] = $136;
    $139 = $9;
    $140 = ((($22)) + 2|0);
    $141 = ((($140)) + 2|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = $15;
    $144 = (_addCharOrDots($139,$142,0,$143)|0);
    $19 = $144;
    $145 = $19;
    $146 = ((($145)) + 16|0);
    $147 = $146;
    $148 = $147;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($147) + 4)|0;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = $149 | 34;
    $154 = $146;
    $155 = $154;
    HEAP32[$155>>2] = $153;
    $156 = (($154) + 4)|0;
    $157 = $156;
    HEAP32[$157>>2] = $152;
    $158 = ((($22)) + 2|0);
    $159 = HEAP16[$158>>1]|0;
    $160 = $19;
    $161 = ((($160)) + 26|0);
    HEAP16[$161>>1] = $159;
    $162 = ((($22)) + 2|0);
    $163 = ((($162)) + 2|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = $19;
    $166 = ((($165)) + 28|0);
    HEAP16[$166>>1] = $164;
    $17 = 0;
    while(1) {
     $167 = $17;
     $168 = HEAP16[$24>>1]|0;
     $169 = $168&65535;
     $170 = ($167|0)<($169|0);
     if (!($170)) {
      break;
     }
     $171 = $17;
     $172 = ((($24)) + 2|0);
     $173 = (($172) + ($171<<1)|0);
     $174 = HEAP16[$173>>1]|0;
     $175 = $15;
     $176 = HEAP32[$175>>2]|0;
     $177 = (_compile_findCharOrDots($174,1,$176)|0);
     $178 = ($177|0)!=(0|0);
     if (!($178)) {
      $179 = $27;
      $180 = $179;
      HEAP32[$180>>2] = 18;
      $181 = (($179) + 4)|0;
      $182 = $181;
      HEAP32[$182>>2] = 0;
      $183 = $9;
      $184 = $17;
      $185 = ((($24)) + 2|0);
      $186 = (($185) + ($184<<1)|0);
      $187 = HEAP16[$186>>1]|0;
      $188 = $15;
      $189 = (_addCharOrDots($183,$187,1,$188)|0);
      $20 = $189;
      $190 = $27;
      $191 = $190;
      $192 = HEAP32[$191>>2]|0;
      $193 = (($190) + 4)|0;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = $20;
      $197 = ((($196)) + 16|0);
      $198 = $197;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $201 = (($198) + 4)|0;
      $202 = $201;
      $203 = HEAP32[$202>>2]|0;
      $204 = $200 | $192;
      $205 = $203 | $195;
      $206 = $197;
      $207 = $206;
      HEAP32[$207>>2] = $204;
      $208 = (($206) + 4)|0;
      $209 = $208;
      HEAP32[$209>>2] = $205;
      $210 = $20;
      $211 = ((($210)) + 24|0);
      $212 = HEAP16[$211>>1]|0;
      $213 = $20;
      $214 = ((($213)) + 26|0);
      HEAP16[$214>>1] = $212;
     }
     $215 = $17;
     $216 = (($215) + 1)|0;
     $17 = $216;
    }
    $217 = $26;
    $218 = ($217|0)!=(0);
    L53: do {
     if ($218) {
      $17 = 0;
      while(1) {
       $219 = $17;
       $220 = HEAP16[$25>>1]|0;
       $221 = $220&65535;
       $222 = ($219|0)<($221|0);
       if (!($222)) {
        break L53;
       }
       $223 = $17;
       $224 = ((($25)) + 2|0);
       $225 = (($224) + ($223<<1)|0);
       $226 = HEAP16[$225>>1]|0;
       $227 = $15;
       $228 = HEAP32[$227>>2]|0;
       $229 = (_compile_findCharOrDots($226,1,$228)|0);
       $230 = ($229|0)!=(0|0);
       if (!($230)) {
        $231 = $27;
        $232 = $231;
        HEAP32[$232>>2] = 34;
        $233 = (($231) + 4)|0;
        $234 = $233;
        HEAP32[$234>>2] = 0;
        $235 = $9;
        $236 = $17;
        $237 = ((($25)) + 2|0);
        $238 = (($237) + ($236<<1)|0);
        $239 = HEAP16[$238>>1]|0;
        $240 = $15;
        $241 = (_addCharOrDots($235,$239,1,$240)|0);
        $21 = $241;
        $242 = HEAP16[$25>>1]|0;
        $243 = $242&65535;
        $244 = ($243|0)!=(1);
        if ($244) {
         $245 = $27;
         $246 = $245;
         HEAP32[$246>>2] = 1;
         $247 = (($245) + 4)|0;
         $248 = $247;
         HEAP32[$248>>2] = 0;
        }
        $249 = $27;
        $250 = $249;
        $251 = HEAP32[$250>>2]|0;
        $252 = (($249) + 4)|0;
        $253 = $252;
        $254 = HEAP32[$253>>2]|0;
        $255 = $21;
        $256 = ((($255)) + 16|0);
        $257 = $256;
        $258 = $257;
        $259 = HEAP32[$258>>2]|0;
        $260 = (($257) + 4)|0;
        $261 = $260;
        $262 = HEAP32[$261>>2]|0;
        $263 = $259 | $251;
        $264 = $262 | $254;
        $265 = $256;
        $266 = $265;
        HEAP32[$266>>2] = $263;
        $267 = (($265) + 4)|0;
        $268 = $267;
        HEAP32[$268>>2] = $264;
        $269 = $21;
        $270 = ((($269)) + 24|0);
        $271 = HEAP16[$270>>1]|0;
        $272 = $21;
        $273 = ((($272)) + 28|0);
        HEAP16[$273>>1] = $271;
       }
       $274 = $17;
       $275 = (($274) + 1)|0;
       $17 = $275;
      }
     } else {
      $276 = $20;
      $277 = ($276|0)!=(0|0);
      if ($277) {
       $278 = HEAP16[$24>>1]|0;
       $279 = $278&65535;
       $280 = ($279|0)==(1);
       if ($280) {
        $281 = $20;
        $282 = ((($281)) + 16|0);
        $283 = $282;
        $284 = $283;
        $285 = HEAP32[$284>>2]|0;
        $286 = (($283) + 4)|0;
        $287 = $286;
        $288 = HEAP32[$287>>2]|0;
        $289 = $285 | 32;
        $290 = $282;
        $291 = $290;
        HEAP32[$291>>2] = $289;
        $292 = (($290) + 4)|0;
        $293 = $292;
        HEAP32[$293>>2] = $288;
       }
      }
     }
    } while(0);
    $294 = $20;
    $295 = ($294|0)!=(0|0);
    if ($295) {
     $296 = ((($25)) + 2|0);
     $297 = HEAP16[$296>>1]|0;
     $298 = $20;
     $299 = ((($298)) + 28|0);
     HEAP16[$299>>1] = $297;
    }
    $300 = $21;
    $301 = ($300|0)!=(0|0);
    if ($301) {
     $302 = ((($24)) + 2|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $21;
     $305 = ((($304)) + 26|0);
     HEAP16[$305>>1] = $303;
    }
   }
   $306 = $16;
   $307 = ($306|0)!=(0|0);
   if ($307) {
    $308 = HEAP16[$25>>1]|0;
    $309 = $308&65535;
    $310 = ($309|0)==(1);
    if ($310) {
     $311 = $9;
     $312 = ((($22)) + 2|0);
     $313 = ((($312)) + 2|0);
     $314 = HEAP16[$313>>1]|0;
     $315 = ((($25)) + 2|0);
     $316 = HEAP16[$315>>1]|0;
     $317 = $16;
     (_putCharAndDots($311,$314,$316,$317)|0);
    }
    $318 = HEAP16[$24>>1]|0;
    $319 = $318&65535;
    $320 = ($319|0)==(1);
    if ($320) {
     $321 = $9;
     $322 = ((($22)) + 2|0);
     $323 = HEAP16[$322>>1]|0;
     $324 = ((($24)) + 2|0);
     $325 = HEAP16[$324>>1]|0;
     $326 = $16;
     (_putCharAndDots($321,$323,$325,$326)|0);
    }
   }
   $327 = $15;
   $328 = ($327|0)!=(0|0);
   if ($328) {
    HEAP16[$22>>1] = 1;
    $329 = ((($22)) + 2|0);
    $330 = HEAP16[$329>>1]|0;
    $331 = ((($22)) + 2|0);
    $332 = ((($331)) + 4|0);
    HEAP16[$332>>1] = $330;
    $333 = ((($22)) + 2|0);
    $334 = ((($333)) + 2|0);
    $335 = HEAP16[$334>>1]|0;
    $336 = ((($22)) + 2|0);
    HEAP16[$336>>1] = $335;
    $337 = $9;
    $338 = $11;
    $339 = $12;
    $340 = $13;
    $341 = $14;
    $342 = $15;
    $343 = (_addRule($337,67,$22,$25,0,0,0,0,$338,$339,$340,$341,$342)|0);
    $344 = ($343|0)!=(0);
    if (!($344)) {
     $8 = 0;
     $357 = $8;
     STACKTOP = sp;return ($357|0);
    }
    $345 = ((($22)) + 2|0);
    $346 = ((($345)) + 4|0);
    $347 = HEAP16[$346>>1]|0;
    $348 = ((($22)) + 2|0);
    HEAP16[$348>>1] = $347;
    $349 = $9;
    $350 = $11;
    $351 = $12;
    $352 = $13;
    $353 = $14;
    $354 = $15;
    $355 = (_addRule($349,66,$22,$24,0,0,0,0,$350,$351,$352,$353,$354)|0);
    $356 = ($355|0)!=(0);
    if (!($356)) {
     $8 = 0;
     $357 = $8;
     STACKTOP = sp;return ($357|0);
    }
   }
   $8 = 1;
   $357 = $8;
   STACKTOP = sp;return ($357|0);
  }
 }
 $103 = $9;
 _compileError($103,5929,$vararg_buffer);
 $8 = 0;
 $357 = $8;
 STACKTOP = sp;return ($357|0);
}
function _getRuleCharsText($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (_getToken($8,$7,6043,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = (_parseChars($12,$13,$7)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $3 = 1;
   $16 = $3;
   STACKTOP = sp;return ($16|0);
  }
 }
 $3 = 0;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function _getRuleDotsPattern($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (_getToken($8,$7,6062,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP16[$7>>1]|0;
  $13 = $12&65535;
  $14 = ($13|0)==(1);
  if ($14) {
   $15 = ((($7)) + 2|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = ($17|0)==(61);
   if ($18) {
    $19 = $5;
    HEAP16[$19>>1] = 0;
    $3 = 1;
    $24 = $3;
    STACKTOP = sp;return ($24|0);
   }
  }
  $20 = $4;
  $21 = $5;
  $22 = (_parseDots($20,$21,$7)|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   $3 = 1;
   $24 = $3;
   STACKTOP = sp;return ($24|0);
  }
 }
 $3 = 0;
 $24 = $3;
 STACKTOP = sp;return ($24|0);
}
function _putCharAndDots($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = 0;
 $14 = $6;
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_getCharOrDots($14,0,$16)|0);
 $10 = $17;
 $18 = ($17|0)!=(0|0);
 do {
  if (!($18)) {
   $19 = $5;
   $20 = $8;
   $21 = (_allocateSpaceInDisplayTable($19,$12,8,$20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $4 = 0;
    $120 = $4;
    STACKTOP = sp;return ($120|0);
   }
   $23 = HEAP32[$12>>2]|0;
   $24 = $8;
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 8992|0);
   $27 = (($26) + ($23<<3)|0);
   $10 = $27;
   $28 = $10;
   HEAP32[$28>>2] = 0;
   $29 = $6;
   $30 = $10;
   $31 = ((($30)) + 4|0);
   HEAP16[$31>>1] = $29;
   $32 = $7;
   $33 = $10;
   $34 = ((($33)) + 6|0);
   HEAP16[$34>>1] = $32;
   $35 = $6;
   $36 = (__lou_charHash($35)|0);
   $13 = $36;
   $37 = $13;
   $38 = $8;
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 8|0);
   $41 = (($40) + ($37<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $9 = $42;
   $43 = $9;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $45 = HEAP32[$12>>2]|0;
    $46 = $13;
    $47 = $8;
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 8|0);
    $50 = (($49) + ($46<<2)|0);
    HEAP32[$50>>2] = $45;
    break;
   }
   $51 = $9;
   $52 = $8;
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 8992|0);
   $55 = (($54) + ($51<<3)|0);
   $11 = $55;
   while(1) {
    $56 = $11;
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break;
    }
    $59 = $11;
    $60 = HEAP32[$59>>2]|0;
    $61 = $8;
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 8992|0);
    $64 = (($63) + ($60<<3)|0);
    $11 = $64;
   }
   $65 = HEAP32[$12>>2]|0;
   $66 = $11;
   HEAP32[$66>>2] = $65;
  }
 } while(0);
 $67 = $7;
 $68 = $8;
 $69 = HEAP32[$68>>2]|0;
 $70 = (_getCharOrDots($67,1,$69)|0);
 $10 = $70;
 $71 = ($70|0)!=(0|0);
 do {
  if (!($71)) {
   $72 = $5;
   $73 = $8;
   $74 = (_allocateSpaceInDisplayTable($72,$12,8,$73)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    $4 = 0;
    $120 = $4;
    STACKTOP = sp;return ($120|0);
   }
   $76 = HEAP32[$12>>2]|0;
   $77 = $8;
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($78)) + 8992|0);
   $80 = (($79) + ($76<<3)|0);
   $10 = $80;
   $81 = $10;
   HEAP32[$81>>2] = 0;
   $82 = $7;
   $83 = $10;
   $84 = ((($83)) + 4|0);
   HEAP16[$84>>1] = $82;
   $85 = $6;
   $86 = $10;
   $87 = ((($86)) + 6|0);
   HEAP16[$87>>1] = $85;
   $88 = $7;
   $89 = (__lou_charHash($88)|0);
   $13 = $89;
   $90 = $13;
   $91 = $8;
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 4500|0);
   $94 = (($93) + ($90<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $9 = $95;
   $96 = $9;
   $97 = ($96|0)!=(0);
   if (!($97)) {
    $98 = HEAP32[$12>>2]|0;
    $99 = $13;
    $100 = $8;
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($101)) + 4500|0);
    $103 = (($102) + ($99<<2)|0);
    HEAP32[$103>>2] = $98;
    break;
   }
   $104 = $9;
   $105 = $8;
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($106)) + 8992|0);
   $108 = (($107) + ($104<<3)|0);
   $11 = $108;
   while(1) {
    $109 = $11;
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0);
    if (!($111)) {
     break;
    }
    $112 = $11;
    $113 = HEAP32[$112>>2]|0;
    $114 = $8;
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($115)) + 8992|0);
    $117 = (($116) + ($113<<3)|0);
    $11 = $117;
   }
   $118 = HEAP32[$12>>2]|0;
   $119 = $11;
   HEAP32[$119>>2] = $118;
  }
 } while(0);
 $4 = 1;
 $120 = $4;
 STACKTOP = sp;return ($120|0);
}
function _compileBrailleIndicator($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8240|0);
 $19 = sp + 4138|0;
 $20 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $21 = $10;
 $22 = $11;
 $23 = $13;
 $24 = (_getToken($21,$19,$22,$23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $10;
  $27 = (_parseDots($26,$20,$19)|0);
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $10;
   $30 = $12;
   $31 = $14;
   $32 = $15;
   $33 = $16;
   $34 = $17;
   $35 = $18;
   $36 = (_addRule($29,$30,0,$20,0,0,0,0,$31,$32,$33,$34,$35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $9 = 0;
    $38 = $9;
    STACKTOP = sp;return ($38|0);
   }
  }
 }
 $9 = 1;
 $38 = $9;
 STACKTOP = sp;return ($38|0);
}
function _getCharacters($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (_getToken($8,$7,6112,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = (_parseChars($12,$13,$7)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $3 = 1;
   $16 = $3;
   STACKTOP = sp;return ($16|0);
  }
 }
 $3 = 0;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function _addRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp + 8|0;
 $19 = sp;
 $25 = sp + 32|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $30 = $18;
 $31 = $30;
 HEAP32[$31>>2] = $4;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $5;
 $34 = $19;
 $35 = $34;
 HEAP32[$35>>2] = $6;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = $12;
 $26 = 44;
 $38 = $16;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $16;
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42<<1;
  $44 = $26;
  $45 = (($44) + ($43))|0;
  $26 = $45;
 }
 $46 = $17;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $17;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = $50<<1;
  $52 = $26;
  $53 = (($52) + ($51))|0;
  $26 = $53;
 }
 $54 = $14;
 $55 = $26;
 $56 = $24;
 $57 = (_allocateSpaceInTranslationTable($54,$25,$55,$56)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $13 = 0;
  $223 = $13;
  STACKTOP = sp;return ($223|0);
 }
 $59 = HEAP32[$25>>2]|0;
 $60 = $24;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 21088|0);
 $63 = (($62) + ($59<<3)|0);
 $27 = $63;
 $64 = $21;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $27;
  $67 = $21;
  HEAP32[$67>>2] = $66;
 }
 $68 = $20;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = HEAP32[$25>>2]|0;
  $71 = $20;
  HEAP32[$71>>2] = $70;
 }
 $72 = $15;
 $73 = $27;
 $74 = ((($73)) + 28|0);
 HEAP32[$74>>2] = $72;
 $75 = $18;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + 4)|0;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = $27;
 $82 = ((($81)) + 8|0);
 $83 = $82;
 $84 = $83;
 HEAP32[$84>>2] = $77;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $80;
 $87 = $19;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $27;
 $94 = ((($93)) + 16|0);
 $95 = $94;
 $96 = $95;
 HEAP32[$96>>2] = $89;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = $92;
 $99 = $27;
 $100 = ((($99)) + 32|0);
 HEAP8[$100>>0] = 0;
 $101 = $16;
 $102 = ($101|0)!=(0|0);
 $103 = $27;
 if ($102) {
  $104 = ((($103)) + 38|0);
  $105 = $16;
  $106 = ((($105)) + 2|0);
  $107 = $16;
  $108 = HEAP16[$107>>1]|0;
  $109 = $27;
  $110 = ((($109)) + 34|0);
  HEAP16[$110>>1] = $108;
  $111 = $108 << 16 >> 16;
  $112 = $111<<1;
  _memcpy(($104|0),($106|0),($112|0))|0;
 } else {
  $113 = ((($103)) + 34|0);
  HEAP16[$113>>1] = 0;
 }
 $114 = $17;
 $115 = ($114|0)!=(0|0);
 $116 = $27;
 if ($115) {
  $117 = ((($116)) + 34|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = $27;
  $121 = ((($120)) + 38|0);
  $122 = (($121) + ($119<<1)|0);
  $123 = $17;
  $124 = ((($123)) + 2|0);
  $125 = $17;
  $126 = HEAP16[$125>>1]|0;
  $127 = $27;
  $128 = ((($127)) + 36|0);
  HEAP16[$128>>1] = $126;
  $129 = $126 << 16 >> 16;
  $130 = $129<<1;
  _memcpy(($122|0),($124|0),($130|0))|0;
 } else {
  $131 = ((($116)) + 36|0);
  HEAP16[$131>>1] = 0;
 }
 $132 = $15;
 $133 = ($132|0)==(57);
 $134 = $15;
 $135 = ($134|0)==(58);
 $or$cond = $133 | $135;
 $136 = $15;
 $137 = ($136|0)==(59);
 $or$cond3 = $or$cond | $137;
 if ($or$cond3) {
  $13 = 1;
  $223 = $13;
  STACKTOP = sp;return ($223|0);
 }
 $138 = $15;
 $139 = ($138>>>0)>=(73);
 $140 = $15;
 $141 = ($140>>>0)<=(77);
 $or$cond5 = $139 & $141;
 do {
  if ($or$cond5) {
   $142 = $15;
   $143 = ($142|0)==(73);
   if ($143) {
    $144 = $27;
    $145 = ((($144)) + 34|0);
    $146 = HEAP16[$145>>1]|0;
    $147 = $146 << 16 >> 16;
    $148 = ($147|0)>(0);
    if ($148) {
     break;
    }
   }
   $149 = $23;
   $150 = ($149|0)!=(0);
   if (!($150)) {
    $151 = HEAP32[$25>>2]|0;
    $152 = $27;
    $153 = $24;
    $154 = HEAP32[$153>>2]|0;
    $155 = (_addForwardPassRule($151,$152,$154)|0);
    $156 = ($155|0)!=(0);
    if (!($156)) {
     $13 = 0;
     $223 = $13;
     STACKTOP = sp;return ($223|0);
    }
   }
   $157 = $22;
   $158 = ($157|0)!=(0);
   if (!($158)) {
    $159 = HEAP32[$25>>2]|0;
    $160 = $27;
    $161 = $24;
    $162 = HEAP32[$161>>2]|0;
    $163 = (_addBackwardPassRule($159,$160,$162)|0);
    $164 = ($163|0)!=(0);
    if (!($164)) {
     $13 = 0;
     $223 = $13;
     STACKTOP = sp;return ($223|0);
    }
   }
   $13 = 1;
   $223 = $13;
   STACKTOP = sp;return ($223|0);
  }
 } while(0);
 $165 = $23;
 $166 = ($165|0)!=(0);
 do {
  if (!($166)) {
   $167 = $27;
   $168 = ((($167)) + 34|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $169 << 16 >> 16;
   $171 = ($170|0)==(1);
   if ($171) {
    $172 = $14;
    $173 = HEAP32[$25>>2]|0;
    $174 = $27;
    $175 = $24;
    _addForwardRuleWithSingleChar($172,$173,$174,$175);
    break;
   }
   $176 = $27;
   $177 = ((($176)) + 34|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   $180 = ($179|0)>(1);
   if ($180) {
    $181 = HEAP32[$25>>2]|0;
    $182 = $27;
    $183 = $24;
    $184 = HEAP32[$183>>2]|0;
    _addForwardRuleWithMultipleChars($181,$182,$184);
   }
  }
 } while(0);
 $185 = $22;
 $186 = ($185|0)!=(0);
 do {
  if (!($186)) {
   $187 = $27;
   $188 = ((($187)) + 28|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)==(73);
   $191 = $27;
   if ($190) {
    $192 = ((($191)) + 38|0);
    $28 = $192;
    $193 = $27;
    $194 = ((($193)) + 34|0);
    $195 = HEAP16[$194>>1]|0;
    $196 = $195 << 16 >> 16;
    $29 = $196;
   } else {
    $197 = ((($191)) + 34|0);
    $198 = HEAP16[$197>>1]|0;
    $199 = $198 << 16 >> 16;
    $200 = $27;
    $201 = ((($200)) + 38|0);
    $202 = (($201) + ($199<<1)|0);
    $28 = $202;
    $203 = $27;
    $204 = ((($203)) + 36|0);
    $205 = HEAP16[$204>>1]|0;
    $206 = $205 << 16 >> 16;
    $29 = $206;
   }
   $207 = $29;
   $208 = ($207|0)==(1);
   if ($208) {
    $209 = $14;
    $210 = $28;
    $211 = HEAP16[$210>>1]|0;
    $212 = HEAP32[$25>>2]|0;
    $213 = $27;
    $214 = $24;
    _addBackwardRuleWithSingleCell($209,$211,$212,$213,$214);
    break;
   }
   $215 = $29;
   $216 = ($215|0)>(1);
   if ($216) {
    $217 = $28;
    $218 = $29;
    $219 = HEAP32[$25>>2]|0;
    $220 = $27;
    $221 = $24;
    $222 = HEAP32[$221>>2]|0;
    _addBackwardRuleWithMultipleCells($217,$218,$219,$220,$222);
   }
  }
 } while(0);
 $13 = 1;
 $223 = $13;
 STACKTOP = sp;return ($223|0);
}
function _allocateSpaceInTranslationTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (($13) + 8)|0;
 $15 = (($14) - 1)|0;
 $16 = (($15>>>0) / 8)&-1;
 $17 = $16<<3;
 $8 = $17;
 $18 = $7;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $8;
 $23 = (($21) + ($22))|0;
 $9 = $23;
 $24 = $7;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $10 = $27;
 $28 = $9;
 $29 = $10;
 $30 = ($28>>>0)>($29>>>0);
 if ($30) {
  $31 = $9;
  $32 = (($31>>>0) / 8)&-1;
  $33 = $9;
  $34 = (($33) + ($32))|0;
  $9 = $34;
  $35 = $7;
  $36 = HEAP32[$35>>2]|0;
  $37 = $9;
  $38 = (_realloc($36,$37)|0);
  $11 = $38;
  $39 = $11;
  $40 = ($39|0)!=(0|0);
  if (!($40)) {
   $41 = $4;
   _compileError($41,6123,$vararg_buffer);
   __lou_outOfMemory();
  }
  $42 = $11;
  $43 = $10;
  $44 = (($42) + ($43)|0);
  $45 = $9;
  $46 = $10;
  $47 = (($45) - ($46))|0;
  _memset(($44|0),0,($47|0))|0;
  $48 = HEAP32[3674]|0;
  $12 = $48;
  while(1) {
   $49 = $12;
   $50 = ($49|0)!=(0|0);
   if (!($50)) {
    break;
   }
   $51 = $12;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $7;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($53|0)==($55|0);
   if ($56) {
    $57 = $11;
    $58 = $12;
    $59 = ((($58)) + 4|0);
    HEAP32[$59>>2] = $57;
   }
   $60 = $12;
   $61 = HEAP32[$60>>2]|0;
   $12 = $61;
  }
  $62 = $11;
  $63 = $7;
  HEAP32[$63>>2] = $62;
  $64 = $9;
  $65 = $7;
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 28|0);
  HEAP32[$67>>2] = $64;
 }
 $68 = $5;
 $69 = ($68|0)!=(0|0);
 if (!($69)) {
  STACKTOP = sp;return 1;
 }
 $70 = $7;
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 32|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) - 21096)|0;
 $75 = (($74>>>0) / 8)&-1;
 $76 = $5;
 HEAP32[$76>>2] = $75;
 $77 = $8;
 $78 = $7;
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 32|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + ($77))|0;
 HEAP32[$80>>2] = $82;
 STACKTOP = sp;return 1;
}
function _compileBeforeAfter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $5 = sp + 4110|0;
 $6 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_getToken($7,$5,6164,$8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $3;
  $12 = (_parseChars($11,$6,$5)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = ((($6)) + 2|0);
   $15 = (_eqasc2uni(2300,$14,6)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $2 = 1;
    $20 = $2;
    STACKTOP = sp;return ($20|0);
   }
   $17 = ((($6)) + 2|0);
   $18 = (_eqasc2uni(2294,$17,5)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    $2 = 2;
    $20 = $2;
    STACKTOP = sp;return ($20|0);
   }
  }
 }
 $2 = 0;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _compileNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $vararg_buffer = sp;
 $5 = sp + 18|0;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_getToken($7,$5,6190,$8)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 $11 = ((($5)) + 2|0);
 (_getNumber($11,$6)|0);
 $12 = HEAP16[$6>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)>(0);
 if ($14) {
  $16 = HEAP16[$6>>1]|0;
  $17 = $16&65535;
  $2 = $17;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $15 = $3;
  _compileError($15,6197,$vararg_buffer);
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _compile_findCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (__lou_charHash($10)|0);
 $9 = $11;
 $12 = $5;
 $13 = ($12|0)==(0);
 $14 = $9;
 $15 = $6;
 if ($13) {
  $16 = ((($15)) + 1856|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $8 = $18;
 } else {
  $19 = ((($15)) + 6348|0);
  $20 = (($19) + ($14<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
 }
 while(1) {
  $22 = $8;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   label = 8;
   break;
  }
  $24 = $8;
  $25 = $6;
  $26 = ((($25)) + 21088|0);
  $27 = (($26) + ($24<<3)|0);
  $7 = $27;
  $28 = $7;
  $29 = ((($28)) + 24|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = $4;
  $33 = $32&65535;
  $34 = ($31|0)==($33|0);
  $35 = $7;
  if ($34) {
   label = 6;
   break;
  }
  $36 = HEAP32[$35>>2]|0;
  $8 = $36;
 }
 if ((label|0) == 6) {
  $3 = $35;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 8) {
  $3 = 0;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _getRuleDotsText($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (_getToken($8,$7,6112,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = (_parseChars($12,$13,$7)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $3 = 1;
   $16 = $3;
   STACKTOP = sp;return ($16|0);
  }
 }
 $3 = 0;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function _addCharOrDots($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_compile_findCharOrDots($14,$15,$17)|0);
 $10 = $18;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $10;
  $4 = $20;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $21 = $5;
 $22 = $8;
 $23 = (_allocateSpaceInTranslationTable($21,$12,32,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $25 = HEAP32[$12>>2]|0;
 $26 = $8;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 21088|0);
 $29 = (($28) + ($25<<3)|0);
 $10 = $29;
 $30 = $10;
 ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;HEAP32[$30+16>>2]=0|0;HEAP32[$30+20>>2]=0|0;HEAP32[$30+24>>2]=0|0;HEAP32[$30+28>>2]=0|0;
 $31 = $6;
 $32 = $10;
 $33 = ((($32)) + 24|0);
 HEAP16[$33>>1] = $31;
 $34 = $6;
 $35 = (__lou_charHash($34)|0);
 $13 = $35;
 $36 = $7;
 $37 = ($36|0)==(0);
 $38 = $13;
 $39 = $8;
 $40 = HEAP32[$39>>2]|0;
 if ($37) {
  $41 = ((($40)) + 1856|0);
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
 } else {
  $44 = ((($40)) + 6348|0);
  $45 = (($44) + ($38<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $9 = $46;
 }
 $47 = $9;
 $48 = ($47|0)!=(0);
 do {
  if ($48) {
   $59 = $9;
   $60 = $8;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 21088|0);
   $63 = (($62) + ($59<<3)|0);
   $11 = $63;
   while(1) {
    $64 = $11;
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0);
    if (!($66)) {
     break;
    }
    $67 = $11;
    $68 = HEAP32[$67>>2]|0;
    $69 = $8;
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 21088|0);
    $72 = (($71) + ($68<<3)|0);
    $11 = $72;
   }
   $73 = HEAP32[$12>>2]|0;
   $74 = $11;
   HEAP32[$74>>2] = $73;
  } else {
   $49 = $7;
   $50 = ($49|0)==(0);
   $51 = HEAP32[$12>>2]|0;
   $52 = $13;
   $53 = $8;
   $54 = HEAP32[$53>>2]|0;
   if ($50) {
    $55 = ((($54)) + 1856|0);
    $56 = (($55) + ($52<<2)|0);
    HEAP32[$56>>2] = $51;
    break;
   } else {
    $57 = ((($54)) + 6348|0);
    $58 = (($57) + ($52<<2)|0);
    HEAP32[$58>>2] = $51;
    break;
   }
  }
 } while(0);
 $75 = $10;
 $4 = $75;
 $76 = $4;
 STACKTOP = sp;return ($76|0);
}
function _compilePassOpcode($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8416|0);
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $25 = sp + 4316|0;
 $26 = sp + 4314|0;
 $27 = sp + 216|0;
 $28 = sp + 144|0;
 $29 = sp;
 $30 = sp + 140|0;
 $31 = sp + 136|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = 0;
 $18 = 0;
 $20 = 0;
 $21 = 0;
 $22 = (20052);
 $23 = 0;
 HEAP16[7976] = 0;
 $33 = $8;
 $24 = $33;
 HEAP32[$28>>2] = 0;
 HEAP16[$25>>1] = 0;
 $34 = $8;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $19 = $36;
 while(1) {
  $37 = $19;
  $38 = $8;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $19;
  $43 = $8;
  $44 = ((($43)) + 36|0);
  $45 = (($44) + ($42<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = HEAP16[$25>>1]|0;
  $48 = (($47) + 1)<<16>>16;
  HEAP16[$25>>1] = $48;
  $49 = $47&65535;
  $50 = ((($25)) + 2|0);
  $51 = (($50) + ($49<<1)|0);
  HEAP16[$51>>1] = $46;
  $52 = $19;
  $53 = (($52) + 1)|0;
  $19 = $53;
 }
 $19 = 0;
 while(1) {
  $54 = $19;
  $55 = HEAP16[$25>>1]|0;
  $56 = $55&65535;
  $57 = ($54|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $19;
  $59 = ((($25)) + 2|0);
  $60 = (($59) + ($58<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = ($62|0)>(32);
  if (!($63)) {
   break;
  }
  $64 = $19;
  $65 = (($64) + 1)|0;
  $19 = $65;
 }
 $66 = $19;
 $67 = HEAP16[$25>>1]|0;
 $68 = $67&65535;
 $69 = ($66|0)<($68|0);
 if (!($69)) {
  $74 = $24;
  _compileError($74,6235,$vararg_buffer);
  $7 = 0;
  $730 = $7;
  STACKTOP = sp;return ($730|0);
 }
 $70 = $19;
 $71 = ((($25)) + 2|0);
 $72 = (($71) + ($70<<1)|0);
 HEAP16[$72>>1] = 1;
 $73 = $24;
 (_parseChars($73,$27,$25)|0);
 $19 = 0;
 while(1) {
  $75 = $19;
  $76 = HEAP16[$27>>1]|0;
  $77 = $76&65535;
  $78 = ($75|0)<($77|0);
  if (!($78)) {
   break;
  }
  $79 = $19;
  $80 = ((($27)) + 2|0);
  $81 = (($80) + ($79<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82&65535;
  $84 = ($83|0)!=(1);
  if (!($84)) {
   break;
  }
  $85 = $19;
  $86 = (($85) + 1)|0;
  $19 = $86;
 }
 $87 = $19;
 $21 = $87;
 $88 = $21;
 $89 = ((($27)) + 2|0);
 $90 = (($89) + ($88<<1)|0);
 HEAP16[$90>>1] = 32;
 HEAP32[$28>>2] = 0;
 L19: while(1) {
  $91 = HEAP32[$28>>2]|0;
  $92 = $21;
  $93 = ($91|0)<=($92|0);
  if (!($93)) {
   label = 85;
   break;
  }
  $94 = $23;
  $95 = ($94|0)>=(2048);
  if ($95) {
   label = 17;
   break;
  }
  $97 = HEAP32[$28>>2]|0;
  $98 = ((($27)) + 2|0);
  $99 = (($98) + ($97<<1)|0);
  $100 = HEAP16[$99>>1]|0;
  $15 = $100;
  $101 = $100&65535;
  L23: do {
   switch ($101|0) {
   case 95:  {
    $102 = $23;
    $103 = (($102) + 1)|0;
    $23 = $103;
    $104 = $22;
    $105 = (($104) + ($102<<1)|0);
    HEAP16[$105>>1] = 95;
    $106 = HEAP32[$28>>2]|0;
    $107 = (($106) + 1)|0;
    HEAP32[$28>>2] = $107;
    (_passGetNumber($27,$28,$26)|0);
    $108 = HEAP16[$26>>1]|0;
    $109 = $108&65535;
    $110 = ($109|0)==(0);
    if ($110) {
     HEAP16[$26>>1] = 1;
    }
    $111 = HEAP16[$26>>1]|0;
    $112 = $23;
    $113 = (($112) + 1)|0;
    $23 = $113;
    $114 = $22;
    $115 = (($114) + ($112<<1)|0);
    HEAP16[$115>>1] = $111;
    continue L19;
    break;
   }
   case 33:  {
    $116 = $23;
    $117 = (($116) + 1)|0;
    $23 = $117;
    $118 = $22;
    $119 = (($118) + ($116<<1)|0);
    HEAP16[$119>>1] = 33;
    $120 = HEAP32[$28>>2]|0;
    $121 = (($120) + 1)|0;
    HEAP32[$28>>2] = $121;
    continue L19;
    break;
   }
   case 96:  {
    $122 = $23;
    $123 = (($122) + 1)|0;
    $23 = $123;
    $124 = $22;
    $125 = (($124) + ($122<<1)|0);
    HEAP16[$125>>1] = 96;
    $126 = HEAP32[$28>>2]|0;
    $127 = (($126) + 1)|0;
    HEAP32[$28>>2] = $127;
    continue L19;
    break;
   }
   case 126:  {
    $128 = $23;
    $129 = (($128) + 1)|0;
    $23 = $129;
    $130 = $22;
    $131 = (($130) + ($128<<1)|0);
    HEAP16[$131>>1] = 126;
    $132 = HEAP32[$28>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[$28>>2] = $133;
    continue L19;
    break;
   }
   case 47:  {
    $134 = $23;
    $135 = (($134) + 1)|0;
    $23 = $135;
    $136 = $22;
    $137 = (($136) + ($134<<1)|0);
    HEAP16[$137>>1] = 47;
    $138 = HEAP32[$28>>2]|0;
    $139 = (($138) + 1)|0;
    HEAP32[$28>>2] = $139;
    continue L19;
    break;
   }
   case 34:  {
    $140 = $8;
    $141 = $9;
    $142 = $13;
    $143 = (_verifyStringOrDots($140,$141,1,0,$142)|0);
    $144 = ($143|0)!=(0);
    if (!($144)) {
     label = 27;
     break L19;
    }
    $145 = HEAP32[$28>>2]|0;
    $146 = (($145) + 1)|0;
    HEAP32[$28>>2] = $146;
    $147 = $23;
    $148 = (($147) + 1)|0;
    $23 = $148;
    $149 = $22;
    $150 = (($149) + ($147<<1)|0);
    HEAP16[$150>>1] = 34;
    $151 = $24;
    (_passGetString($27,$28,$25,$151)|0);
    label = 32;
    break;
   }
   case 64:  {
    $152 = $8;
    $153 = $9;
    $154 = $13;
    $155 = (_verifyStringOrDots($152,$153,0,0,$154)|0);
    $156 = ($155|0)!=(0);
    if (!($156)) {
     label = 30;
     break L19;
    }
    $157 = HEAP32[$28>>2]|0;
    $158 = (($157) + 1)|0;
    HEAP32[$28>>2] = $158;
    $159 = $23;
    $160 = (($159) + 1)|0;
    $23 = $160;
    $161 = $22;
    $162 = (($161) + ($159<<1)|0);
    HEAP16[$162>>1] = 64;
    $163 = $24;
    (_passGetDots($27,$28,$25,$163)|0);
    label = 32;
    break;
   }
   case 91:  {
    $192 = $23;
    $193 = (($192) + 1)|0;
    $23 = $193;
    $194 = $22;
    $195 = (($194) + ($192<<1)|0);
    HEAP16[$195>>1] = 91;
    $196 = HEAP32[$28>>2]|0;
    $197 = (($196) + 1)|0;
    HEAP32[$28>>2] = $197;
    continue L19;
    break;
   }
   case 93:  {
    $198 = $23;
    $199 = (($198) + 1)|0;
    $23 = $199;
    $200 = $22;
    $201 = (($200) + ($198<<1)|0);
    HEAP16[$201>>1] = 93;
    $202 = HEAP32[$28>>2]|0;
    $203 = (($202) + 1)|0;
    HEAP32[$28>>2] = $203;
    continue L19;
    break;
   }
   case 35:  {
    $204 = HEAP32[$28>>2]|0;
    $205 = (($204) + 1)|0;
    HEAP32[$28>>2] = $205;
    $206 = $8;
    $207 = (_passGetVariableNumber($206,$27,$28,$26)|0);
    $208 = ($207|0)!=(0);
    if (!($208)) {
     label = 44;
     break L19;
    }
    $209 = HEAP32[$28>>2]|0;
    $210 = ((($27)) + 2|0);
    $211 = (($210) + ($209<<1)|0);
    $212 = HEAP16[$211>>1]|0;
    $213 = $212&65535;
    L40: do {
     switch ($213|0) {
     case 61:  {
      $214 = $23;
      $215 = (($214) + 1)|0;
      $23 = $215;
      $216 = $22;
      $217 = (($216) + ($214<<1)|0);
      HEAP16[$217>>1] = 61;
      break;
     }
     case 60:  {
      $218 = HEAP32[$28>>2]|0;
      $219 = (($218) + 1)|0;
      $220 = ((($27)) + 2|0);
      $221 = (($220) + ($219<<1)|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = $222&65535;
      $224 = ($223|0)==(61);
      if ($224) {
       $225 = HEAP32[$28>>2]|0;
       $226 = (($225) + 1)|0;
       HEAP32[$28>>2] = $226;
       $227 = $23;
       $228 = (($227) + 1)|0;
       $23 = $228;
       $229 = $22;
       $230 = (($229) + ($227<<1)|0);
       HEAP16[$230>>1] = 130;
       break L40;
      } else {
       $231 = $23;
       $232 = (($231) + 1)|0;
       $23 = $232;
       $233 = $22;
       $234 = (($233) + ($231<<1)|0);
       HEAP16[$234>>1] = 60;
       break L40;
      }
      break;
     }
     case 62:  {
      $235 = HEAP32[$28>>2]|0;
      $236 = (($235) + 1)|0;
      $237 = ((($27)) + 2|0);
      $238 = (($237) + ($236<<1)|0);
      $239 = HEAP16[$238>>1]|0;
      $240 = $239&65535;
      $241 = ($240|0)==(61);
      if ($241) {
       $242 = HEAP32[$28>>2]|0;
       $243 = (($242) + 1)|0;
       HEAP32[$28>>2] = $243;
       $244 = $23;
       $245 = (($244) + 1)|0;
       $23 = $245;
       $246 = $22;
       $247 = (($246) + ($244<<1)|0);
       HEAP16[$247>>1] = 131;
       break L40;
      } else {
       $248 = $23;
       $249 = (($248) + 1)|0;
       $23 = $249;
       $250 = $22;
       $251 = (($250) + ($248<<1)|0);
       HEAP16[$251>>1] = 62;
       break L40;
      }
      break;
     }
     default: {
      label = 54;
      break L19;
     }
     }
    } while(0);
    $252 = HEAP16[$26>>1]|0;
    $253 = $23;
    $254 = (($253) + 1)|0;
    $23 = $254;
    $255 = $22;
    $256 = (($255) + ($253<<1)|0);
    HEAP16[$256>>1] = $252;
    $257 = HEAP32[$28>>2]|0;
    $258 = (($257) + 1)|0;
    HEAP32[$28>>2] = $258;
    (_passGetNumber($27,$28,$26)|0);
    $259 = HEAP16[$26>>1]|0;
    $260 = $23;
    $261 = (($260) + 1)|0;
    $23 = $261;
    $262 = $22;
    $263 = (($262) + ($260<<1)|0);
    HEAP16[$263>>1] = $259;
    continue L19;
    break;
   }
   case 36:  {
    $265 = HEAP32[$28>>2]|0;
    $266 = (($265) + 1)|0;
    HEAP32[$28>>2] = $266;
    $267 = $24;
    $268 = (_passGetAttributes($27,$28,$29,$267)|0);
    $269 = ($268|0)!=(0);
    if ($269) {
     label = 57;
    } else {
     label = 56;
     break L19;
    }
    break;
   }
   case 125: case 123:  {
    $353 = HEAP32[$28>>2]|0;
    $354 = (($353) + 1)|0;
    HEAP32[$28>>2] = $354;
    (_passGetName($27,$28,$25)|0);
    $355 = $14;
    $356 = HEAP32[$355>>2]|0;
    $357 = (_findRuleName($25,$356)|0);
    $17 = $357;
    $358 = $17;
    $359 = ($358|0)!=(0);
    if ($359) {
     $360 = $17;
     $361 = $14;
     $362 = HEAP32[$361>>2]|0;
     $363 = ((($362)) + 21088|0);
     $364 = (($363) + ($360<<3)|0);
     $18 = $364;
    }
    $365 = $18;
    $366 = ($365|0)!=(0|0);
    if (!($366)) {
     label = 72;
     break L19;
    }
    $367 = $18;
    $368 = ((($367)) + 28|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = ($369|0)==(68);
    if (!($370)) {
     label = 72;
     break L19;
    }
    $371 = $15;
    $372 = $23;
    $373 = (($372) + 1)|0;
    $23 = $373;
    $374 = $22;
    $375 = (($374) + ($372<<1)|0);
    HEAP16[$375>>1] = $371;
    $376 = $17;
    $377 = $376 >>> 16;
    $378 = $377&65535;
    $379 = $23;
    $380 = (($379) + 1)|0;
    $23 = $380;
    $381 = $22;
    $382 = (($381) + ($379<<1)|0);
    HEAP16[$382>>1] = $378;
    $383 = $17;
    $384 = $383 & 65535;
    $385 = $384&65535;
    $386 = $23;
    $387 = (($386) + 1)|0;
    $23 = $387;
    $388 = $22;
    $389 = (($388) + ($386<<1)|0);
    HEAP16[$389>>1] = $385;
    continue L19;
    break;
   }
   case 37:  {
    $395 = HEAP32[$28>>2]|0;
    $396 = (($395) + 1)|0;
    HEAP32[$28>>2] = $396;
    (_passGetName($27,$28,$25)|0);
    $397 = $14;
    $398 = HEAP32[$397>>2]|0;
    $399 = (_findCharacterClass($25,$398)|0);
    $16 = $399;
    $400 = ($399|0)!=(0|0);
    if ($400) {
     $401 = $16;
     $402 = ((($401)) + 8|0);
     $403 = $402;
     $404 = $403;
     $405 = HEAP32[$404>>2]|0;
     $406 = (($403) + 4)|0;
     $407 = $406;
     $408 = HEAP32[$407>>2]|0;
     $409 = $29;
     $410 = $409;
     HEAP32[$410>>2] = $405;
     $411 = (($409) + 4)|0;
     $412 = $411;
     HEAP32[$412>>2] = $408;
     label = 57;
     break L23;
    }
    $413 = $14;
    $414 = HEAP32[$413>>2]|0;
    $415 = (_findRuleName($25,$414)|0);
    $17 = $415;
    $416 = $17;
    $417 = ($416|0)!=(0);
    if ($417) {
     $418 = $17;
     $419 = $14;
     $420 = HEAP32[$419>>2]|0;
     $421 = ((($420)) + 21088|0);
     $422 = (($421) + ($418<<3)|0);
     $18 = $422;
    }
    $423 = $18;
    $424 = ($423|0)!=(0|0);
    if (!($424)) {
     label = 82;
     break L19;
    }
    $425 = $18;
    $426 = ((($425)) + 28|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = ($427|0)==(57);
    if (!($428)) {
     $429 = $18;
     $430 = ((($429)) + 28|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ($431|0)==(58);
     if (!($432)) {
      $433 = $18;
      $434 = ((($433)) + 28|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = ($435|0)==(59);
      if (!($436)) {
       label = 82;
       break L19;
      }
     }
    }
    $437 = $23;
    $438 = (($437) + 1)|0;
    $23 = $438;
    $439 = $22;
    $440 = (($439) + ($437<<1)|0);
    HEAP16[$440>>1] = 37;
    $441 = $17;
    $442 = $441 >>> 16;
    $443 = $442&65535;
    $444 = $23;
    $445 = (($444) + 1)|0;
    $23 = $445;
    $446 = $22;
    $447 = (($446) + ($444<<1)|0);
    HEAP16[$447>>1] = $443;
    $448 = $17;
    $449 = $448 & 65535;
    $450 = $449&65535;
    $451 = $23;
    $452 = (($451) + 1)|0;
    $23 = $452;
    $453 = $22;
    $454 = (($453) + ($451<<1)|0);
    HEAP16[$454>>1] = $450;
    break;
   }
   case 32:  {
    $460 = $23;
    $461 = (($460) + 1)|0;
    $23 = $461;
    $462 = $22;
    $463 = (($462) + ($460<<1)|0);
    HEAP16[$463>>1] = 32;
    $464 = HEAP32[$28>>2]|0;
    $465 = (($464) + 1)|0;
    HEAP32[$28>>2] = $465;
    continue L19;
    break;
   }
   default: {
    label = 84;
    break L19;
   }
   }
  } while(0);
  if ((label|0) == 32) {
   label = 0;
   $164 = HEAP16[$25>>1]|0;
   $165 = $164&65535;
   $166 = ($165|0)==(0);
   if ($166) {
    label = 33;
    break;
   }
   $167 = $23;
   $168 = ($167|0)>=(2048);
   if ($168) {
    label = 35;
    break;
   }
   $170 = HEAP16[$25>>1]|0;
   $171 = $23;
   $172 = (($171) + 1)|0;
   $23 = $172;
   $173 = $22;
   $174 = (($173) + ($171<<1)|0);
   HEAP16[$174>>1] = $170;
   $20 = 0;
   while(1) {
    $175 = $20;
    $176 = HEAP16[$25>>1]|0;
    $177 = $176&65535;
    $178 = ($175|0)<($177|0);
    if (!($178)) {
     continue L19;
    }
    $179 = $23;
    $180 = ($179|0)>=(2048);
    if ($180) {
     label = 39;
     break L19;
    }
    $182 = $20;
    $183 = ((($25)) + 2|0);
    $184 = (($183) + ($182<<1)|0);
    $185 = HEAP16[$184>>1]|0;
    $186 = $23;
    $187 = (($186) + 1)|0;
    $23 = $187;
    $188 = $22;
    $189 = (($188) + ($186<<1)|0);
    HEAP16[$189>>1] = $185;
    $190 = $20;
    $191 = (($190) + 1)|0;
    $20 = $191;
   }
  }
  else if ((label|0) == 57) {
   label = 0;
   $270 = $23;
   $271 = (($270) + 1)|0;
   $23 = $271;
   $272 = $22;
   $273 = (($272) + ($270<<1)|0);
   HEAP16[$273>>1] = 36;
   $274 = $29;
   $275 = $274;
   $276 = HEAP32[$275>>2]|0;
   $277 = (($274) + 4)|0;
   $278 = $277;
   $279 = HEAP32[$278>>2]|0;
   $280 = (_bitshift64Lshr(($276|0),($279|0),16)|0);
   $281 = tempRet0;
   $282 = $280&65535;
   $283 = $23;
   $284 = (($283) + 1)|0;
   $23 = $284;
   $285 = $22;
   $286 = (($285) + ($283<<1)|0);
   HEAP16[$286>>1] = $282;
   $287 = $29;
   $288 = $287;
   $289 = HEAP32[$288>>2]|0;
   $290 = (($287) + 4)|0;
   $291 = $290;
   $292 = HEAP32[$291>>2]|0;
   $293 = $289 & 65535;
   $294 = $293&65535;
   $295 = $23;
   $296 = (($295) + 1)|0;
   $23 = $296;
   $297 = $22;
   $298 = (($297) + ($295<<1)|0);
   HEAP16[$298>>1] = $294;
  }
  $299 = HEAP32[$28>>2]|0;
  $300 = ((($27)) + 2|0);
  $301 = (($300) + ($299<<1)|0);
  $302 = HEAP16[$301>>1]|0;
  $303 = $302&65535;
  $304 = ($303|0)==(46);
  if ($304) {
   $305 = HEAP32[$28>>2]|0;
   $306 = (($305) + 1)|0;
   HEAP32[$28>>2] = $306;
   $307 = $23;
   $308 = (($307) + 1)|0;
   $23 = $308;
   $309 = $22;
   $310 = (($309) + ($307<<1)|0);
   HEAP16[$310>>1] = 1;
   $311 = $23;
   $312 = (($311) + 1)|0;
   $23 = $312;
   $313 = $22;
   $314 = (($313) + ($311<<1)|0);
   HEAP16[$314>>1] = -1;
   continue;
  }
  (_passGetNumber($27,$28,$26)|0);
  $315 = HEAP16[$26>>1]|0;
  $316 = $315&65535;
  $317 = ($316|0)==(0);
  if ($317) {
   $318 = $23;
   $319 = (($318) + 1)|0;
   $23 = $319;
   $320 = $22;
   $321 = (($320) + ($318<<1)|0);
   HEAP16[$321>>1] = 1;
   HEAP16[$26>>1] = 1;
   $322 = $23;
   $323 = (($322) + 1)|0;
   $23 = $323;
   $324 = $22;
   $325 = (($324) + ($322<<1)|0);
   HEAP16[$325>>1] = 1;
   continue;
  }
  $326 = HEAP16[$26>>1]|0;
  $327 = $23;
  $328 = (($327) + 1)|0;
  $23 = $328;
  $329 = $22;
  $330 = (($329) + ($327<<1)|0);
  HEAP16[$330>>1] = $326;
  $331 = HEAP32[$28>>2]|0;
  $332 = ((($27)) + 2|0);
  $333 = (($332) + ($331<<1)|0);
  $334 = HEAP16[$333>>1]|0;
  $335 = $334&65535;
  $336 = ($335|0)!=(45);
  if ($336) {
   $337 = HEAP16[$26>>1]|0;
   $338 = $23;
   $339 = (($338) + 1)|0;
   $23 = $339;
   $340 = $22;
   $341 = (($340) + ($338<<1)|0);
   HEAP16[$341>>1] = $337;
   continue;
  }
  $342 = HEAP32[$28>>2]|0;
  $343 = (($342) + 1)|0;
  HEAP32[$28>>2] = $343;
  (_passGetNumber($27,$28,$26)|0);
  $344 = HEAP16[$26>>1]|0;
  $345 = $344&65535;
  $346 = ($345|0)==(0);
  if ($346) {
   label = 65;
   break;
  }
  $348 = HEAP16[$26>>1]|0;
  $349 = $23;
  $350 = (($349) + 1)|0;
  $23 = $350;
  $351 = $22;
  $352 = (($351) + ($349<<1)|0);
  HEAP16[$352>>1] = $348;
 }
 switch (label|0) {
  case 17: {
   $96 = $24;
   _compileError($96,6262,$vararg_buffer3);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 27: {
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 30: {
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 33: {
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 35: {
   $169 = $24;
   _compileError($169,6302,$vararg_buffer5);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 39: {
   $181 = $24;
   _compileError($181,6302,$vararg_buffer7);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 44: {
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 54: {
   $264 = $24;
   _compileError($264,6355,$vararg_buffer9);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 56: {
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 65: {
   $347 = $24;
   _compileError($347,6385,$vararg_buffer11);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 72: {
   $390 = $24;
   $391 = ((($25)) + 2|0);
   $392 = HEAP16[$25>>1]|0;
   $393 = $392&65535;
   $394 = (__lou_showString($391,$393,0)|0);
   HEAP32[$vararg_buffer13>>2] = $394;
   _compileError($390,6399,$vararg_buffer13);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 82: {
   $455 = $24;
   $456 = ((($25)) + 2|0);
   $457 = HEAP16[$25>>1]|0;
   $458 = $457&65535;
   $459 = (__lou_showString($456,$458,0)|0);
   HEAP32[$vararg_buffer15>>2] = $459;
   _compileError($455,6425,$vararg_buffer15);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 84: {
   $466 = $24;
   $467 = HEAP32[$28>>2]|0;
   $468 = ((($27)) + 2|0);
   $469 = (($468) + ($467<<1)|0);
   $470 = HEAP16[$469>>1]|0;
   $471 = $470&65535;
   HEAP32[$vararg_buffer18>>2] = $471;
   _compileError($466,6469,$vararg_buffer18);
   $7 = 0;
   $730 = $7;
   STACKTOP = sp;return ($730|0);
   break;
  }
  case 85: {
   while(1) {
    label = 0;
    $472 = HEAP32[$28>>2]|0;
    $473 = HEAP16[$27>>1]|0;
    $474 = $473&65535;
    $475 = ($472|0)<($474|0);
    if (!($475)) {
     break;
    }
    $476 = HEAP32[$28>>2]|0;
    $477 = ((($27)) + 2|0);
    $478 = (($477) + ($476<<1)|0);
    $479 = HEAP16[$478>>1]|0;
    $480 = $479&65535;
    $481 = ($480|0)<=(32);
    if (!($481)) {
     break;
    }
    $482 = HEAP32[$28>>2]|0;
    $483 = (($482) + 1)|0;
    HEAP32[$28>>2] = $483;
    label = 85;
   }
   L96: while(1) {
    $484 = HEAP32[$28>>2]|0;
    $485 = HEAP16[$27>>1]|0;
    $486 = $485&65535;
    $487 = ($484|0)<($486|0);
    if ($487) {
     $488 = HEAP32[$28>>2]|0;
     $489 = ((($27)) + 2|0);
     $490 = (($489) + ($488<<1)|0);
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = ($492|0)>(32);
     $731 = $493;
    } else {
     $731 = 0;
    }
    $494 = $23;
    if (!($731)) {
     label = 132;
     break;
    }
    $495 = ($494|0)>=(2048);
    if ($495) {
     label = 92;
     break;
    }
    $497 = HEAP32[$28>>2]|0;
    $498 = ((($27)) + 2|0);
    $499 = (($498) + ($497<<1)|0);
    $500 = HEAP16[$499>>1]|0;
    $15 = $500;
    $501 = $500&65535;
    switch ($501|0) {
    case 34:  {
     $502 = $8;
     $503 = $9;
     $504 = $13;
     $505 = (_verifyStringOrDots($502,$503,1,1,$504)|0);
     $506 = ($505|0)!=(0);
     if (!($506)) {
      label = 95;
      break L96;
     }
     $507 = HEAP32[$28>>2]|0;
     $508 = (($507) + 1)|0;
     HEAP32[$28>>2] = $508;
     $509 = $23;
     $510 = (($509) + 1)|0;
     $23 = $510;
     $511 = $22;
     $512 = (($511) + ($509<<1)|0);
     HEAP16[$512>>1] = 34;
     $513 = $24;
     (_passGetString($27,$28,$25,$513)|0);
     break;
    }
    case 64:  {
     $514 = $8;
     $515 = $9;
     $516 = $13;
     $517 = (_verifyStringOrDots($514,$515,0,1,$516)|0);
     $518 = ($517|0)!=(0);
     if (!($518)) {
      label = 98;
      break L96;
     }
     $519 = HEAP32[$28>>2]|0;
     $520 = (($519) + 1)|0;
     HEAP32[$28>>2] = $520;
     $521 = $24;
     (_passGetDots($27,$28,$25,$521)|0);
     $522 = $23;
     $523 = (($522) + 1)|0;
     $23 = $523;
     $524 = $22;
     $525 = (($524) + ($522<<1)|0);
     HEAP16[$525>>1] = 64;
     break;
    }
    case 35:  {
     $554 = HEAP32[$28>>2]|0;
     $555 = (($554) + 1)|0;
     HEAP32[$28>>2] = $555;
     $556 = $8;
     $557 = (_passGetVariableNumber($556,$27,$28,$26)|0);
     $558 = ($557|0)!=(0);
     if (!($558)) {
      label = 110;
      break L96;
     }
     $559 = HEAP32[$28>>2]|0;
     $560 = ((($27)) + 2|0);
     $561 = (($560) + ($559<<1)|0);
     $562 = HEAP16[$561>>1]|0;
     $563 = $562&65535;
     switch ($563|0) {
     case 61:  {
      $564 = $23;
      $565 = (($564) + 1)|0;
      $23 = $565;
      $566 = $22;
      $567 = (($566) + ($564<<1)|0);
      HEAP16[$567>>1] = 61;
      $568 = HEAP16[$26>>1]|0;
      $569 = $23;
      $570 = (($569) + 1)|0;
      $23 = $570;
      $571 = $22;
      $572 = (($571) + ($569<<1)|0);
      HEAP16[$572>>1] = $568;
      $573 = HEAP32[$28>>2]|0;
      $574 = (($573) + 1)|0;
      HEAP32[$28>>2] = $574;
      (_passGetNumber($27,$28,$26)|0);
      $575 = HEAP16[$26>>1]|0;
      $576 = $23;
      $577 = (($576) + 1)|0;
      $23 = $577;
      $578 = $22;
      $579 = (($578) + ($576<<1)|0);
      HEAP16[$579>>1] = $575;
      continue L96;
      break;
     }
     case 45: case 43:  {
      $580 = HEAP32[$28>>2]|0;
      $581 = (($580) + 1)|0;
      HEAP32[$28>>2] = $581;
      $582 = ((($27)) + 2|0);
      $583 = (($582) + ($580<<1)|0);
      $584 = HEAP16[$583>>1]|0;
      $585 = $23;
      $586 = (($585) + 1)|0;
      $23 = $586;
      $587 = $22;
      $588 = (($587) + ($585<<1)|0);
      HEAP16[$588>>1] = $584;
      $589 = HEAP16[$26>>1]|0;
      $590 = $23;
      $591 = (($590) + 1)|0;
      $23 = $591;
      $592 = $22;
      $593 = (($592) + ($590<<1)|0);
      HEAP16[$593>>1] = $589;
      continue L96;
      break;
     }
     default: {
      label = 114;
      break L96;
     }
     }
     break;
    }
    case 42:  {
     $595 = $23;
     $596 = (($595) + 1)|0;
     $23 = $596;
     $597 = $22;
     $598 = (($597) + ($595<<1)|0);
     HEAP16[$598>>1] = 42;
     $599 = HEAP32[$28>>2]|0;
     $600 = (($599) + 1)|0;
     HEAP32[$28>>2] = $600;
     continue L96;
     break;
    }
    case 63:  {
     $601 = $23;
     $602 = (($601) + 1)|0;
     $23 = $602;
     $603 = $22;
     $604 = (($603) + ($601<<1)|0);
     HEAP16[$604>>1] = 63;
     $605 = HEAP32[$28>>2]|0;
     $606 = (($605) + 1)|0;
     HEAP32[$28>>2] = $606;
     continue L96;
     break;
    }
    case 125: case 123: case 59:  {
     $607 = HEAP32[$28>>2]|0;
     $608 = (($607) + 1)|0;
     HEAP32[$28>>2] = $608;
     (_passGetName($27,$28,$25)|0);
     $609 = $14;
     $610 = HEAP32[$609>>2]|0;
     $611 = (_findRuleName($25,$610)|0);
     $17 = $611;
     $612 = $17;
     $613 = ($612|0)!=(0);
     if ($613) {
      $614 = $17;
      $615 = $14;
      $616 = HEAP32[$615>>2]|0;
      $617 = ((($616)) + 21088|0);
      $618 = (($617) + ($614<<3)|0);
      $18 = $618;
     }
     $619 = $18;
     $620 = ($619|0)!=(0|0);
     if (!($620)) {
      label = 122;
      break L96;
     }
     $621 = $18;
     $622 = ((($621)) + 28|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = ($623|0)==(68);
     if (!($624)) {
      label = 122;
      break L96;
     }
     $625 = $15;
     $626 = $23;
     $627 = (($626) + 1)|0;
     $23 = $627;
     $628 = $22;
     $629 = (($628) + ($626<<1)|0);
     HEAP16[$629>>1] = $625;
     $630 = $17;
     $631 = $630 >>> 16;
     $632 = $631&65535;
     $633 = $23;
     $634 = (($633) + 1)|0;
     $23 = $634;
     $635 = $22;
     $636 = (($635) + ($633<<1)|0);
     HEAP16[$636>>1] = $632;
     $637 = $17;
     $638 = $637 & 65535;
     $639 = $638&65535;
     $640 = $23;
     $641 = (($640) + 1)|0;
     $23 = $641;
     $642 = $22;
     $643 = (($642) + ($640<<1)|0);
     HEAP16[$643>>1] = $639;
     continue L96;
     break;
    }
    case 37:  {
     $649 = HEAP32[$28>>2]|0;
     $650 = (($649) + 1)|0;
     HEAP32[$28>>2] = $650;
     (_passGetName($27,$28,$25)|0);
     $651 = $14;
     $652 = HEAP32[$651>>2]|0;
     $653 = (_findRuleName($25,$652)|0);
     $17 = $653;
     $654 = $17;
     $655 = ($654|0)!=(0);
     if ($655) {
      $656 = $17;
      $657 = $14;
      $658 = HEAP32[$657>>2]|0;
      $659 = ((($658)) + 21088|0);
      $660 = (($659) + ($656<<3)|0);
      $18 = $660;
     }
     $661 = $18;
     $662 = ($661|0)!=(0|0);
     if (!($662)) {
      label = 130;
      break L96;
     }
     $663 = $18;
     $664 = ((($663)) + 28|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = ($665|0)==(57);
     if (!($666)) {
      $667 = $18;
      $668 = ((($667)) + 28|0);
      $669 = HEAP32[$668>>2]|0;
      $670 = ($669|0)==(58);
      if (!($670)) {
       $671 = $18;
       $672 = ((($671)) + 28|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = ($673|0)==(59);
       if (!($674)) {
        label = 130;
        break L96;
       }
      }
     }
     $675 = $23;
     $676 = (($675) + 1)|0;
     $23 = $676;
     $677 = $22;
     $678 = (($677) + ($675<<1)|0);
     HEAP16[$678>>1] = 37;
     $679 = $17;
     $680 = $679 >>> 16;
     $681 = $680&65535;
     $682 = $23;
     $683 = (($682) + 1)|0;
     $23 = $683;
     $684 = $22;
     $685 = (($684) + ($682<<1)|0);
     HEAP16[$685>>1] = $681;
     $686 = $17;
     $687 = $686 & 65535;
     $688 = $687&65535;
     $689 = $23;
     $690 = (($689) + 1)|0;
     $23 = $690;
     $691 = $22;
     $692 = (($691) + ($689<<1)|0);
     HEAP16[$692>>1] = $688;
     continue L96;
     break;
    }
    default: {
     label = 131;
     break L96;
    }
    }
    $526 = HEAP16[$25>>1]|0;
    $527 = $526&65535;
    $528 = ($527|0)==(0);
    if ($528) {
     label = 101;
     break;
    }
    $529 = $23;
    $530 = ($529|0)>=(2048);
    if ($530) {
     label = 103;
     break;
    }
    $532 = HEAP16[$25>>1]|0;
    $533 = $23;
    $534 = (($533) + 1)|0;
    $23 = $534;
    $535 = $22;
    $536 = (($535) + ($533<<1)|0);
    HEAP16[$536>>1] = $532;
    $20 = 0;
    while(1) {
     $537 = $20;
     $538 = HEAP16[$25>>1]|0;
     $539 = $538&65535;
     $540 = ($537|0)<($539|0);
     if (!($540)) {
      continue L96;
     }
     $541 = $23;
     $542 = ($541|0)>=(2048);
     if ($542) {
      label = 107;
      break L96;
     }
     $544 = $20;
     $545 = ((($25)) + 2|0);
     $546 = (($545) + ($544<<1)|0);
     $547 = HEAP16[$546>>1]|0;
     $548 = $23;
     $549 = (($548) + 1)|0;
     $23 = $549;
     $550 = $22;
     $551 = (($550) + ($548<<1)|0);
     HEAP16[$551>>1] = $547;
     $552 = $20;
     $553 = (($552) + 1)|0;
     $20 = $553;
    }
   }
   switch (label|0) {
    case 92: {
     $496 = $24;
     _compileError($496,6507,$vararg_buffer21);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 95: {
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 98: {
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 101: {
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 103: {
     $531 = $24;
     _compileError($531,6549,$vararg_buffer23);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 107: {
     $543 = $24;
     _compileError($543,6549,$vararg_buffer25);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 110: {
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 114: {
     $594 = $24;
     _compileError($594,6604,$vararg_buffer27);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 122: {
     $644 = $24;
     $645 = ((($25)) + 2|0);
     $646 = HEAP16[$25>>1]|0;
     $647 = $646&65535;
     $648 = (__lou_showString($645,$647,0)|0);
     HEAP32[$vararg_buffer29>>2] = $648;
     _compileError($644,6399,$vararg_buffer29);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 130: {
     $693 = $24;
     $694 = ((($25)) + 2|0);
     $695 = HEAP16[$25>>1]|0;
     $696 = $695&65535;
     $697 = (__lou_showString($694,$696,0)|0);
     HEAP32[$vararg_buffer32>>2] = $697;
     _compileError($693,6647,$vararg_buffer32);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 131: {
     $698 = $24;
     _compileError($698,6670,$vararg_buffer35);
     $7 = 0;
     $730 = $7;
     STACKTOP = sp;return ($730|0);
     break;
    }
    case 132: {
     $699 = $494&65535;
     HEAP16[10025] = $699;
     $700 = $24;
     $701 = $22;
     $702 = HEAP16[10025]|0;
     $703 = $702&65535;
     $704 = (_passFindCharacters($700,$701,$703,$30,$31)|0);
     $32 = $704;
     $705 = $32;
     $706 = ($705|0)!=(0);
     if (!($706)) {
      $7 = 0;
      $730 = $7;
      STACKTOP = sp;return ($730|0);
     }
     $707 = HEAP32[$30>>2]|0;
     $708 = ($707|0)!=(0|0);
     if ($708) {
      $19 = 0;
      while(1) {
       $709 = $19;
       $710 = HEAP32[$31>>2]|0;
       $711 = ($709|0)<($710|0);
       $712 = $19;
       if (!($711)) {
        break;
       }
       $713 = HEAP32[$30>>2]|0;
       $714 = (($713) + ($712<<1)|0);
       $715 = HEAP16[$714>>1]|0;
       $716 = $19;
       $717 = ((15954) + ($716<<1)|0);
       HEAP16[$717>>1] = $715;
       $718 = $19;
       $719 = (($718) + 1)|0;
       $19 = $719;
      }
      $720 = $712&65535;
      HEAP16[7976] = $720;
     }
     $721 = $24;
     $722 = $9;
     $723 = $10;
     $724 = $11;
     $725 = $12;
     $726 = $13;
     $727 = $14;
     $728 = (_addRule($721,$722,15952,20050,0,0,0,0,$723,$724,$725,$726,$727)|0);
     $729 = ($728|0)!=(0);
     if ($729) {
      $7 = 1;
      $730 = $7;
      STACKTOP = sp;return ($730|0);
     } else {
      $7 = 0;
      $730 = $7;
      STACKTOP = sp;return ($730|0);
     }
     break;
    }
   }
   break;
  }
 }
 return (0)|0;
}
function _allocateCharacterClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $4 = sp + 24|0;
 $2 = $0;
 $3 = 0;
 $7 = $2;
 $8 = ((($7)) + 1012|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 1016|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 while(1) {
  $15 = $3;
  $16 = (692 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 9;
   break;
  }
  $19 = $3;
  $20 = (692 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_strlen($21)|0);
  $5 = $22;
  $6 = 0;
  while(1) {
   $23 = $6;
   $24 = $5;
   $25 = ($23|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $6;
   $27 = $3;
   $28 = (692 + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = $6;
   $34 = (($4) + ($33<<1)|0);
   HEAP16[$34>>1] = $32;
   $35 = $6;
   $36 = (($35) + 1)|0;
   $6 = $36;
  }
  $37 = $5;
  $38 = $2;
  $39 = (_addCharacterClass(0,$4,$37,$38)|0);
  $40 = ($39|0)!=(0|0);
  if (!($40)) {
   label = 7;
   break;
  }
  $42 = $3;
  $43 = (($42) + 1)|0;
  $3 = $43;
 }
 if ((label|0) == 7) {
  $41 = $2;
  _deallocateCharacterClasses($41);
  $1 = 0;
  $44 = $1;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 9) {
  $1 = 1;
  $44 = $1;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _findCharacterClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 1012|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $3;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $5;
  $15 = ((($14)) + 16|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($13|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 2|0);
   $21 = $5;
   $22 = ((($21)) + 18|0);
   $23 = $3;
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $25<<1;
   $27 = (_memcmp($20,$22,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
    break;
   }
  }
  $30 = $5;
  $31 = HEAP32[$30>>2]|0;
  $5 = $31;
 }
 if ((label|0) == 5) {
  $29 = $5;
  $2 = $29;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 7) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _addCharacterClass($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $8;
 $13 = ((($12)) + 1012|0);
 $9 = $13;
 $14 = $8;
 $15 = ((($14)) + 1016|0);
 $10 = $15;
 $16 = $10;
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)!=(0);
 $24 = ($22|0)!=(0);
 $25 = $23 | $24;
 do {
  if ($25) {
   $26 = $7;
   $27 = (($26) - 1)|0;
   $28 = $27<<1;
   $29 = (24 + ($28))|0;
   $30 = (_malloc($29)|0);
   $11 = $30;
   $31 = ($30|0)!=(0|0);
   if (!($31)) {
    __lou_outOfMemory();
    break;
   }
   $32 = $11;
   ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;HEAP32[$32+16>>2]=0|0;HEAP32[$32+20>>2]=0|0;
   $33 = $11;
   $34 = ((($33)) + 18|0);
   $35 = $6;
   $36 = $7;
   $37 = $36&65535;
   $38 = $11;
   $39 = ((($38)) + 16|0);
   HEAP16[$39>>1] = $37;
   $40 = $37&65535;
   $41 = $40<<1;
   _memcpy(($34|0),($35|0),($41|0))|0;
   $42 = $10;
   $43 = $42;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = $11;
   $50 = ((($49)) + 8|0);
   $51 = $50;
   $52 = $51;
   HEAP32[$52>>2] = $45;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = $48;
   $55 = $10;
   $56 = $55;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58|0)==(4096);
   $63 = ($61|0)==(0);
   $64 = $62 & $63;
   $65 = $10;
   do {
    if ($64) {
     $66 = $65;
     $67 = $66;
     HEAP32[$67>>2] = 65536;
     $68 = (($66) + 4)|0;
     $69 = $68;
     HEAP32[$69>>2] = 0;
    } else {
     $70 = $65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $73 = (($70) + 4)|0;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = ($72|0)==(8388608);
     $77 = ($75|0)==(0);
     $78 = $76 & $77;
     $79 = $10;
     if ($78) {
      $80 = $79;
      $81 = $80;
      HEAP32[$81>>2] = -2147483648;
      $82 = (($80) + 4)|0;
      $83 = $82;
      HEAP32[$83>>2] = 0;
      break;
     } else {
      $84 = $79;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = (($84) + 4)|0;
      $88 = $87;
      $89 = HEAP32[$88>>2]|0;
      $90 = (_bitshift64Shl(($86|0),($89|0),1)|0);
      $91 = tempRet0;
      $92 = $79;
      $93 = $92;
      HEAP32[$93>>2] = $90;
      $94 = (($92) + 4)|0;
      $95 = $94;
      HEAP32[$95>>2] = $91;
      break;
     }
    }
   } while(0);
   $96 = $9;
   $97 = HEAP32[$96>>2]|0;
   $98 = $11;
   HEAP32[$98>>2] = $97;
   $99 = $11;
   $100 = $9;
   HEAP32[$100>>2] = $99;
   $101 = $11;
   $4 = $101;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  }
 } while(0);
 $102 = $5;
 _compileError($102,6910,$vararg_buffer);
 $4 = 0;
 $103 = $4;
 STACKTOP = sp;return ($103|0);
}
function _getCharacterClass($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $vararg_buffer = sp;
 $9 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $8;
 $12 = (_getToken($10,$9,5382,$11)|0);
 $13 = ($12|0)!=(0);
 do {
  if ($13) {
   $14 = $7;
   $15 = (_findCharacterClass($9,$14)|0);
   $16 = $6;
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)!=(0|0);
   if (!($17)) {
    $18 = $5;
    _compileError($18,6942,$vararg_buffer);
    break;
   }
   $4 = 1;
   $19 = $4;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $4 = 0;
 $19 = $4;
 STACKTOP = sp;return ($19|0);
}
function _compileSwap($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(20544|0);
 $17 = sp + 16432|0;
 $18 = sp + 12334|0;
 $19 = sp + 8236|0;
 $20 = sp + 4138|0;
 $21 = sp + 40|0;
 $22 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $23 = $9;
 $24 = $11;
 $25 = (_getToken($23,$19,5723,$24)|0);
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $9;
   $28 = $11;
   $29 = (_getToken($27,$20,6971,$28)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $8 = 0;
    break;
   }
   $31 = $9;
   $32 = $11;
   $33 = (_getToken($31,$21,6987,$32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $8 = 0;
    break;
   }
   $35 = $10;
   $36 = ($35|0)==(57);
   $37 = $10;
   $38 = ($37|0)==(58);
   $or$cond = $36 | $38;
   $39 = $9;
   if ($or$cond) {
    $40 = (_parseChars($39,$17,$20)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     $8 = 0;
     break;
    }
   } else {
    $42 = (_compileSwapDots($39,$20,$17)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     $8 = 0;
     break;
    }
   }
   $44 = $10;
   $45 = ($44|0)==(57);
   $46 = $9;
   if ($45) {
    $47 = (_parseChars($46,$18,$21)|0);
    $48 = ($47|0)!=(0);
    if (!($48)) {
     $8 = 0;
     break;
    }
   } else {
    $49 = (_compileSwapDots($46,$21,$18)|0);
    $50 = ($49|0)!=(0);
    if (!($50)) {
     $8 = 0;
     break;
    }
   }
   $51 = $9;
   $52 = $10;
   $53 = $13;
   $54 = $14;
   $55 = $15;
   $56 = $16;
   $57 = (_addRule($51,$52,$17,$18,0,0,0,0,$22,$53,$54,$55,$56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    $8 = 0;
    break;
   }
   $59 = $9;
   $60 = HEAP32[$22>>2]|0;
   $61 = $16;
   $62 = HEAP32[$61>>2]|0;
   $63 = (_addRuleName($59,$19,$60,$62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    $8 = 0;
    break;
   }
   $65 = $12;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = HEAP32[$22>>2]|0;
    $68 = $12;
    HEAP32[$68>>2] = $67;
   }
   $8 = 1;
  } else {
   $8 = 0;
  }
 } while(0);
 $69 = $8;
 STACKTOP = sp;return ($69|0);
}
function _atEndOfLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _atTokenDelimiter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 36|0);
 $7 = (($6) + ($4<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($9|0)<=(32);
 $11 = $10&1;
 STACKTOP = sp;return ($11|0);
}
function _hyphenHashNew() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32764)|0);
 $0 = $1;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  __lou_outOfMemory();
 }
 $3 = $0;
 _memset(($3|0),0,32764)|0;
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _hyphenHashLookup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)==(0);
 if ($11) {
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $12 = $4;
 $13 = (_hyphenStringHash($12)|0);
 $14 = (($13>>>0) % 8191)&-1;
 $5 = $14;
 $15 = $5;
 $16 = $3;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 while(1) {
  $19 = $7;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 13;
   break;
  }
  $21 = $4;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $7;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($23|0)!=($28|0);
  if (!($29)) {
   $6 = 0;
   while(1) {
    $30 = $6;
    $31 = $4;
    $32 = HEAP16[$31>>1]|0;
    $33 = $32&65535;
    $34 = ($30|0)<($33|0);
    if (!($34)) {
     break;
    }
    $35 = $6;
    $36 = $4;
    $37 = ((($36)) + 2|0);
    $38 = (($37) + ($35<<1)|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = $39&65535;
    $41 = $6;
    $42 = $7;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 2|0);
    $46 = (($45) + ($41<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = ($40|0)!=($48|0);
    if ($49) {
     break;
    }
    $50 = $6;
    $51 = (($50) + 1)|0;
    $6 = $51;
   }
   $52 = $6;
   $53 = $4;
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = ($52|0)==($55|0);
   if ($56) {
    label = 11;
    break;
   }
  }
  $60 = $7;
  $61 = HEAP32[$60>>2]|0;
  $7 = $61;
 }
 if ((label|0) == 11) {
  $57 = $7;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $2 = $59;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 13) {
  $2 = 65535;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _hyphenGetNewState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 _hyphenHashInsert($6,$7,$9);
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 1)|0;
 $15 = $11 & $14;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 << 1;
  $23 = ($22*12)|0;
  $24 = (_realloc($19,$23)|0);
  $25 = $3;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  __lou_outOfMemory();
 }
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*12)|0)|0);
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + (($39*12)|0)|0);
 $44 = ((($43)) + 8|0);
 HEAP16[$44>>1] = -1;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $3;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*12)|0)|0);
 $51 = ((($50)) + 10|0);
 HEAP16[$51>>1] = 0;
 $52 = $3;
 $53 = HEAP32[$52>>2]|0;
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + (($53*12)|0)|0);
 HEAP32[$57>>2] = 0;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 STACKTOP = sp;return ($59|0);
}
function _hyphenAddTrans($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*12)|0)|0);
 $14 = ((($13)) + 10|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $8 = $16;
 $17 = $8;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = (_malloc(4)|0);
  $20 = $5;
  $21 = $4;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*12)|0)|0);
  HEAP32[$24>>2] = $19;
 } else {
  $25 = $8;
  $26 = $8;
  $27 = (($26) - 1)|0;
  $28 = $25 & $27;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $5;
   $31 = $4;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + (($30*12)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $8;
   $37 = $36 << 1;
   $38 = $37<<2;
   $39 = (_realloc($35,$38)|0);
   $40 = $5;
   $41 = $4;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + (($40*12)|0)|0);
   HEAP32[$44>>2] = $39;
  }
 }
 $45 = $7;
 $46 = $8;
 $47 = $5;
 $48 = $4;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + (($47*12)|0)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($46<<2)|0);
 HEAP16[$53>>1] = $45;
 $54 = $6;
 $55 = $54&65535;
 $56 = $8;
 $57 = $5;
 $58 = $4;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + (($57*12)|0)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($56<<2)|0);
 $64 = ((($63)) + 2|0);
 HEAP16[$64>>1] = $55;
 $65 = $5;
 $66 = $4;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + (($65*12)|0)|0);
 $70 = ((($69)) + 10|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = (($71) + 1)<<16>>16;
 HEAP16[$70>>1] = $72;
 STACKTOP = sp;return;
}
function _hyphenHashFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(8191);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  while(1) {
   $11 = $3;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $3;
   $14 = HEAP32[$13>>2]|0;
   $4 = $14;
   $15 = $3;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   _free($17);
   $18 = $3;
   _free($18);
   $19 = $4;
   $3 = $19;
  }
  $20 = $2;
  $21 = (($20) + 1)|0;
  $2 = $21;
 }
 $22 = $1;
 _free($22);
 STACKTOP = sp;return;
}
function _hyphenStringHash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = ($5|0)<($8|0);
  $10 = $3;
  if (!($9)) {
   break;
  }
  $11 = $10 << 4;
  $12 = $2;
  $13 = $1;
  $14 = ((($13)) + 2|0);
  $15 = (($14) + ($12<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($11) + ($17))|0;
  $3 = $18;
  $19 = $3;
  $20 = $19 & -268435456;
  $4 = $20;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $3;
   $23 = $4;
   $24 = $23 >>> 24;
   $25 = $22 ^ $24;
   $3 = $25;
   $26 = $3;
   $27 = $4;
   $28 = $26 ^ $27;
   $3 = $28;
  }
  $29 = $2;
  $30 = (($29) + 1)|0;
  $2 = $30;
 }
 STACKTOP = sp;return ($10|0);
}
function _hyphenHashInsert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = (_hyphenStringHash($9)|0);
 $11 = (($10>>>0) % 8191)&-1;
 $6 = $11;
 $12 = (_malloc(12)|0);
 $8 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  __lou_outOfMemory();
 }
 $14 = $6;
 $15 = $3;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $4;
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($21) + 1)|0;
 $23 = $22<<1;
 $24 = (_malloc($23)|0);
 $25 = $8;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $8;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  __lou_outOfMemory();
 }
 $31 = $4;
 $32 = HEAP16[$31>>1]|0;
 $33 = $8;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP16[$35>>1] = $32;
 $7 = 0;
 while(1) {
  $36 = $7;
  $37 = $4;
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = ($36|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $7;
  $42 = $4;
  $43 = ((($42)) + 2|0);
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $7;
  $47 = $8;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 2|0);
  $51 = (($50) + ($46<<1)|0);
  HEAP16[$51>>1] = $45;
  $52 = $7;
  $53 = (($52) + 1)|0;
  $7 = $53;
 }
 $54 = $5;
 $55 = $8;
 $56 = ((($55)) + 8|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $6;
 $59 = $3;
 $60 = (($59) + ($58<<2)|0);
 HEAP32[$60>>2] = $57;
 STACKTOP = sp;return;
}
function _addRuleName($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = (($14) - 1)|0;
 $16 = $15<<1;
 $17 = (12 + ($16))|0;
 $18 = (_malloc($17)|0);
 $10 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = $5;
  _compileError($20,5879,$vararg_buffer);
  __lou_outOfMemory();
 }
 $21 = $10;
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $6;
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   label = 11;
   break;
  }
  $27 = $9;
  $28 = $6;
  $29 = ((($28)) + 2|0);
  $30 = (($29) + ($27<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $11 = $31;
  $32 = $11;
  $33 = $32&65535;
  $34 = ($33|0)>=(97);
  if ($34) {
   $35 = $11;
   $36 = $35&65535;
   $37 = ($36|0)<=(122);
   if (!($37)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $38 = $11;
   $39 = $38&65535;
   $40 = ($39|0)>=(65);
   if (!($40)) {
    label = 10;
    break;
   }
   $41 = $11;
   $42 = $41&65535;
   $43 = ($42|0)<=(90);
   if (!($43)) {
    label = 10;
    break;
   }
  }
  $44 = $11;
  $45 = $9;
  $46 = $10;
  $47 = ((($46)) + 10|0);
  $48 = (($47) + ($45<<1)|0);
  HEAP16[$48>>1] = $44;
  $49 = $9;
  $50 = (($49) + 1)|0;
  $9 = $50;
 }
 if ((label|0) == 10) {
  $51 = $5;
  _compileError($51,5897,$vararg_buffer1);
  $52 = $10;
  _free($52);
  $4 = 0;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 else if ((label|0) == 11) {
  $53 = $6;
  $54 = HEAP16[$53>>1]|0;
  $55 = $10;
  $56 = ((($55)) + 8|0);
  HEAP16[$56>>1] = $54;
  $57 = $7;
  $58 = $10;
  $59 = ((($58)) + 4|0);
  HEAP32[$59>>2] = $57;
  $60 = $8;
  $61 = ((($60)) + 1024|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $10;
  HEAP32[$63>>2] = $62;
  $64 = $10;
  $65 = $8;
  $66 = ((($65)) + 1024|0);
  HEAP32[$66>>2] = $64;
  $4 = 1;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _allocateSpaceInDisplayTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (($13) + 8)|0;
 $15 = (($14) - 1)|0;
 $16 = (($15>>>0) / 8)&-1;
 $17 = $16<<3;
 $8 = $17;
 $18 = $7;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $8;
 $23 = (($21) + ($22))|0;
 $9 = $23;
 $24 = $7;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $10 = $26;
 $27 = $9;
 $28 = $10;
 $29 = ($27>>>0)>($28>>>0);
 if ($29) {
  $30 = $9;
  $31 = (($30>>>0) / 8)&-1;
  $32 = $9;
  $33 = (($32) + ($31))|0;
  $9 = $33;
  $34 = $7;
  $35 = HEAP32[$34>>2]|0;
  $36 = $9;
  $37 = (_realloc($35,$36)|0);
  $11 = $37;
  $38 = $11;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   $40 = $4;
   _compileError($40,6075,$vararg_buffer);
   __lou_outOfMemory();
  }
  $41 = $11;
  $42 = $10;
  $43 = (($41) + ($42)|0);
  $44 = $9;
  $45 = $10;
  $46 = (($44) - ($45))|0;
  _memset(($43|0),0,($46|0))|0;
  $47 = HEAP32[3675]|0;
  $12 = $47;
  while(1) {
   $48 = $12;
   $49 = ($48|0)!=(0|0);
   if (!($49)) {
    break;
   }
   $50 = $12;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $7;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = $11;
    $57 = $12;
    $58 = ((($57)) + 4|0);
    HEAP32[$58>>2] = $56;
   }
   $59 = $12;
   $60 = HEAP32[$59>>2]|0;
   $12 = $60;
  }
  $61 = $11;
  $62 = $7;
  HEAP32[$62>>2] = $61;
  $63 = $9;
  $64 = $7;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$65>>2] = $63;
 }
 $66 = $5;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return 1;
 }
 $68 = $7;
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) - 9000)|0;
 $73 = (($72>>>0) / 8)&-1;
 $74 = $5;
 HEAP32[$74>>2] = $73;
 $75 = $8;
 $76 = $7;
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + ($75))|0;
 HEAP32[$78>>2] = $80;
 STACKTOP = sp;return 1;
}
function _addForwardPassRule($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 74:  {
  $12 = $6;
  $13 = ((($12)) + 12064|0);
  $7 = $13;
  break;
 }
 case 73:  {
  $14 = $6;
  $15 = ((($14)) + 12064|0);
  $16 = ((($15)) + 4|0);
  $7 = $16;
  break;
 }
 case 75:  {
  $17 = $6;
  $18 = ((($17)) + 12064|0);
  $19 = ((($18)) + 8|0);
  $7 = $19;
  break;
 }
 case 76:  {
  $20 = $6;
  $21 = ((($20)) + 12064|0);
  $22 = ((($21)) + 12|0);
  $7 = $22;
  break;
 }
 case 77:  {
  $23 = $6;
  $24 = ((($23)) + 12064|0);
  $25 = ((($24)) + 16|0);
  $7 = $25;
  break;
 }
 default: {
  $3 = 0;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 }
 while(1) {
  $26 = $7;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 21088|0);
  $33 = (($32) + ($30<<3)|0);
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 34|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = $8;
  $39 = ((($38)) + 34|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ($37|0)>($41|0);
  if ($42) {
   break;
  }
  $43 = $8;
  $7 = $43;
 }
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 HEAP32[$46>>2] = $45;
 $47 = $4;
 $48 = $7;
 HEAP32[$48>>2] = $47;
 $3 = 1;
 $49 = $3;
 STACKTOP = sp;return ($49|0);
}
function _addBackwardPassRule($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 74:  {
  $12 = $6;
  $13 = ((($12)) + 12084|0);
  $7 = $13;
  break;
 }
 case 73:  {
  $14 = $6;
  $15 = ((($14)) + 12084|0);
  $16 = ((($15)) + 4|0);
  $7 = $16;
  break;
 }
 case 75:  {
  $17 = $6;
  $18 = ((($17)) + 12084|0);
  $19 = ((($18)) + 8|0);
  $7 = $19;
  break;
 }
 case 76:  {
  $20 = $6;
  $21 = ((($20)) + 12084|0);
  $22 = ((($21)) + 12|0);
  $7 = $22;
  break;
 }
 case 77:  {
  $23 = $6;
  $24 = ((($23)) + 12084|0);
  $25 = ((($24)) + 16|0);
  $7 = $25;
  break;
 }
 default: {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 }
 while(1) {
  $26 = $7;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 21088|0);
  $33 = (($32) + ($30<<3)|0);
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 34|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = $8;
  $39 = ((($38)) + 34|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ($37|0)>($41|0);
  if ($42) {
   break;
  }
  $43 = $8;
  $44 = ((($43)) + 4|0);
  $7 = $44;
 }
 $45 = $7;
 $46 = HEAP32[$45>>2]|0;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = $46;
 $49 = $4;
 $50 = $7;
 HEAP32[$50>>2] = $49;
 $3 = 1;
 $51 = $3;
 STACKTOP = sp;return ($51|0);
}
function _addForwardRuleWithSingleChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = 0;
 $12 = $6;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(48);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $6;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(49);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $6;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)>=(75);
 if ($23) {
  $24 = $6;
  $25 = ((($24)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26>>>0)<=(77);
  if ($27) {
   $11 = 1;
  }
 }
 $28 = $4;
 $29 = $6;
 $30 = ((($29)) + 38|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $11;
 $33 = $7;
 $34 = (_addCharOrDots($28,$31,$32,$33)|0);
 $10 = $34;
 $35 = $11;
 $36 = ($35|0)!=(1);
 do {
  if ($36) {
   $37 = $10;
   $38 = ((($37)) + 16|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $41 & 2;
   $46 = ($45|0)!=(0);
   $47 = (0)!=(0);
   $48 = $46 | $47;
   if ($48) {
    $49 = $6;
    $50 = ((($49)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(90);
    if (!($52)) {
     $53 = $6;
     $54 = ((($53)) + 28|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(89);
     if (!($56)) {
      break;
     }
    }
    $57 = $7;
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 1720|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)<(256);
    if ($61) {
     $62 = $6;
     $63 = ((($62)) + 38|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $7;
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 1720|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 1)|0;
     HEAP32[$67>>2] = $69;
     $70 = $7;
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 1208|0);
     $73 = (($72) + ($68<<1)|0);
     HEAP16[$73>>1] = $64;
    }
   }
  }
 } while(0);
 $74 = $6;
 $75 = ((($74)) + 28|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76>>>0)>=(60);
 if ($77) {
  $78 = $6;
  $79 = ((($78)) + 28|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80>>>0)<(69);
  if ($81) {
   $82 = $5;
   $83 = $10;
   $84 = ((($83)) + 4|0);
   HEAP32[$84>>2] = $82;
  }
 }
 $85 = $10;
 $86 = ((($85)) + 8|0);
 $9 = $86;
 while(1) {
  $87 = $9;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)!=(0);
  if (!($89)) {
   break;
  }
  $90 = $9;
  $91 = HEAP32[$90>>2]|0;
  $92 = $7;
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 21088|0);
  $95 = (($94) + ($91<<3)|0);
  $8 = $95;
  $96 = $8;
  $97 = ((($96)) + 34|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 << 16 >> 16;
  $100 = ($99|0)==(0);
  if ($100) {
   break;
  }
  $101 = $8;
  $102 = ((($101)) + 28|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103>>>0)>=(60);
  if ($104) {
   $105 = $8;
   $106 = ((($105)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107>>>0)<(69);
   if ($108) {
    $109 = $6;
    $110 = ((($109)) + 28|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111>>>0)>=(60);
    if (!($112)) {
     break;
    }
    $113 = $6;
    $114 = ((($113)) + 28|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115>>>0)<(69);
    if (!($116)) {
     break;
    }
   }
  }
  $117 = $8;
  $9 = $117;
 }
 $118 = $9;
 $119 = HEAP32[$118>>2]|0;
 $120 = $6;
 HEAP32[$120>>2] = $119;
 $121 = $5;
 $122 = $9;
 HEAP32[$122>>2] = $121;
 STACKTOP = sp;return;
}
function _addForwardRuleWithMultipleChars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $8 = $4;
 $9 = ((($8)) + 38|0);
 $10 = (__lou_stringHash($9,0,0)|0);
 $11 = $5;
 $12 = ((($11)) + 12104|0);
 $13 = (($12) + ($10<<2)|0);
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $7;
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = ((($19)) + 21088|0);
  $21 = (($20) + ($18<<3)|0);
  $6 = $21;
  $22 = $4;
  $23 = ((($22)) + 34|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $6;
  $27 = ((($26)) + 34|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = ($25|0)>($29|0);
  if ($30) {
   break;
  }
  $31 = $4;
  $32 = ((($31)) + 34|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $6;
  $36 = ((($35)) + 34|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = ($34|0)==($38|0);
  if ($39) {
   $40 = $6;
   $41 = ((($40)) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(82);
   if ($43) {
    $44 = $4;
    $45 = ((($44)) + 28|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(82);
    if ($47) {
     break;
    }
   }
  }
  $48 = $6;
  $7 = $48;
 }
 $49 = $7;
 $50 = HEAP32[$49>>2]|0;
 $51 = $4;
 HEAP32[$51>>2] = $50;
 $52 = $3;
 $53 = $7;
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithSingleCell($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $8;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(57);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $8;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(78);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = $6;
 $23 = $9;
 $24 = (_addCharOrDots($21,$22,1,$23)|0);
 $12 = $24;
 $25 = $8;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>=(60);
 if ($28) {
  $29 = $8;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)<(69);
  if ($32) {
   $33 = $7;
   $34 = $12;
   $35 = ((($34)) + 4|0);
   HEAP32[$35>>2] = $33;
  }
 }
 $36 = $12;
 $37 = ((($36)) + 8|0);
 $11 = $37;
 while(1) {
  $38 = $11;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   break;
  }
  $41 = $11;
  $42 = HEAP32[$41>>2]|0;
  $43 = $9;
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 21088|0);
  $46 = (($45) + ($42<<3)|0);
  $10 = $46;
  $47 = $8;
  $48 = ((($47)) + 34|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $10;
  $52 = ((($51)) + 34|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = ($50|0)>($54|0);
  if ($55) {
   break;
  }
  $56 = $10;
  $57 = ((($56)) + 36|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(0);
  if ($60) {
   break;
  }
  $61 = $10;
  $62 = ((($61)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63>>>0)>=(60);
  if ($64) {
   $65 = $10;
   $66 = ((($65)) + 28|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67>>>0)<(69);
   if ($68) {
    $69 = $8;
    $70 = ((($69)) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71>>>0)>=(60);
    if (!($72)) {
     break;
    }
    $73 = $8;
    $74 = ((($73)) + 28|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75>>>0)<(69);
    if (!($76)) {
     break;
    }
   }
  }
  $77 = $10;
  $78 = ((($77)) + 4|0);
  $11 = $78;
 }
 $79 = $11;
 $80 = HEAP32[$79>>2]|0;
 $81 = $8;
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = $80;
 $83 = $7;
 $84 = $11;
 HEAP32[$84>>2] = $83;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithMultipleCells($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $14 = $5;
 $15 = (__lou_stringHash($14,0,0)|0);
 $16 = $9;
 $17 = ((($16)) + 16596|0);
 $18 = (($17) + ($15<<2)|0);
 $11 = $18;
 $19 = $8;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(57);
 if ($22) {
  STACKTOP = sp;return;
 }
 while(1) {
  $23 = $11;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $11;
  $27 = HEAP32[$26>>2]|0;
  $28 = $9;
  $29 = ((($28)) + 21088|0);
  $30 = (($29) + ($27<<3)|0);
  $10 = $30;
  $31 = $10;
  $32 = ((($31)) + 36|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $10;
  $36 = ((($35)) + 34|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = (($34) + ($38))|0;
  $12 = $39;
  $40 = $6;
  $41 = $8;
  $42 = ((($41)) + 34|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = (($40) + ($44))|0;
  $13 = $45;
  $46 = $13;
  $47 = $12;
  $48 = ($46|0)>($47|0);
  if ($48) {
   break;
  }
  $49 = $12;
  $50 = $13;
  $51 = ($49|0)==($50|0);
  if ($51) {
   $52 = $10;
   $53 = ((($52)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(82);
   if ($55) {
    $56 = $8;
    $57 = ((($56)) + 28|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(82);
    if ($59) {
     break;
    }
   }
  }
  $60 = $10;
  $61 = ((($60)) + 4|0);
  $11 = $61;
 }
 $62 = $11;
 $63 = HEAP32[$62>>2]|0;
 $64 = $8;
 $65 = ((($64)) + 4|0);
 HEAP32[$65>>2] = $63;
 $66 = $7;
 $67 = $11;
 HEAP32[$67>>2] = $66;
 STACKTOP = sp;return;
}
function _getNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $3;
 HEAP16[$5>>1] = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = (($7) + ($6<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($10|0)>=(48);
  if (!($11)) {
   label = 5;
   break;
  }
  $12 = $4;
  $13 = $2;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($16|0)<=(57);
  if (!($17)) {
   label = 5;
   break;
  }
  $18 = $3;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($20*10)|0;
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
  $24 = $2;
  $25 = (($24) + ($22<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = (($27) - 48)|0;
  $29 = (($21) + ($28))|0;
  $30 = $29&65535;
  $31 = $3;
  HEAP16[$31>>1] = $30;
 }
 if ((label|0) == 5) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _passGetNumber($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 HEAP16[$6>>1] = 0;
 while(1) {
  $7 = $4;
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $4;
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = ((($15)) + 2|0);
  $17 = (($16) + ($14<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)>=(48);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ((($23)) + 2|0);
  $25 = (($24) + ($22<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = ($27|0)<=(57);
  if (!($28)) {
   label = 6;
   break;
  }
  $29 = $5;
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31*10)|0;
  $33 = $4;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = $3;
  $37 = ((($36)) + 2|0);
  $38 = (($37) + ($34<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (($40) - 48)|0;
  $42 = (($32) + ($41))|0;
  $43 = $42&65535;
  $44 = $5;
  HEAP16[$44>>1] = $43;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _verifyStringOrDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $9;
 $13 = $10;
 $14 = (_wantsString($11,$12,$13)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ^ 1;
 $17 = $16&1;
 $18 = $8;
 $19 = ($18|0)!=(0);
 $20 = $19 ^ 1;
 $21 = $20&1;
 $22 = ($17|0)==($21|0);
 if ($22) {
  $5 = 1;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 } else {
  $23 = $6;
  $24 = $8;
  $25 = ($24|0)!=(0);
  $26 = $25 ? 6767 : 6775;
  $27 = $9;
  $28 = (_getPartName($27)|0);
  $29 = $10;
  $30 = ($29|0)!=(0);
  $31 = $30 ? 6780 : 6789;
  $32 = $7;
  $33 = (__lou_findOpcodeName($32)|0);
  HEAP32[$vararg_buffer>>2] = $26;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $28;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $31;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $33;
  _compileError($23,6704,$vararg_buffer);
  $5 = 0;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _passGetString($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 HEAP16[$9>>1] = 0;
 while(1) {
  $10 = $6;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11|0)>=($14|0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21<<16>>16)!=(0);
  if (!($22)) {
   label = 4;
   break;
  }
  $24 = $6;
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ((($26)) + 2|0);
  $28 = (($27) + ($25<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = ($30|0)==(34);
  if ($31) {
   label = 10;
   break;
  }
  $32 = $6;
  $33 = HEAP32[$32>>2]|0;
  $34 = $5;
  $35 = ((($34)) + 2|0);
  $36 = (($35) + ($33<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($38|0)==(28);
  if ($39) {
   $40 = $7;
   $41 = HEAP16[$40>>1]|0;
   $42 = (($41) + 1)<<16>>16;
   HEAP16[$40>>1] = $42;
   $43 = $41&65535;
   $44 = $7;
   $45 = ((($44)) + 2|0);
   $46 = (($45) + ($43<<1)|0);
   HEAP16[$46>>1] = 34;
  } else {
   $47 = $6;
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = ((($49)) + 2|0);
   $51 = (($50) + ($48<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $7;
   $54 = HEAP16[$53>>1]|0;
   $55 = (($54) + 1)<<16>>16;
   HEAP16[$53>>1] = $55;
   $56 = $54&65535;
   $57 = $7;
   $58 = ((($57)) + 2|0);
   $59 = (($58) + ($56<<1)|0);
   HEAP16[$59>>1] = $52;
  }
  $60 = $6;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
 }
 if ((label|0) == 4) {
  $23 = $8;
  _compileError($23,6809,$vararg_buffer);
  $4 = 0;
  $72 = $4;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 10) {
  $63 = $7;
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = $7;
  $67 = ((($66)) + 2|0);
  $68 = (($67) + ($65<<1)|0);
  HEAP16[$68>>1] = 0;
  $69 = $6;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
  $4 = 1;
  $72 = $4;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _passGetDots($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $9 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 HEAP16[$9>>1] = 0;
 L1: while(1) {
  $10 = $6;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($22|0)==(45);
  do {
   if (!($23)) {
    $24 = $6;
    $25 = HEAP32[$24>>2]|0;
    $26 = $5;
    $27 = ((($26)) + 2|0);
    $28 = (($27) + ($25<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = ($30|0)>=(48);
    if ($31) {
     $32 = $6;
     $33 = HEAP32[$32>>2]|0;
     $34 = $5;
     $35 = ((($34)) + 2|0);
     $36 = (($35) + ($33<<1)|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = ($38|0)<=(57);
     if ($39) {
      break;
     }
    }
    $40 = $6;
    $41 = HEAP32[$40>>2]|0;
    $42 = $5;
    $43 = ((($42)) + 2|0);
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45&65535;
    $47 = $46 | 32;
    $48 = ($47|0)>=(97);
    if (!($48)) {
     break L1;
    }
    $49 = $6;
    $50 = HEAP32[$49>>2]|0;
    $51 = $5;
    $52 = ((($51)) + 2|0);
    $53 = (($52) + ($50<<1)|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54&65535;
    $56 = $55 | 32;
    $57 = ($56|0)<=(102);
    if (!($57)) {
     break L1;
    }
   }
  } while(0);
  $58 = $6;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = $5;
  $62 = ((($61)) + 2|0);
  $63 = (($62) + ($59<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = HEAP16[$9>>1]|0;
  $66 = (($65) + 1)<<16>>16;
  HEAP16[$9>>1] = $66;
  $67 = $65&65535;
  $68 = ((($9)) + 2|0);
  $69 = (($68) + ($67<<1)|0);
  HEAP16[$69>>1] = $64;
 }
 $70 = $8;
 $71 = $7;
 $72 = (_parseDots($70,$71,$9)|0);
 $73 = ($72|0)!=(0);
 if ($73) {
  $4 = 1;
  $74 = $4;
  STACKTOP = sp;return ($74|0);
 } else {
  $4 = 0;
  $74 = $4;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function _passGetVariableNumber($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 $10 = $7;
 $11 = $8;
 $12 = (_passGetNumber($9,$10,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $4 = 0;
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 }
 $14 = $8;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)>=(0);
 if ($17) {
  $18 = $8;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($20|0)<(50);
  if ($21) {
   $4 = 1;
   $23 = $4;
   STACKTOP = sp;return ($23|0);
  }
 }
 $22 = $5;
 _compileError($22,6829,$vararg_buffer);
 $4 = 0;
 $23 = $4;
 STACKTOP = sp;return ($23|0);
}
function _passGetAttributes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 1;
 $10 = $7;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 while(1) {
  $15 = $9;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = ((($19)) + 2|0);
  $21 = (($20) + ($18<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  do {
   switch ($23|0) {
   case 97:  {
    $24 = $7;
    $25 = $24;
    $26 = $25;
    HEAP32[$26>>2] = -1;
    $27 = (($25) + 4)|0;
    $28 = $27;
    HEAP32[$28>>2] = 0;
    break;
   }
   case 100:  {
    $29 = $7;
    $30 = $29;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $32 | 4;
    $37 = $29;
    $38 = $37;
    HEAP32[$38>>2] = $36;
    $39 = (($37) + 4)|0;
    $40 = $39;
    HEAP32[$40>>2] = $35;
    break;
   }
   case 68:  {
    $41 = $7;
    $42 = $41;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = $44 | 256;
    $49 = $41;
    $50 = $49;
    HEAP32[$50>>2] = $48;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $47;
    break;
   }
   case 108:  {
    $53 = $7;
    $54 = $53;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = $56 | 2;
    $61 = $53;
    $62 = $61;
    HEAP32[$62>>2] = $60;
    $63 = (($61) + 4)|0;
    $64 = $63;
    HEAP32[$64>>2] = $59;
    break;
   }
   case 109:  {
    $65 = $7;
    $66 = $65;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = $68 | 64;
    $73 = $65;
    $74 = $73;
    HEAP32[$74>>2] = $72;
    $75 = (($73) + 4)|0;
    $76 = $75;
    HEAP32[$76>>2] = $71;
    break;
   }
   case 112:  {
    $77 = $7;
    $78 = $77;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = $80 | 8;
    $85 = $77;
    $86 = $85;
    HEAP32[$86>>2] = $84;
    $87 = (($85) + 4)|0;
    $88 = $87;
    HEAP32[$88>>2] = $83;
    break;
   }
   case 83:  {
    $89 = $7;
    $90 = $89;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = $92 | 128;
    $97 = $89;
    $98 = $97;
    HEAP32[$98>>2] = $96;
    $99 = (($97) + 4)|0;
    $100 = $99;
    HEAP32[$100>>2] = $95;
    break;
   }
   case 115:  {
    $101 = $7;
    $102 = $101;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = $104 | 1;
    $109 = $101;
    $110 = $109;
    HEAP32[$110>>2] = $108;
    $111 = (($109) + 4)|0;
    $112 = $111;
    HEAP32[$112>>2] = $107;
    break;
   }
   case 85:  {
    $113 = $7;
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = $116 | 16;
    $121 = $113;
    $122 = $121;
    HEAP32[$122>>2] = $120;
    $123 = (($121) + 4)|0;
    $124 = $123;
    HEAP32[$124>>2] = $119;
    break;
   }
   case 117:  {
    $125 = $7;
    $126 = $125;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = $128 | 32;
    $133 = $125;
    $134 = $133;
    HEAP32[$134>>2] = $132;
    $135 = (($133) + 4)|0;
    $136 = $135;
    HEAP32[$136>>2] = $131;
    break;
   }
   case 119:  {
    $137 = $7;
    $138 = $137;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = $140 | 512;
    $145 = $137;
    $146 = $145;
    HEAP32[$146>>2] = $144;
    $147 = (($145) + 4)|0;
    $148 = $147;
    HEAP32[$148>>2] = $143;
    break;
   }
   case 120:  {
    $149 = $7;
    $150 = $149;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = $152 | 1024;
    $157 = $149;
    $158 = $157;
    HEAP32[$158>>2] = $156;
    $159 = (($157) + 4)|0;
    $160 = $159;
    HEAP32[$160>>2] = $155;
    break;
   }
   case 121:  {
    $161 = $7;
    $162 = $161;
    $163 = $162;
    $164 = HEAP32[$163>>2]|0;
    $165 = (($162) + 4)|0;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = $164 | 2048;
    $169 = $161;
    $170 = $169;
    HEAP32[$170>>2] = $168;
    $171 = (($169) + 4)|0;
    $172 = $171;
    HEAP32[$172>>2] = $167;
    break;
   }
   case 122:  {
    $173 = $7;
    $174 = $173;
    $175 = $174;
    $176 = HEAP32[$175>>2]|0;
    $177 = (($174) + 4)|0;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = $176 | 4096;
    $181 = $173;
    $182 = $181;
    HEAP32[$182>>2] = $180;
    $183 = (($181) + 4)|0;
    $184 = $183;
    HEAP32[$184>>2] = $179;
    break;
   }
   default: {
    $9 = 0;
   }
   }
  } while(0);
  $185 = $9;
  $186 = ($185|0)!=(0);
  if (!($186)) {
   continue;
  }
  $187 = $6;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + 1)|0;
  HEAP32[$187>>2] = $189;
 }
 $190 = $7;
 $191 = $190;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 $194 = (($191) + 4)|0;
 $195 = $194;
 $196 = HEAP32[$195>>2]|0;
 $197 = ($193|0)!=(0);
 $198 = ($196|0)!=(0);
 $199 = $197 | $198;
 if ($199) {
  $4 = 1;
  $204 = $4;
  STACKTOP = sp;return ($204|0);
 } else {
  $200 = $8;
  _compileError($200,6858,$vararg_buffer);
  $201 = $6;
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + -1)|0;
  HEAP32[$201>>2] = $203;
  $4 = 0;
  $204 = $4;
  STACKTOP = sp;return ($204|0);
 }
 return (0)|0;
}
function _passGetName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 HEAP16[$7>>1] = 0;
 while(1) {
  $8 = $4;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = ((($10)) + 2|0);
  $12 = (($11) + ($9<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $6 = $13;
  $14 = $6;
  $15 = $14&65535;
  $16 = ($15|0)>=(97);
  if ($16) {
   $17 = $6;
   $18 = $17&65535;
   $19 = ($18|0)<=(122);
   if (!($19)) {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   label = 0;
   $20 = $6;
   $21 = $20&65535;
   $22 = ($21|0)>=(65);
   if (!($22)) {
    label = 7;
    break;
   }
   $23 = $6;
   $24 = $23&65535;
   $25 = ($24|0)<=(90);
   if (!($25)) {
    label = 7;
    break;
   }
  }
  $26 = $6;
  $27 = $5;
  $28 = HEAP16[$27>>1]|0;
  $29 = (($28) + 1)<<16>>16;
  HEAP16[$27>>1] = $29;
  $30 = $28&65535;
  $31 = $5;
  $32 = ((($31)) + 2|0);
  $33 = (($32) + ($30<<1)|0);
  HEAP16[$33>>1] = $26;
  $34 = $4;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$34>>2] = $36;
  $37 = $4;
  $38 = HEAP32[$37>>2]|0;
  $39 = $3;
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _findRuleName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 1024|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $3;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $5;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($13|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 2|0);
   $21 = $5;
   $22 = ((($21)) + 10|0);
   $23 = $3;
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $25<<1;
   $27 = (_memcmp($20,$22,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
    break;
   }
  }
  $32 = $5;
  $33 = HEAP32[$32>>2]|0;
  $5 = $33;
 }
 if ((label|0) == 5) {
  $29 = $5;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $2 = $31;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 7) {
  $2 = 0;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _passFindCharacters($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = 0;
 $15 = $9;
 HEAP32[$15>>2] = 0;
 $16 = $10;
 HEAP32[$16>>2] = 0;
 L1: while(1) {
  $17 = $11;
  $18 = $8;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $11;
  $21 = $7;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $13 = $23;
  $24 = $13;
  $25 = $24&65535;
  switch ($25|0) {
  case 32:  {
   break L1;
   break;
  }
  case 37:  {
   label = 10;
   break L1;
   break;
  }
  case 59: case 125: case 123:  {
   label = 11;
   break L1;
   break;
  }
  case 64: case 34:  {
   $26 = $11;
   $27 = (($26) + 1)|0;
   $28 = $7;
   $29 = (($28) + ($27<<1)|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   $14 = $31;
   $32 = $11;
   $33 = (($32) + 2)|0;
   $11 = $33;
   $34 = $14;
   $35 = $12;
   $36 = ($34|0)>($35|0);
   if ($36) {
    label = 5;
    break L1;
   }
   $47 = $14;
   $48 = $12;
   $49 = (($48) - ($47))|0;
   $12 = $49;
   $50 = $14;
   $51 = $11;
   $52 = (($51) + ($50))|0;
   $11 = $52;
   continue L1;
   break;
  }
  case 36:  {
   $53 = $11;
   $54 = (($53) + 5)|0;
   $11 = $54;
   $55 = $11;
   $56 = (($55) - 2)|0;
   $57 = $7;
   $58 = (($57) + ($56<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = $11;
   $62 = (($61) - 1)|0;
   $63 = $7;
   $64 = (($63) + ($62<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = ($60|0)==($66|0);
   if (!($67)) {
    break L1;
   }
   $68 = $11;
   $69 = (($68) - 1)|0;
   $70 = $7;
   $71 = (($70) + ($69<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = $12;
   $75 = ($73|0)<=($74|0);
   if (!($75)) {
    break L1;
   }
   $76 = $11;
   $77 = (($76) - 1)|0;
   $78 = $7;
   $79 = (($78) + ($77<<1)|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   $82 = $12;
   $83 = (($82) - ($81))|0;
   $12 = $83;
   continue L1;
   break;
  }
  case 131: case 130: case 62: case 60: case 61:  {
   $88 = $11;
   $89 = (($88) + 3)|0;
   $11 = $89;
   continue L1;
   break;
  }
  case 95:  {
   $90 = $11;
   $91 = (($90) + 1)|0;
   $92 = $7;
   $93 = (($92) + ($91<<1)|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94&65535;
   $96 = $12;
   $97 = (($96) + ($95))|0;
   $12 = $97;
   $98 = $11;
   $99 = (($98) + 2)|0;
   $11 = $99;
   continue L1;
   break;
  }
  case 45: case 43: case 63: case 42: case 126: case 96: case 93: case 91: case 33:  {
   $100 = $11;
   $101 = (($100) + 1)|0;
   $11 = $101;
   continue L1;
   break;
  }
  default: {
   label = 16;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  $37 = $11;
  $38 = $12;
  $39 = (($37) + ($38))|0;
  $40 = $7;
  $41 = (($40) + ($39<<1)|0);
  $42 = $9;
  HEAP32[$42>>2] = $41;
  $43 = $14;
  $44 = $12;
  $45 = (($43) - ($44))|0;
  $46 = $10;
  HEAP32[$46>>2] = $45;
  $5 = 1;
  $105 = $5;
  STACKTOP = sp;return ($105|0);
 }
 else if ((label|0) == 10) {
  $84 = $11;
  $85 = (($84) + 2)|0;
  $11 = $85;
  label = 11;
 }
 else if ((label|0) == 16) {
  $102 = $6;
  $103 = $13;
  $104 = $103&65535;
  HEAP32[$vararg_buffer>>2] = $104;
  _compileError($102,6876,$vararg_buffer);
  $5 = 0;
  $105 = $5;
  STACKTOP = sp;return ($105|0);
 }
 if ((label|0) == 11) {
  $86 = $11;
  $87 = (($86) + 3)|0;
  $11 = $87;
 }
 $5 = 1;
 $105 = $5;
 STACKTOP = sp;return ($105|0);
}
function _wantsString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)==(74);
 do {
  if ($8) {
   $3 = 1;
  } else {
   $9 = $4;
   $10 = ($9|0)!=(73);
   if ($10) {
    $3 = 0;
    break;
   } else {
    $11 = $6;
    $12 = ($11|0)!=(0);
    $13 = $12 ^ 1;
    $14 = $13&1;
    $15 = $5;
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    $18 = $17&1;
    $19 = ($14|0)==($18|0);
    $20 = $19&1;
    $3 = $20;
    break;
   }
  }
 } while(0);
 $21 = $3;
 STACKTOP = sp;return ($21|0);
}
function _getPartName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 6797 : 6804;
 STACKTOP = sp;return ($4|0);
}
function _compileSwapDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 4122|0;
 $10 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $11 = $6;
 HEAP16[$11>>1] = 0;
 HEAP16[$9>>1] = 0;
 while(1) {
  $12 = $7;
  $13 = $5;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($12|0)<=($15|0);
  if (!($16)) {
   label = 13;
   break;
  }
  $17 = $7;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($22|0)!=(44);
  if ($23) {
   $24 = $7;
   $25 = $5;
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = ($24|0)!=($27|0);
   if ($28) {
    $29 = $7;
    $30 = $5;
    $31 = ((($30)) + 2|0);
    $32 = (($31) + ($29<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = HEAP16[$9>>1]|0;
    $35 = (($34) + 1)<<16>>16;
    HEAP16[$9>>1] = $35;
    $36 = $34&65535;
    $37 = ((($9)) + 2|0);
    $38 = (($37) + ($36<<1)|0);
    HEAP16[$38>>1] = $33;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $39 = $4;
   $40 = (_parseDots($39,$10,$9)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    label = 7;
    break;
   }
   $42 = HEAP16[$10>>1]|0;
   $43 = $42&65535;
   $44 = (($43) + 1)|0;
   $45 = $44&65535;
   $46 = $6;
   $47 = HEAP16[$46>>1]|0;
   $48 = (($47) + 1)<<16>>16;
   HEAP16[$46>>1] = $48;
   $49 = $47&65535;
   $50 = $6;
   $51 = ((($50)) + 2|0);
   $52 = (($51) + ($49<<1)|0);
   HEAP16[$52>>1] = $45;
   $8 = 0;
   while(1) {
    $53 = $8;
    $54 = HEAP16[$10>>1]|0;
    $55 = $54&65535;
    $56 = ($53|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $8;
    $58 = ((($10)) + 2|0);
    $59 = (($58) + ($57<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $6;
    $62 = HEAP16[$61>>1]|0;
    $63 = (($62) + 1)<<16>>16;
    HEAP16[$61>>1] = $63;
    $64 = $62&65535;
    $65 = $6;
    $66 = ((($65)) + 2|0);
    $67 = (($66) + ($64<<1)|0);
    HEAP16[$67>>1] = $60;
    $68 = $8;
    $69 = (($68) + 1)|0;
    $8 = $69;
   }
   HEAP16[$9>>1] = 0;
  }
  $70 = $7;
  $71 = (($70) + 1)|0;
  $7 = $71;
 }
 if ((label|0) == 7) {
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 13) {
  $3 = 1;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _lou_translateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_translate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $11;
 $24 = $12;
 $25 = $13;
 $26 = $14;
 $27 = $15;
 $28 = $16;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $20;
 $33 = $21;
 $34 = (__lou_translate($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,0,0)|0);
 STACKTOP = sp;return ($34|0);
}
function __lou_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $29 = sp + 216|0;
 $30 = sp + 212|0;
 $31 = sp + 200|0;
 $32 = sp + 184|0;
 $42 = sp + 144|0;
 $43 = sp + 140|0;
 $49 = sp + 108|0;
 $51 = sp + 88|0;
 $54 = sp + 76|0;
 $57 = sp + 56|0;
 $58 = sp + 40|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $45 = -1;
 $46 = -1;
 $48 = 1;
 $61 = $15;
 $62 = ($61|0)==(0|0);
 $63 = $17;
 $64 = ($63|0)==(0|0);
 $or$cond = $62 | $64;
 $65 = $18;
 $66 = ($65|0)==(0|0);
 $or$cond3 = $or$cond | $66;
 $67 = $19;
 $68 = ($67|0)==(0|0);
 $or$cond5 = $or$cond3 | $68;
 $69 = $20;
 $70 = ($69|0)==(0|0);
 $or$cond7 = $or$cond5 | $70;
 if ($or$cond7) {
  $14 = 0;
  $602 = $14;
  STACKTOP = sp;return ($602|0);
 }
 $71 = $15;
 $72 = $18;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$vararg_buffer>>2] = $71;
 $vararg_ptr13 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $73;
 __lou_logMessage(0,7008,$vararg_buffer);
 $74 = $17;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 __lou_logWidecharBuf(0,7055,$74,$76);
 $77 = $26;
 $78 = (__lou_isValidMode($77)|0);
 $79 = ($78|0)!=(0);
 if (!($79)) {
  $80 = $26;
  HEAP32[$vararg_buffer14>>2] = $80;
  __lou_logMessage(40000,7153,$vararg_buffer14);
 }
 $81 = $16;
 $82 = ($81|0)==(0|0);
 if ($82) {
  $83 = $15;
  $16 = $83;
 }
 $84 = $15;
 $85 = $16;
 __lou_getTable($84,$85,$29,$30);
 $86 = HEAP32[$29>>2]|0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  $88 = $18;
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)<(0);
  if (!($90)) {
   $91 = $20;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)<(0);
   if (!($93)) {
    $47 = 0;
    while(1) {
     $94 = $47;
     $95 = $18;
     $96 = HEAP32[$95>>2]|0;
     $97 = ($94|0)<($96|0);
     if (!($97)) {
      break;
     }
     $98 = $47;
     $99 = $17;
     $100 = (($99) + ($98<<1)|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101&65535;
     $103 = ($102|0)!=(0);
     if (!($103)) {
      break;
     }
     $104 = $47;
     $105 = (($104) + 1)|0;
     $47 = $105;
    }
    HEAP32[$49>>2] = -1;
    $106 = ((($49)) + 4|0);
    $107 = $17;
    HEAP32[$106>>2] = $107;
    $108 = ((($49)) + 8|0);
    $109 = $47;
    HEAP32[$108>>2] = $109;
    ;HEAP32[$31>>2]=HEAP32[$49>>2]|0;HEAP32[$31+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$49+8>>2]|0;
    $44 = 0;
    $110 = ((($31)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $20;
    $113 = HEAP32[$112>>2]|0;
    $114 = (__lou_allocMem(0,0,$111,$113)|0);
    $37 = $114;
    $115 = ($114|0)!=(0|0);
    if (!($115)) {
     $14 = 0;
     $602 = $14;
     STACKTOP = sp;return ($602|0);
    }
    $116 = $21;
    $117 = ($116|0)!=(0|0);
    L24: do {
     if ($117) {
      $47 = 0;
      while(1) {
       $118 = $47;
       $119 = ((($31)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($118|0)<($120|0);
       if (!($121)) {
        break L24;
       }
       $122 = $47;
       $123 = $21;
       $124 = (($123) + ($122<<1)|0);
       $125 = HEAP16[$124>>1]|0;
       $126 = $47;
       $127 = $37;
       $128 = (($127) + ($126<<1)|0);
       HEAP16[$128>>1] = $125;
       $129 = $47;
       $130 = $37;
       $131 = (($130) + ($129<<1)|0);
       $132 = HEAP16[$131>>1]|0;
       $133 = $132&65535;
       $134 = $133 & 16383;
       $135 = ($134|0)!=(0);
       if ($135) {
        $44 = 1;
       }
       $136 = $47;
       $137 = (($136) + 1)|0;
       $47 = $137;
      }
     } else {
      $138 = $37;
      $139 = ((($31)) + 8|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = $140<<1;
      _memset(($138|0),0,($141|0))|0;
     }
    } while(0);
    $142 = ((($31)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $20;
    $145 = HEAP32[$144>>2]|0;
    $146 = (__lou_allocMem(1,0,$143,$145)|0);
    $40 = $146;
    $147 = ($146|0)!=(0|0);
    if (!($147)) {
     $14 = 0;
     $602 = $14;
     STACKTOP = sp;return ($602|0);
    }
    $148 = $40;
    $149 = ((($31)) + 8|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + 4)|0;
    $152 = $151<<2;
    _memset(($148|0),0,($152|0))|0;
    $153 = ((($31)) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $20;
    $156 = HEAP32[$155>>2]|0;
    $157 = (__lou_allocMem(2,0,$154,$156)|0);
    $41 = $157;
    $158 = ($157|0)!=(0|0);
    if (!($158)) {
     $14 = 0;
     $602 = $14;
     STACKTOP = sp;return ($602|0);
    }
    $159 = $41;
    $160 = ((($31)) + 8|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + 4)|0;
    $163 = $162<<3;
    _memset(($159|0),0,($163|0))|0;
    $164 = $22;
    $165 = ($164|0)==(0|0);
    if ($165) {
     label = 31;
    } else {
     $166 = $22;
     $167 = HEAP8[$166>>0]|0;
     $168 = $167 << 24 >> 24;
     $169 = ($168|0)==(88);
     if ($169) {
      label = 31;
     } else {
      $170 = $22;
      $38 = $170;
     }
    }
    if ((label|0) == 31) {
     $38 = 0;
    }
    $171 = $23;
    $172 = ($171|0)!=(0|0);
    L48: do {
     if ($172) {
      $47 = 0;
      while(1) {
       $173 = $47;
       $174 = ((($31)) + 8|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($173|0)<($175|0);
       if (!($176)) {
        break L48;
       }
       $177 = $47;
       $178 = $23;
       $179 = (($178) + ($177<<2)|0);
       HEAP32[$179>>2] = -1;
       $180 = $47;
       $181 = (($180) + 1)|0;
       $47 = $181;
      }
     }
    } while(0);
    $182 = $25;
    $183 = ($182|0)!=(0|0);
    L54: do {
     if ($183) {
      $184 = $25;
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)>=(0);
      if ($186) {
       HEAP32[$43>>2] = 0;
       $187 = $25;
       $188 = HEAP32[$187>>2]|0;
       HEAP32[$42>>2] = $188;
       $189 = $26;
       $190 = $189 & 34;
       $191 = ($190|0)!=(0);
       if ($191) {
        $192 = HEAP32[$42>>2]|0;
        $45 = $192;
        $193 = $45;
        $194 = ((($31)) + 4|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = (($195) + ($193<<1)|0);
        $197 = HEAP16[$196>>1]|0;
        $198 = HEAP32[$29>>2]|0;
        $199 = (_checkAttr($197,1,0,0,$198)|0);
        $200 = ($199|0)!=(0);
        if ($200) {
         $201 = $45;
         $202 = (($201) + 1)|0;
         $46 = $202;
         break;
        }
        while(1) {
         $203 = $45;
         $204 = ($203|0)>=(0);
         if ($204) {
          $205 = $45;
          $206 = ((($31)) + 4|0);
          $207 = HEAP32[$206>>2]|0;
          $208 = (($207) + ($205<<1)|0);
          $209 = HEAP16[$208>>1]|0;
          $210 = HEAP32[$29>>2]|0;
          $211 = (_checkAttr($209,1,0,0,$210)|0);
          $212 = ($211|0)!=(0);
          $213 = $212 ^ 1;
          $603 = $213;
         } else {
          $603 = 0;
         }
         $214 = $45;
         if (!($603)) {
          break;
         }
         $215 = (($214) + -1)|0;
         $45 = $215;
        }
        $216 = (($214) + 1)|0;
        $45 = $216;
        $217 = HEAP32[$42>>2]|0;
        $46 = $217;
        $218 = $26;
        $219 = $218 & 32;
        $220 = ($219|0)!=(0);
        if (!($220)) {
         while(1) {
          $221 = $46;
          $222 = ((($31)) + 8|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = ($221|0)<($223|0);
          if (!($224)) {
           break L54;
          }
          $225 = $46;
          $226 = ((($31)) + 4|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = (($227) + ($225<<1)|0);
          $229 = HEAP16[$228>>1]|0;
          $230 = HEAP32[$29>>2]|0;
          $231 = (_checkAttr($229,1,0,0,$230)|0);
          $232 = ($231|0)!=(0);
          $233 = $232 ^ 1;
          if (!($233)) {
           break L54;
          }
          $234 = $46;
          $235 = (($234) + 1)|0;
          $46 = $235;
         }
        }
       }
      } else {
       label = 49;
      }
     } else {
      label = 49;
     }
    } while(0);
    if ((label|0) == 49) {
     HEAP32[$42>>2] = -1;
     HEAP32[$43>>2] = 1;
    }
    $236 = ((($31)) + 8|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $20;
    $239 = HEAP32[$238>>2]|0;
    $240 = (__lou_allocMem(5,0,$237,$239)|0);
    $34 = $240;
    $241 = ($240|0)!=(0|0);
    if (!($241)) {
     $14 = 0;
     $602 = $14;
     STACKTOP = sp;return ($602|0);
    }
    $242 = HEAP32[$29>>2]|0;
    $243 = ((($242)) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ($244|0)>(1);
    if ($245) {
     label = 54;
    } else {
     $246 = HEAP32[$29>>2]|0;
     $247 = ((($246)) + 8|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)!=(0);
     if ($249) {
      label = 54;
     }
    }
    if ((label|0) == 54) {
     $250 = ((($31)) + 8|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $20;
     $253 = HEAP32[$252>>2]|0;
     $254 = (__lou_allocMem(6,0,$251,$253)|0);
     $35 = $254;
     $255 = ($254|0)!=(0|0);
     if (!($255)) {
      $14 = 0;
      $602 = $14;
      STACKTOP = sp;return ($602|0);
     }
     $256 = ((($31)) + 8|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $20;
     $259 = HEAP32[$258>>2]|0;
     $260 = (__lou_allocMem(7,0,$257,$259)|0);
     $36 = $260;
     $261 = ($260|0)!=(0|0);
     if (!($261)) {
      $14 = 0;
      $602 = $14;
      STACKTOP = sp;return ($602|0);
     }
    }
    $262 = $38;
    $263 = ($262|0)!=(0|0);
    do {
     if ($263) {
      $264 = ((($31)) + 8|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = $20;
      $267 = HEAP32[$266>>2]|0;
      $268 = (__lou_allocMem(3,0,$265,$267)|0);
      $39 = $268;
      $269 = ($268|0)!=(0|0);
      if ($269) {
       $270 = $39;
       $271 = $20;
       $272 = HEAP32[$271>>2]|0;
       _memset(($270|0),42,($272|0))|0;
       break;
      } else {
       $48 = 0;
       break;
      }
     } else {
      $39 = 0;
     }
    } while(0);
    HEAP32[3716] = 0;
    $273 = $27;
    $274 = ($273|0)!=(0|0);
    $275 = $28;
    $276 = ($275|0)!=(0|0);
    $or$cond10 = $274 & $276;
    if ($or$cond10) {
     $277 = $27;
     HEAP32[3717] = $277;
     $278 = $28;
     $279 = HEAP32[$278>>2]|0;
     HEAP32[3718] = $279;
    } else {
     HEAP32[3717] = 0;
     HEAP32[3718] = 0;
    }
    $280 = HEAP32[3719]|0;
    $281 = ($280|0)!=(0|0);
    if (!($281)) {
     _initStringBufferPool();
    }
    $50 = 0;
    while(1) {
     $282 = $50;
     $283 = HEAP32[3719]|0;
     $284 = HEAP32[$283>>2]|0;
     $285 = ($282|0)<($284|0);
     if (!($285)) {
      break;
     }
     $286 = $50;
     (_releaseStringBuffer($286)|0);
     $287 = $50;
     $288 = (($287) + 1)|0;
     $50 = $288;
    }
    $289 = $20;
    $290 = HEAP32[$289>>2]|0;
    $291 = (_getStringBuffer($290)|0);
    $50 = $291;
    $292 = $50;
    HEAP32[$51>>2] = $292;
    $293 = ((($51)) + 4|0);
    $294 = $50;
    $295 = HEAP32[3719]|0;
    $296 = ((($295)) + 4|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + ($294<<2)|0);
    $299 = HEAP32[$298>>2]|0;
    HEAP32[$293>>2] = $299;
    $300 = ((($51)) + 8|0);
    $301 = $20;
    $302 = HEAP32[$301>>2]|0;
    HEAP32[$300>>2] = $302;
    $303 = ((($51)) + 12|0);
    HEAP32[$303>>2] = 0;
    ;HEAP32[$32>>2]=HEAP32[$51>>2]|0;HEAP32[$32+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$51+12>>2]|0;
    $304 = $34;
    $33 = $304;
    $305 = HEAP32[$29>>2]|0;
    $306 = ((($305)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)!=(0);
    $309 = $308 ? 0 : 1;
    $52 = $309;
    $310 = $33;
    $53 = $310;
    while(1) {
     $311 = $52;
     switch ($311|0) {
     case 0:  {
      $312 = HEAP32[$29>>2]|0;
      $313 = HEAP32[$30>>2]|0;
      $314 = $53;
      $315 = $37;
      $316 = $26;
      $317 = (_makeCorrections($312,$313,$31,$32,$314,$315,$54,$42,$43,$316)|0);
      $48 = $317;
      break;
     }
     case 1:  {
      $318 = HEAP32[$29>>2]|0;
      $319 = HEAP32[$30>>2]|0;
      $320 = $26;
      $321 = $52;
      $322 = $53;
      $323 = $37;
      $324 = $38;
      $325 = $39;
      $326 = $40;
      $327 = $41;
      $328 = $44;
      $329 = $45;
      $330 = $46;
      $331 = (_translateString($318,$319,$320,$321,$31,$32,$322,$323,$324,$325,$326,$327,$328,$54,$42,$43,$329,$330)|0);
      $48 = $331;
      break;
     }
     default: {
      $332 = HEAP32[$29>>2]|0;
      $333 = HEAP32[$30>>2]|0;
      $334 = $52;
      $335 = $53;
      $336 = $26;
      $337 = (_translatePass($332,$333,$334,$31,$32,$335,$54,$42,$43,$336)|0);
      $48 = $337;
     }
     }
     $338 = HEAP32[$54>>2]|0;
     $339 = ((($32)) + 12|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $53;
     $342 = (($341) + ($340<<2)|0);
     HEAP32[$342>>2] = $338;
     $343 = $53;
     $344 = $33;
     $345 = ($343|0)==($344|0);
     L114: do {
      if ($345) {
       $346 = $35;
       $53 = $346;
      } else {
       $347 = $36;
       $55 = $347;
       $348 = $55;
       $349 = $33;
       $350 = $20;
       $351 = HEAP32[$350>>2]|0;
       $352 = (($351) + 1)|0;
       $353 = $352<<2;
       _memcpy(($348|0),($349|0),($353|0))|0;
       $47 = 0;
       while(1) {
        $354 = $47;
        $355 = ((($32)) + 12|0);
        $356 = HEAP32[$355>>2]|0;
        $357 = ($354|0)<=($356|0);
        if (!($357)) {
         break L114;
        }
        $358 = $47;
        $359 = $53;
        $360 = (($359) + ($358<<2)|0);
        $361 = HEAP32[$360>>2]|0;
        $362 = ($361|0)<(0);
        if ($362) {
         $363 = $55;
         $364 = HEAP32[$363>>2]|0;
         $365 = $47;
         $366 = $33;
         $367 = (($366) + ($365<<2)|0);
         HEAP32[$367>>2] = $364;
        } else {
         $368 = $47;
         $369 = $53;
         $370 = (($369) + ($368<<2)|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = $55;
         $373 = (($372) + ($371<<2)|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $47;
         $376 = $33;
         $377 = (($376) + ($375<<2)|0);
         HEAP32[$377>>2] = $374;
        }
        $378 = $47;
        $379 = (($378) + 1)|0;
        $47 = $379;
       }
      }
     } while(0);
     $380 = $52;
     $381 = (($380) + 1)|0;
     $52 = $381;
     $382 = $52;
     $383 = HEAP32[$29>>2]|0;
     $384 = ((($383)) + 4|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = ($382|0)<=($385|0);
     $387 = $48;
     $388 = ($387|0)!=(0);
     $or$cond12 = $386 & $388;
     if (!($or$cond12)) {
      break;
     }
     $389 = HEAP32[$31>>2]|0;
     (_releaseStringBuffer($389)|0);
     $390 = HEAP32[$32>>2]|0;
     HEAP32[$57>>2] = $390;
     $391 = ((($57)) + 4|0);
     $392 = ((($32)) + 4|0);
     $393 = HEAP32[$392>>2]|0;
     HEAP32[$391>>2] = $393;
     $394 = ((($57)) + 8|0);
     $395 = ((($32)) + 12|0);
     $396 = HEAP32[$395>>2]|0;
     HEAP32[$394>>2] = $396;
     ;HEAP32[$31>>2]=HEAP32[$57>>2]|0;HEAP32[$31+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$57+8>>2]|0;
     $397 = $20;
     $398 = HEAP32[$397>>2]|0;
     $399 = (_getStringBuffer($398)|0);
     $56 = $399;
     $400 = $56;
     HEAP32[$58>>2] = $400;
     $401 = ((($58)) + 4|0);
     $402 = $56;
     $403 = HEAP32[3719]|0;
     $404 = ((($403)) + 4|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = (($405) + ($402<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     HEAP32[$401>>2] = $407;
     $408 = ((($58)) + 8|0);
     $409 = $20;
     $410 = HEAP32[$409>>2]|0;
     HEAP32[$408>>2] = $410;
     $411 = ((($58)) + 12|0);
     HEAP32[$411>>2] = 0;
     ;HEAP32[$32>>2]=HEAP32[$58>>2]|0;HEAP32[$32+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$58+12>>2]|0;
    }
    $412 = $48;
    $413 = ($412|0)!=(0);
    L127: do {
     if ($413) {
      $47 = 0;
      L129: while(1) {
       $414 = $47;
       $415 = ((($32)) + 12|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ($414|0)<($416|0);
       if (!($417)) {
        break;
       }
       $418 = $21;
       $419 = ($418|0)!=(0|0);
       do {
        if ($419) {
         $420 = $47;
         $421 = ((($32)) + 4|0);
         $422 = HEAP32[$421>>2]|0;
         $423 = (($422) + ($420<<1)|0);
         $424 = HEAP16[$423>>1]|0;
         $425 = $424&65535;
         $426 = $425 & 192;
         $427 = ($426|0)!=(0);
         $428 = $47;
         $429 = $21;
         $430 = (($429) + ($428<<1)|0);
         if ($427) {
          HEAP16[$430>>1] = 56;
          break;
         } else {
          HEAP16[$430>>1] = 48;
          break;
         }
        }
       } while(0);
       $431 = $26;
       $432 = $431 & 4;
       $433 = ($432|0)!=(0);
       do {
        if ($433) {
         $434 = $26;
         $435 = $434 & 64;
         $436 = ($435|0)!=(0);
         $437 = $47;
         $438 = ((($32)) + 4|0);
         $439 = HEAP32[$438>>2]|0;
         $440 = (($439) + ($437<<1)|0);
         $441 = HEAP16[$440>>1]|0;
         if ($436) {
          $442 = $441&65535;
          $443 = $442 & 255;
          $444 = $443 | 10240;
          $445 = $444&65535;
          $446 = $47;
          $447 = $19;
          $448 = (($447) + ($446<<1)|0);
          HEAP16[$448>>1] = $445;
          break;
         } else {
          $449 = $47;
          $450 = $19;
          $451 = (($450) + ($449<<1)|0);
          HEAP16[$451>>1] = $441;
          break;
         }
        } else {
         $452 = $47;
         $453 = ((($32)) + 4|0);
         $454 = HEAP32[$453>>2]|0;
         $455 = (($454) + ($452<<1)|0);
         $456 = HEAP16[$455>>1]|0;
         $457 = HEAP32[$30>>2]|0;
         $458 = (__lou_getCharFromDots($456,$457)|0);
         $459 = $47;
         $460 = $19;
         $461 = (($460) + ($459<<1)|0);
         HEAP16[$461>>1] = $458;
         $462 = $47;
         $463 = $19;
         $464 = (($463) + ($462<<1)|0);
         $465 = HEAP16[$464>>1]|0;
         $466 = ($465<<16>>16)!=(0);
         if (!($466)) {
          label = 98;
          break L129;
         }
        }
       } while(0);
       $473 = $47;
       $474 = (($473) + 1)|0;
       $47 = $474;
      }
      if ((label|0) == 98) {
       $467 = $16;
       $468 = $47;
       $469 = ((($32)) + 4|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = (($470) + ($468<<1)|0);
       $472 = (__lou_showDots($471,1)|0);
       HEAP32[$vararg_buffer17>>2] = $467;
       $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
       HEAP32[$vararg_ptr20>>2] = $472;
       __lou_logMessage(40000,7062,$vararg_buffer17);
       $14 = 0;
       $602 = $14;
       STACKTOP = sp;return ($602|0);
      }
      $475 = ((($32)) + 12|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = $33;
      $478 = (($477) + ($476<<2)|0);
      $479 = HEAP32[$478>>2]|0;
      $480 = $18;
      HEAP32[$480>>2] = $479;
      $481 = ((($32)) + 12|0);
      $482 = HEAP32[$481>>2]|0;
      $483 = $20;
      HEAP32[$483>>2] = $482;
      $484 = $24;
      $485 = ($484|0)!=(0|0);
      L149: do {
       if ($485) {
        $47 = 0;
        while(1) {
         $486 = $47;
         $487 = $20;
         $488 = HEAP32[$487>>2]|0;
         $489 = ($486|0)<($488|0);
         if (!($489)) {
          break L149;
         }
         $490 = $47;
         $491 = $33;
         $492 = (($491) + ($490<<2)|0);
         $493 = HEAP32[$492>>2]|0;
         $494 = ($493|0)<(0);
         $495 = $47;
         do {
          if ($494) {
           $496 = $24;
           $497 = (($496) + ($495<<2)|0);
           HEAP32[$497>>2] = 0;
          } else {
           $498 = $33;
           $499 = (($498) + ($495<<2)|0);
           $500 = HEAP32[$499>>2]|0;
           $501 = $18;
           $502 = HEAP32[$501>>2]|0;
           $503 = (($502) - 1)|0;
           $504 = ($500|0)>($503|0);
           if ($504) {
            $505 = $18;
            $506 = HEAP32[$505>>2]|0;
            $507 = (($506) - 1)|0;
            $508 = $47;
            $509 = $24;
            $510 = (($509) + ($508<<2)|0);
            HEAP32[$510>>2] = $507;
            break;
           } else {
            $511 = $47;
            $512 = $33;
            $513 = (($512) + ($511<<2)|0);
            $514 = HEAP32[$513>>2]|0;
            $515 = $47;
            $516 = $24;
            $517 = (($516) + ($515<<2)|0);
            HEAP32[$517>>2] = $514;
            break;
           }
          }
         } while(0);
         $518 = $47;
         $519 = (($518) + 1)|0;
         $47 = $519;
        }
       }
      } while(0);
      $520 = $23;
      $521 = ($520|0)!=(0|0);
      if (!($521)) {
       break;
      }
      $59 = -1;
      $60 = -1;
      $47 = 0;
      while(1) {
       $522 = $47;
       $523 = $20;
       $524 = HEAP32[$523>>2]|0;
       $525 = ($522|0)<($524|0);
       if (!($525)) {
        break;
       }
       $526 = $47;
       $527 = $33;
       $528 = (($527) + ($526<<2)|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = $59;
       $531 = ($529|0)>($530|0);
       if ($531) {
        while(1) {
         $532 = $59;
         $533 = $47;
         $534 = $33;
         $535 = (($534) + ($533<<2)|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ($532|0)<($536|0);
         if (!($537)) {
          break;
         }
         $538 = $59;
         $539 = ($538|0)>=(0);
         do {
          if ($539) {
           $540 = $59;
           $541 = $18;
           $542 = HEAP32[$541>>2]|0;
           $543 = ($540|0)<($542|0);
           if (!($543)) {
            break;
           }
           $544 = $60;
           $545 = ($544|0)<(0);
           $546 = $60;
           $547 = $545 ? 0 : $546;
           $548 = $59;
           $549 = $23;
           $550 = (($549) + ($548<<2)|0);
           HEAP32[$550>>2] = $547;
          }
         } while(0);
         $551 = $59;
         $552 = (($551) + 1)|0;
         $59 = $552;
        }
        $553 = $47;
        $60 = $553;
       }
       $554 = $47;
       $555 = (($554) + 1)|0;
       $47 = $555;
      }
      $556 = $59;
      $557 = ($556|0)<(0);
      if ($557) {
       $59 = 0;
      }
      while(1) {
       $558 = $59;
       $559 = $18;
       $560 = HEAP32[$559>>2]|0;
       $561 = ($558|0)<($560|0);
       if (!($561)) {
        break L127;
       }
       $562 = $60;
       $563 = $59;
       $564 = (($563) + 1)|0;
       $59 = $564;
       $565 = $23;
       $566 = (($565) + ($563<<2)|0);
       HEAP32[$566>>2] = $562;
      }
     }
    } while(0);
    $567 = $39;
    $568 = ($567|0)!=(0|0);
    if ($568) {
     $569 = $38;
     $570 = $39;
     $571 = ((($31)) + 8|0);
     $572 = HEAP32[$571>>2]|0;
     _memcpy(($569|0),($570|0),($572|0))|0;
     $573 = ((($31)) + 8|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = $38;
     $576 = (($575) + ($574)|0);
     HEAP8[$576>>0] = 0;
    }
    $577 = $25;
    $578 = ($577|0)!=(0|0);
    do {
     if ($578) {
      $579 = $25;
      $580 = HEAP32[$579>>2]|0;
      $581 = ($580|0)!=(-1);
      if (!($581)) {
       break;
      }
      $582 = $23;
      $583 = ($582|0)!=(0|0);
      if ($583) {
       $584 = $25;
       $585 = HEAP32[$584>>2]|0;
       $586 = $23;
       $587 = (($586) + ($585<<2)|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = $25;
       HEAP32[$589>>2] = $588;
       break;
      } else {
       $590 = HEAP32[$42>>2]|0;
       $591 = $25;
       HEAP32[$591>>2] = $590;
       break;
      }
     }
    } while(0);
    $592 = $28;
    $593 = ($592|0)!=(0|0);
    if ($593) {
     $594 = HEAP32[3716]|0;
     $595 = $28;
     HEAP32[$595>>2] = $594;
    }
    $596 = $20;
    $597 = HEAP32[$596>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $597;
    __lou_logMessage(0,7113,$vararg_buffer21);
    $598 = $19;
    $599 = $20;
    $600 = HEAP32[$599>>2]|0;
    __lou_logWidecharBuf(0,7145,$598,$600);
    $601 = $48;
    $14 = $601;
    $602 = $14;
    STACKTOP = sp;return ($602|0);
   }
  }
 }
 $14 = 0;
 $602 = $14;
 STACKTOP = sp;return ($602|0);
}
function _lou_translatePrehyphenated($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = 1;
 $28 = 0;
 $32 = $24;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $25;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $13 = 0;
   $90 = $13;
   STACKTOP = sp;return ($90|0);
  }
  $36 = $22;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $38 = $18;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39<<2;
   $41 = (_malloc($40)|0);
   $28 = $41;
   $42 = ($41|0)==(0|0);
   if ($42) {
    __lou_outOfMemory();
   }
   $43 = $28;
   $22 = $43;
  }
 }
 $44 = $14;
 $45 = $15;
 $46 = $16;
 $47 = $17;
 $48 = $18;
 $49 = $19;
 $50 = $20;
 $51 = $21;
 $52 = $22;
 $53 = $23;
 $54 = $26;
 $55 = (_lou_translate($44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54)|0);
 $56 = ($55|0)!=(0);
 $57 = $24;
 $58 = ($57|0)!=(0|0);
 $or$cond = $56 & $58;
 L12: do {
  if ($or$cond) {
   $29 = 0;
   $30 = 0;
   while(1) {
    $59 = $30;
    $60 = $18;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($59|0)<($61|0);
    if (!($62)) {
     break L12;
    }
    $63 = $30;
    $64 = $22;
    $65 = (($64) + ($63<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $31 = $66;
    $67 = $31;
    $68 = $29;
    $69 = ($67|0)<($68|0);
    if ($69) {
     break;
    }
    $70 = $31;
    $71 = $29;
    $72 = ($70|0)>($71|0);
    if ($72) {
     $73 = $31;
     $74 = $24;
     $75 = (($74) + ($73)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $30;
     $78 = $25;
     $79 = (($78) + ($77)|0);
     HEAP8[$79>>0] = $76;
    } else {
     $80 = $30;
     $81 = $25;
     $82 = (($81) + ($80)|0);
     HEAP8[$82>>0] = 48;
    }
    $83 = $31;
    $29 = $83;
    $84 = $30;
    $85 = (($84) + 1)|0;
    $30 = $85;
   }
   $27 = 0;
  }
 } while(0);
 $86 = $28;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $28;
  _free($88);
 }
 $89 = $27;
 $13 = $89;
 $90 = $13;
 STACKTOP = sp;return ($90|0);
}
function _lou_hyphenate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $12 = sp + 64|0;
 $16 = sp + 20|0;
 $18 = sp + 12|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = (_lou_getTable($22)|0);
 $11 = $23;
 $24 = $11;
 $25 = ($24|0)==(0|0);
 $26 = $7;
 $27 = ($26|0)==(0|0);
 $or$cond = $25 | $27;
 $28 = $9;
 $29 = ($28|0)==(0|0);
 $or$cond3 = $or$cond | $29;
 if (!($or$cond3)) {
  $30 = $11;
  $31 = ((($30)) + 1072|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  $34 = $8;
  $35 = ($34|0)>=(100);
  $or$cond5 = $33 | $35;
  if (!($or$cond5)) {
   $36 = $10;
   $37 = ($36|0)!=(0);
   do {
    if ($37) {
     $38 = $8;
     HEAP32[$18>>2] = $38;
     HEAP32[$16>>2] = 100;
     $39 = HEAP32[$16>>2]|0;
     $40 = $39<<2;
     $41 = (_malloc($40)|0);
     $14 = $41;
     $42 = $6;
     $43 = $7;
     $44 = $14;
     $45 = (_lou_backTranslate($42,$43,$18,$12,$16,0,0,0,$44,0,0)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $48 = HEAP32[$16>>2]|0;
      $49 = (($48) + 1)|0;
      $50 = $49;
      $51 = (_malloc($50)|0);
      $13 = $51;
      break;
     }
     $47 = $14;
     _free($47);
     $5 = 0;
     $217 = $5;
     STACKTOP = sp;return ($217|0);
    } else {
     $52 = $7;
     $53 = $8;
     $54 = $53<<1;
     _memcpy(($12|0),($52|0),($54|0))|0;
     $55 = $8;
     HEAP32[$16>>2] = $55;
     $56 = $9;
     $13 = $56;
    }
   } while(0);
   $15 = 0;
   while(1) {
    $57 = $15;
    $58 = HEAP32[$16>>2]|0;
    $59 = ($57|0)<($58|0);
    $60 = $15;
    $61 = $13;
    $62 = (($61) + ($60)|0);
    if (!($59)) {
     break;
    }
    HEAP8[$62>>0] = 48;
    $63 = $15;
    $64 = (($63) + 1)|0;
    $15 = $64;
   }
   HEAP8[$62>>0] = 0;
   $17 = 0;
   while(1) {
    while(1) {
     $65 = $17;
     $66 = HEAP32[$16>>2]|0;
     $67 = ($65|0)<($66|0);
     if (!($67)) {
      break;
     }
     $68 = $17;
     $69 = (($12) + ($68<<1)|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $11;
     $72 = (_findCharOrDots($70,0,$71)|0);
     $73 = ((($72)) + 16|0);
     $74 = $73;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + 4)|0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = $76 & 2;
     $81 = ($80|0)!=(0);
     $82 = (0)!=(0);
     $83 = $81 | $82;
     if ($83) {
      break;
     }
     $84 = $17;
     $85 = (($84) + 1)|0;
     $17 = $85;
    }
    $86 = $17;
    $87 = HEAP32[$16>>2]|0;
    $88 = ($86|0)==($87|0);
    if ($88) {
     break;
    }
    $89 = $17;
    $90 = (($89) + 1)|0;
    $19 = $90;
    while(1) {
     $91 = $19;
     $92 = HEAP32[$16>>2]|0;
     $93 = ($91|0)<($92|0);
     if (!($93)) {
      break;
     }
     $94 = $19;
     $95 = (($12) + ($94<<1)|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $11;
     $98 = (_findCharOrDots($96,0,$97)|0);
     $99 = ((($98)) + 16|0);
     $100 = $99;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = (($100) + 4)|0;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = $102 & 2;
     $107 = ($106|0)!=(0);
     $108 = (0)!=(0);
     $109 = $107 | $108;
     if (!($109)) {
      break;
     }
     $110 = $19;
     $111 = (($110) + 1)|0;
     $19 = $111;
    }
    $112 = $17;
    $113 = (($12) + ($112<<1)|0);
    $114 = $19;
    $115 = $17;
    $116 = (($114) - ($115))|0;
    $117 = $17;
    $118 = $13;
    $119 = (($118) + ($117)|0);
    $120 = $11;
    $121 = (_hyphenateWord($113,$116,$119,$120)|0);
    $122 = ($121|0)!=(0);
    if (!($122)) {
     label = 23;
     break;
    }
    $123 = $17;
    $124 = ($123|0)>=(2);
    if ($124) {
     $125 = $11;
     $126 = $17;
     $127 = (($126) - 1)|0;
     $128 = (($12) + ($127<<1)|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = (_isHyphen($125,$129)|0);
     $131 = ($130|0)!=(0);
     if ($131) {
      $132 = $17;
      $133 = (($132) - 2)|0;
      $134 = (($12) + ($133<<1)|0);
      $135 = HEAP16[$134>>1]|0;
      $136 = $11;
      $137 = (_findCharOrDots($135,0,$136)|0);
      $138 = ((($137)) + 16|0);
      $139 = $138;
      $140 = $139;
      $141 = HEAP32[$140>>2]|0;
      $142 = (($139) + 4)|0;
      $143 = $142;
      $144 = HEAP32[$143>>2]|0;
      $145 = $141 & 2;
      $146 = ($145|0)!=(0);
      $147 = (0)!=(0);
      $148 = $146 | $147;
      if ($148) {
       $149 = $17;
       $150 = $13;
       $151 = (($150) + ($149)|0);
       HEAP8[$151>>0] = 50;
      } else {
       label = 28;
      }
     } else {
      label = 28;
     }
    } else {
     label = 28;
    }
    if ((label|0) == 28) {
     label = 0;
     $152 = $17;
     $153 = $13;
     $154 = (($153) + ($152)|0);
     HEAP8[$154>>0] = 48;
    }
    $155 = $17;
    $156 = (($155) + 1)|0;
    $15 = $156;
    while(1) {
     $157 = $15;
     $158 = $19;
     $159 = ($157|0)<($158|0);
     if (!($159)) {
      break;
     }
     $160 = $15;
     $161 = $13;
     $162 = (($161) + ($160)|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $163 << 24 >> 24;
     $165 = $164 & 1;
     $166 = ($165|0)!=(0);
     $167 = $15;
     $168 = $13;
     $169 = (($168) + ($167)|0);
     if ($166) {
      HEAP8[$169>>0] = 49;
     } else {
      HEAP8[$169>>0] = 48;
     }
     $170 = $15;
     $171 = (($170) + 1)|0;
     $15 = $171;
    }
    $172 = $19;
    $173 = HEAP32[$16>>2]|0;
    $174 = ($172|0)==($173|0);
    if ($174) {
     break;
    }
    $175 = $19;
    $176 = $13;
    $177 = (($176) + ($175)|0);
    HEAP8[$177>>0] = 48;
    $178 = $19;
    $179 = (($178) + 1)|0;
    $17 = $179;
   }
   if ((label|0) == 23) {
    $5 = 0;
    $217 = $5;
    STACKTOP = sp;return ($217|0);
   }
   $180 = $10;
   $181 = ($180|0)!=(0);
   if ($181) {
    $15 = 0;
    while(1) {
     $182 = $15;
     $183 = $8;
     $184 = ($182|0)<($183|0);
     $185 = $15;
     $186 = $9;
     $187 = (($186) + ($185)|0);
     if (!($184)) {
      break;
     }
     HEAP8[$187>>0] = 48;
     $188 = $15;
     $189 = (($188) + 1)|0;
     $15 = $189;
    }
    HEAP8[$187>>0] = 0;
    $20 = -1;
    $15 = 0;
    while(1) {
     $190 = $15;
     $191 = HEAP32[$16>>2]|0;
     $192 = ($190|0)<($191|0);
     if (!($192)) {
      break;
     }
     $193 = $15;
     $194 = $14;
     $195 = (($194) + ($193<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $21 = $196;
     $197 = $21;
     $198 = $8;
     $199 = ($197|0)>($198|0);
     $200 = $21;
     $201 = ($200|0)<(0);
     $or$cond7 = $199 | $201;
     if ($or$cond7) {
      break;
     }
     $202 = $21;
     $203 = $20;
     $204 = ($202|0)>($203|0);
     if ($204) {
      $205 = $15;
      $206 = $13;
      $207 = (($206) + ($205)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $21;
      $210 = $9;
      $211 = (($210) + ($209)|0);
      HEAP8[$211>>0] = $208;
      $212 = $21;
      $20 = $212;
     }
     $213 = $15;
     $214 = (($213) + 1)|0;
     $15 = $214;
    }
    $215 = $13;
    _free($215);
    $216 = $14;
    _free($216);
   }
   $5 = 1;
   $217 = $5;
   STACKTOP = sp;return ($217|0);
  }
 }
 $5 = 0;
 $217 = $5;
 STACKTOP = sp;return ($217|0);
}
function _lou_dotsToChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = ($14|0)==(0|0);
 $16 = $7;
 $17 = ($16|0)==(0|0);
 $or$cond = $15 | $17;
 $18 = $8;
 $19 = ($18|0)==(0|0);
 $or$cond3 = $or$cond | $19;
 if ($or$cond3) {
  $5 = 0;
  $63 = $5;
  STACKTOP = sp;return ($63|0);
 }
 $20 = $6;
 $21 = (__lou_getDisplayTable($20)|0);
 $11 = $21;
 $22 = $11;
 $23 = ($22|0)==(0|0);
 $24 = $9;
 $25 = ($24|0)<=(0);
 $or$cond5 = $23 | $25;
 if ($or$cond5) {
  $5 = 0;
  $63 = $5;
  STACKTOP = sp;return ($63|0);
 }
 $12 = 0;
 while(1) {
  $26 = $12;
  $27 = $9;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $12;
  $30 = $7;
  $31 = (($30) + ($29<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $13 = $32;
  $33 = $13;
  $34 = $33&65535;
  $35 = $34 & 32768;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $37 = $13;
   $38 = $37&65535;
   $39 = $38 & 65280;
   $40 = ($39|0)==(10240);
   if ($40) {
    $41 = $13;
    $42 = $41&65535;
    $43 = $42 & 255;
    $44 = $43 | 32768;
    $45 = $44&65535;
    $13 = $45;
   }
  }
  $46 = $13;
  $47 = $11;
  $48 = (__lou_getCharFromDots($46,$47)|0);
  $49 = $12;
  $50 = $8;
  $51 = (($50) + ($49<<1)|0);
  HEAP16[$51>>1] = $48;
  $52 = $12;
  $53 = $8;
  $54 = (($53) + ($52<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $12;
   $59 = $8;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = 32;
  }
  $61 = $12;
  $62 = (($61) + 1)|0;
  $12 = $62;
 }
 $5 = 1;
 $63 = $5;
 STACKTOP = sp;return ($63|0);
}
function _lou_charToDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 $15 = $7;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 | $16;
 $17 = $8;
 $18 = ($17|0)==(0|0);
 $or$cond3 = $or$cond | $18;
 if ($or$cond3) {
  $5 = 0;
  $49 = $5;
  STACKTOP = sp;return ($49|0);
 }
 $19 = $6;
 $20 = (__lou_getDisplayTable($19)|0);
 $11 = $20;
 $21 = $11;
 $22 = ($21|0)==(0|0);
 $23 = $9;
 $24 = ($23|0)<=(0);
 $or$cond5 = $22 | $24;
 if ($or$cond5) {
  $5 = 0;
  $49 = $5;
  STACKTOP = sp;return ($49|0);
 }
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $9;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $10;
  $29 = $28 & 64;
  $30 = ($29|0)!=(0);
  $31 = $12;
  $32 = $7;
  $33 = (($32) + ($31<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $11;
  $36 = (__lou_getDotsForChar($34,$35)|0);
  if ($30) {
   $37 = $36&65535;
   $38 = $37 & 255;
   $39 = $38 | 10240;
   $40 = $39&65535;
   $41 = $12;
   $42 = $8;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = $40;
  } else {
   $44 = $12;
   $45 = $8;
   $46 = (($45) + ($44<<1)|0);
   HEAP16[$46>>1] = $36;
  }
  $47 = $12;
  $48 = (($47) + 1)|0;
  $12 = $48;
 }
 $5 = 1;
 $49 = $5;
 STACKTOP = sp;return ($49|0);
}
function _findCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = (__lou_charHash($11)|0);
 $10 = $12;
 $13 = $5;
 $14 = ($13|0)==(0);
 $15 = $10;
 $16 = $6;
 if ($14) {
  $17 = ((($16)) + 1856|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $7 = 8;
 } else {
  $20 = ((($16)) + 6348|0);
  $21 = (($20) + ($15<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $9 = $22;
  $7 = 40;
 }
 while(1) {
  $23 = $9;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $9;
  $26 = $6;
  $27 = ((($26)) + 21088|0);
  $28 = (($27) + ($25<<3)|0);
  $8 = $28;
  $29 = $8;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $4;
  $34 = $33&65535;
  $35 = ($32|0)==($34|0);
  $36 = $8;
  if ($35) {
   label = 6;
   break;
  }
  $37 = HEAP32[$36>>2]|0;
  $9 = $37;
 }
 if ((label|0) == 6) {
  $3 = $36;
  $46 = $3;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 8) {
  $38 = $4;
  $39 = $7;
  $40 = ((($39)) + 28|0);
  HEAP16[$40>>1] = $38;
  $41 = $7;
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $7;
  $44 = ((($43)) + 24|0);
  HEAP16[$44>>1] = $38;
  $45 = $7;
  $3 = $45;
  $46 = $3;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _hyphenateWord($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $20 = $8;
 $21 = ((($20)) + 1072|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $8;
 $24 = ((($23)) + 21088|0);
 $25 = (($24) + ($22<<3)|0);
 $15 = $25;
 $26 = $8;
 $27 = ((($26)) + 1072|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $6;
  $31 = (($30) + 3)|0;
  $32 = ($31|0)>(2048);
  if (!($32)) {
   $33 = $6;
   $34 = (($33) + 3)|0;
   $35 = (_calloc($34,2)|0);
   $9 = $35;
   $36 = $9;
   HEAP16[$36>>1] = 46;
   $10 = 0;
   while(1) {
    $37 = $10;
    $38 = $6;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $10;
    $41 = $5;
    $42 = (($41) + ($40<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $8;
    $45 = (_findCharOrDots($43,0,$44)|0);
    $46 = ((($45)) + 28|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $10;
    $49 = (($48) + 1)|0;
    $50 = $9;
    $51 = (($50) + ($49<<1)|0);
    HEAP16[$51>>1] = $47;
    $52 = $10;
    $53 = $7;
    $54 = (($53) + ($52)|0);
    HEAP8[$54>>0] = 48;
    $55 = $10;
    $56 = (($55) + 1)|0;
    $10 = $56;
   }
   $57 = $6;
   $58 = (($57) + 1)|0;
   $59 = $9;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = 46;
   $13 = 0;
   $10 = 0;
   while(1) {
    $61 = $10;
    $62 = $6;
    $63 = (($62) + 2)|0;
    $64 = ($61|0)<($63|0);
    if (!($64)) {
     break;
    }
    $65 = $10;
    $66 = $9;
    $67 = (($66) + ($65<<1)|0);
    $68 = HEAP16[$67>>1]|0;
    $14 = $68;
    L11: while(1) {
     $69 = $13;
     $70 = ($69|0)==(65535);
     if ($70) {
      label = 11;
      break;
     }
     $71 = $13;
     $72 = $15;
     $73 = (($72) + (($71*12)|0)|0);
     $16 = $73;
     $74 = $16;
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)!=(0);
     L14: do {
      if ($76) {
       $77 = $16;
       $78 = HEAP32[$77>>2]|0;
       $79 = $8;
       $80 = ((($79)) + 21088|0);
       $81 = (($80) + ($78<<3)|0);
       $17 = $81;
       $11 = 0;
       while(1) {
        $82 = $11;
        $83 = $16;
        $84 = ((($83)) + 10|0);
        $85 = HEAP16[$84>>1]|0;
        $86 = $85&65535;
        $87 = ($82|0)<($86|0);
        if (!($87)) {
         break L14;
        }
        $88 = $11;
        $89 = $17;
        $90 = (($89) + ($88<<2)|0);
        $91 = HEAP16[$90>>1]|0;
        $92 = $91&65535;
        $93 = $14;
        $94 = $93&65535;
        $95 = ($92|0)==($94|0);
        $96 = $11;
        if ($95) {
         label = 16;
         break L11;
        }
        $109 = (($96) + 1)|0;
        $11 = $109;
       }
      }
     } while(0);
     $110 = $16;
     $111 = ((($110)) + 8|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $13 = $113;
    }
    L21: do {
     if ((label|0) == 11) {
      label = 0;
      $13 = 0;
     }
     else if ((label|0) == 16) {
      label = 0;
      $97 = $17;
      $98 = (($97) + ($96<<2)|0);
      $99 = ((($98)) + 2|0);
      $100 = HEAP16[$99>>1]|0;
      $101 = $100&65535;
      $13 = $101;
      $102 = $13;
      $103 = $15;
      $104 = (($103) + (($102*12)|0)|0);
      $16 = $104;
      $105 = $16;
      $106 = ((($105)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)!=(0);
      if ($108) {
       $114 = $16;
       $115 = ((($114)) + 4|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = $8;
       $118 = ((($117)) + 21088|0);
       $119 = (($118) + ($116<<3)|0);
       $18 = $119;
       $120 = $10;
       $121 = (($120) + 1)|0;
       $122 = $18;
       $123 = (_strlen($122)|0);
       $124 = (($121) - ($123))|0;
       $19 = $124;
       $125 = $18;
       $126 = (_strlen($125)|0);
       $127 = $6;
       $128 = $19;
       $129 = (($127) - ($128))|0;
       $130 = ($126|0)<($129|0);
       if ($130) {
        $131 = $18;
        $132 = (_strlen($131)|0);
        $136 = $132;
       } else {
        $133 = $6;
        $134 = $19;
        $135 = (($133) - ($134))|0;
        $136 = $135;
       }
       $12 = $136;
       $11 = 0;
       while(1) {
        $137 = $11;
        $138 = $12;
        $139 = ($137|0)<($138|0);
        if (!($139)) {
         break L21;
        }
        $140 = $19;
        $141 = $11;
        $142 = (($140) + ($141))|0;
        $143 = $7;
        $144 = (($143) + ($142)|0);
        $145 = HEAP8[$144>>0]|0;
        $146 = $145 << 24 >> 24;
        $147 = $11;
        $148 = $18;
        $149 = (($148) + ($147)|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = $150 << 24 >> 24;
        $152 = ($146|0)<($151|0);
        if ($152) {
         $153 = $11;
         $154 = $18;
         $155 = (($154) + ($153)|0);
         $156 = HEAP8[$155>>0]|0;
         $157 = $19;
         $158 = $11;
         $159 = (($157) + ($158))|0;
         $160 = $7;
         $161 = (($160) + ($159)|0);
         HEAP8[$161>>0] = $156;
        }
        $162 = $11;
        $163 = (($162) + 1)|0;
        $11 = $163;
       }
      }
     }
    } while(0);
    $164 = $10;
    $165 = (($164) + 1)|0;
    $10 = $165;
   }
   $166 = $6;
   $167 = $7;
   $168 = (($167) + ($166)|0);
   HEAP8[$168>>0] = 0;
   $169 = $9;
   _free($169);
   $4 = 1;
   $170 = $4;
   STACKTOP = sp;return ($170|0);
  }
 }
 $4 = 0;
 $170 = $4;
 STACKTOP = sp;return ($170|0);
}
function _isHyphen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = $3;
 $9 = (_findCharOrDots($7,0,$8)|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 6;
   break;
  }
  $14 = $6;
  $15 = $3;
  $16 = ((($15)) + 21088|0);
  $17 = (($16) + ($14<<3)|0);
  $5 = $17;
  $18 = $5;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(109);
  if ($21) {
   label = 4;
   break;
  }
  $22 = $5;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $6 = $24;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _checkAttr($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $5 = $0;
 $9 = $6;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $7 = $3;
 $8 = $4;
 $13 = $5;
 $14 = $7;
 $15 = $8;
 $16 = (_findCharOrDots($13,$14,$15)|0);
 $17 = ((($16)) + 16|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $20 & $26;
 $31 = $23 & $29;
 $32 = ($30|0)!=(0);
 $33 = ($31|0)!=(0);
 $34 = $32 | $33;
 $35 = $34 ? 1 : 0;
 STACKTOP = sp;return ($35|0);
}
function _initStringBufferPool() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 HEAP32[$2>>2] = 3;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 14908;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 14920;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 11;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 HEAP32[3719] = $11;
 STACKTOP = sp;return;
}
function _releaseStringBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[3719]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $2;
   $11 = HEAP32[3719]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
   $16 = $3;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[3719]|0;
    $19 = ((($18)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = HEAP32[3719]|0;
     $23 = ((($22)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = HEAP32[3719]|0;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     FUNCTION_TABLE_vi[$24 & 31]($30);
    }
   }
   $31 = $2;
   $32 = HEAP32[3719]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   HEAP32[$35>>2] = 0;
   $36 = $3;
   $1 = $36;
   $37 = $1;
   STACKTOP = sp;return ($37|0);
  }
 }
 $1 = 0;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _getStringBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[3719]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = HEAP32[3719]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[3719]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = $2;
  $20 = (FUNCTION_TABLE_iii[$17 & 31]($18,$19)|0);
  $21 = $3;
  $22 = HEAP32[3719]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  HEAP32[$25>>2] = $20;
  $26 = $3;
  $27 = HEAP32[3719]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  HEAP32[$30>>2] = 1;
  $31 = $3;
  $1 = $31;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  __lou_outOfMemory();
  $1 = -1;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _makeCorrections($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$old = 0, $$old2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 128|0;
 $13 = sp + 112|0;
 $21 = sp + 80|0;
 $22 = sp + 76|0;
 $23 = sp + 72|0;
 $24 = sp + 68|0;
 $25 = sp + 64|0;
 $26 = sp + 60|0;
 $27 = sp + 56|0;
 $28 = sp + 40|0;
 $29 = sp + 36|0;
 $30 = sp + 144|0;
 $11 = $0;
 $12 = $1;
 HEAP32[$13>>2] = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $40 = HEAP32[$13>>2]|0;
 $31 = $40;
 $41 = $11;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $10 = 1;
  $274 = $10;
  STACKTOP = sp;return ($274|0);
 }
 HEAP32[$21>>2] = 0;
 $45 = $14;
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = 0;
 $32 = 1;
 __lou_resetPassVariables();
 L5: while(1) {
  $47 = HEAP32[$21>>2]|0;
  $48 = HEAP32[$13>>2]|0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   label = 35;
   break;
  }
  $52 = HEAP32[$13>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$21>>2]|0;
  $56 = (($54) - ($55))|0;
  $33 = $56;
  $34 = 0;
  $57 = $32;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $11;
   $60 = HEAP32[$21>>2]|0;
   $61 = HEAP32[$13>>2]|0;
   $62 = (_findForPassRule($59,$60,0,$61,$22,$23,$24,$25,$26,$27,$28,$29,$30)|0);
   $63 = ($62|0)==(0);
   $64 = $34;
   $65 = ($64|0)<(3);
   $or$cond3 = $63 & $65;
   if ($or$cond3) {
    label = 8;
   } else {
    label = 23;
   }
  } else {
   label = 7;
  }
  L10: while(1) {
   if ((label|0) == 7) {
    label = 0;
    $$old = $34;
    $$old2 = ($$old|0)<(3);
    if ($$old2) {
     label = 8;
     continue;
    } else {
     label = 23;
     continue;
    }
   }
   else if ((label|0) == 8) {
    label = 0;
    $35 = 0;
    $66 = $34;
    switch ($66|0) {
    case 0:  {
     $67 = $33;
     $68 = ($67|0)>=(2);
     if ($68) {
      $69 = HEAP32[$21>>2]|0;
      $70 = HEAP32[$13>>2]|0;
      $71 = ((($70)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($72) + ($69<<1)|0);
      $74 = $11;
      $75 = (__lou_stringHash($73,1,$74)|0);
      $76 = $11;
      $77 = ((($76)) + 12104|0);
      $78 = (($77) + ($75<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $35 = $79;
     }
     break;
    }
    case 1:  {
     $80 = $33;
     $81 = ($80|0)>=(1);
     if ($81) {
      $33 = 1;
      $82 = HEAP32[$21>>2]|0;
      $83 = HEAP32[$13>>2]|0;
      $84 = ((($83)) + 4|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($85) + ($82<<1)|0);
      $87 = HEAP16[$86>>1]|0;
      $88 = $11;
      $89 = (_findCharOrDots($87,0,$88)|0);
      $90 = ((($89)) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $35 = $91;
     }
     break;
    }
    case 2:  {
     HEAP32[$22>>2] = 82;
     $35 = 0;
     break;
    }
    default: {
    }
    }
    while(1) {
     $92 = $35;
     $93 = ($92|0)!=(0);
     if (!($93)) {
      break;
     }
     $94 = $35;
     $95 = $11;
     $96 = ((($95)) + 21088|0);
     $97 = (($96) + ($94<<3)|0);
     HEAP32[$23>>2] = $97;
     $98 = HEAP32[$23>>2]|0;
     $99 = ((($98)) + 28|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$22>>2] = $100;
     $101 = HEAP32[$23>>2]|0;
     $102 = ((($101)) + 34|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103 << 16 >> 16;
     HEAP32[$24>>2] = $104;
     $105 = $34;
     $106 = ($105|0)==(1);
     if ($106) {
      label = 18;
     } else {
      $107 = HEAP32[$24>>2]|0;
      $108 = $33;
      $109 = ($107|0)<=($108|0);
      if ($109) {
       $110 = HEAP32[$23>>2]|0;
       $111 = ((($110)) + 38|0);
       $112 = HEAP32[$21>>2]|0;
       $113 = HEAP32[$13>>2]|0;
       $114 = ((($113)) + 4|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($115) + ($112<<1)|0);
       $117 = HEAP32[$24>>2]|0;
       $118 = $11;
       $119 = (_compareChars($111,$116,$117,0,$118)|0);
       $120 = ($119|0)!=(0);
       if ($120) {
        label = 18;
       }
      }
     }
     if ((label|0) == 18) {
      label = 0;
      $121 = $32;
      $122 = ($121|0)!=(0);
      $123 = HEAP32[$22>>2]|0;
      $124 = ($123|0)==(74);
      $or$cond = $122 & $124;
      if ($or$cond) {
       $125 = $11;
       $126 = HEAP32[$21>>2]|0;
       $127 = HEAP32[$13>>2]|0;
       $128 = HEAP32[$22>>2]|0;
       $129 = HEAP32[$23>>2]|0;
       $130 = (_passDoTest($125,$126,$127,$128,$129,$25,$26,$27,$28,$29,$30)|0);
       $131 = ($130|0)!=(0);
       if ($131) {
        label = 20;
        break;
       }
      }
     }
     $132 = HEAP32[$23>>2]|0;
     $133 = HEAP32[$132>>2]|0;
     $35 = $133;
    }
    if ((label|0) == 20) {
     label = 0;
     $34 = 4;
    }
    $134 = $34;
    $135 = (($134) + 1)|0;
    $34 = $135;
    label = 7;
    continue;
   }
   else if ((label|0) == 23) {
    label = 0;
    $32 = 1;
    $136 = HEAP32[$22>>2]|0;
    switch ($136|0) {
    case 82:  {
     label = 24;
     break L10;
     break;
    }
    case 74:  {
     break L10;
     break;
    }
    default: {
     continue L5;
    }
    }
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $137 = $14;
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $14;
   $141 = ((($140)) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($139|0)>=($142|0);
   if ($143) {
    break;
   }
   $144 = HEAP32[$21>>2]|0;
   $145 = $14;
   $146 = ((($145)) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $15;
   $149 = (($148) + ($147<<2)|0);
   HEAP32[$149>>2] = $144;
   $150 = HEAP32[$21>>2]|0;
   $151 = (($150) + 1)|0;
   HEAP32[$21>>2] = $151;
   $152 = HEAP32[$13>>2]|0;
   $153 = ((($152)) + 4|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + ($150<<1)|0);
   $156 = HEAP16[$155>>1]|0;
   $157 = $14;
   $158 = ((($157)) + 12|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) + 1)|0;
   HEAP32[$158>>2] = $160;
   $161 = $14;
   $162 = ((($161)) + 4|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + ($159<<1)|0);
   HEAP16[$164>>1] = $156;
   continue;
  }
  $165 = HEAP32[$13>>2]|0;
  $36 = $165;
  $166 = HEAP32[$21>>2]|0;
  $37 = $166;
  $167 = HEAP32[3717]|0;
  $168 = ($167|0)!=(0|0);
  if ($168) {
   $169 = HEAP32[3716]|0;
   $170 = HEAP32[3718]|0;
   $171 = ($169|0)<($170|0);
   if ($171) {
    $172 = HEAP32[$23>>2]|0;
    $173 = HEAP32[3716]|0;
    $174 = (($173) + 1)|0;
    HEAP32[3716] = $174;
    $175 = HEAP32[3717]|0;
    $176 = (($175) + ($173<<2)|0);
    HEAP32[$176>>2] = $172;
   }
  }
  $177 = $11;
  $178 = $12;
  $179 = $14;
  $180 = $15;
  $181 = HEAP32[$22>>2]|0;
  $182 = HEAP32[$25>>2]|0;
  $183 = HEAP32[$26>>2]|0;
  $184 = HEAP32[$27>>2]|0;
  $185 = $18;
  $186 = $19;
  $187 = HEAP32[$29>>2]|0;
  $188 = HEAP16[$30>>1]|0;
  $189 = $20;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$28+12>>2]|0;
  $190 = (_passDoAction($177,$178,$13,$179,$180,$181,$23,$182,$183,$184,$21,$$byval_copy,$185,$186,$187,$188,$189)|0);
  $191 = ($190|0)!=(0);
  if (!($191)) {
   break;
  }
  $192 = HEAP32[$13>>2]|0;
  $193 = HEAP32[$192>>2]|0;
  $194 = $36;
  $195 = HEAP32[$194>>2]|0;
  $196 = ($193|0)!=($195|0);
  if ($196) {
   $197 = $36;
   $198 = HEAP32[$197>>2]|0;
   $199 = $31;
   $200 = HEAP32[$199>>2]|0;
   $201 = ($198|0)!=($200|0);
   if ($201) {
    $202 = $36;
    $203 = HEAP32[$202>>2]|0;
    (_releaseStringBuffer($203)|0);
   }
  }
  $204 = HEAP32[$21>>2]|0;
  $205 = $37;
  $206 = ($204|0)==($205|0);
  if (!($206)) {
   continue;
  }
  $32 = 0;
 }
 if ((label|0) == 35) {
  $207 = $14;
  $208 = ((($207)) + 12|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $209<<1;
  $211 = (_malloc($210)|0);
  $39 = $211;
  $212 = ($211|0)==(0|0);
  if ($212) {
   __lou_outOfMemory();
  }
  $38 = 0;
  while(1) {
   $213 = $38;
   $214 = $14;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($213|0)<($216|0);
   if (!($217)) {
    break;
   }
   $218 = $38;
   $219 = $15;
   $220 = (($219) + ($218<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ($221|0)<(0);
   do {
    if ($222) {
     $223 = $16;
     $224 = HEAP16[$223>>1]|0;
     $225 = $38;
     $226 = $39;
     $227 = (($226) + ($225<<1)|0);
     HEAP16[$227>>1] = $224;
    } else {
     $228 = $38;
     $229 = $15;
     $230 = (($229) + ($228<<2)|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = HEAP32[$13>>2]|0;
     $233 = ((($232)) + 8|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ($231|0)>=($234|0);
     if ($235) {
      $236 = HEAP32[$13>>2]|0;
      $237 = ((($236)) + 8|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = (($238) - 1)|0;
      $240 = $16;
      $241 = (($240) + ($239<<1)|0);
      $242 = HEAP16[$241>>1]|0;
      $243 = $38;
      $244 = $39;
      $245 = (($244) + ($243<<1)|0);
      HEAP16[$245>>1] = $242;
      break;
     } else {
      $246 = $38;
      $247 = $15;
      $248 = (($247) + ($246<<2)|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = $16;
      $251 = (($250) + ($249<<1)|0);
      $252 = HEAP16[$251>>1]|0;
      $253 = $38;
      $254 = $39;
      $255 = (($254) + ($253<<1)|0);
      HEAP16[$255>>1] = $252;
      break;
     }
    }
   } while(0);
   $256 = $38;
   $257 = (($256) + 1)|0;
   $38 = $257;
  }
  $258 = $16;
  $259 = $39;
  $260 = $14;
  $261 = ((($260)) + 12|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = $262<<1;
  _memcpy(($258|0),($259|0),($263|0))|0;
  $264 = $39;
  _free($264);
 }
 $265 = HEAP32[$21>>2]|0;
 $266 = $17;
 HEAP32[$266>>2] = $265;
 $267 = HEAP32[$13>>2]|0;
 $268 = HEAP32[$267>>2]|0;
 $269 = $31;
 $270 = HEAP32[$269>>2]|0;
 $271 = ($268|0)!=($270|0);
 if ($271) {
  $272 = HEAP32[$13>>2]|0;
  $273 = HEAP32[$272>>2]|0;
  (_releaseStringBuffer($273)|0);
 }
 $10 = 1;
 $274 = $10;
 STACKTOP = sp;return ($274|0);
}
function _translateString($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 var $$byval_copy = 0, $$byval_copy12 = 0, $$off = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $$byval_copy12 = sp + 288|0;
 $$byval_copy = sp + 272|0;
 $22 = sp + 252|0;
 $36 = sp + 196|0;
 $37 = sp + 192|0;
 $39 = sp + 184|0;
 $40 = sp + 180|0;
 $41 = sp + 176|0;
 $42 = sp + 172|0;
 $43 = sp + 168|0;
 $44 = sp + 152|0;
 $45 = sp + 148|0;
 $46 = sp + 306|0;
 $47 = sp + 144|0;
 $48 = sp + 140|0;
 $49 = sp + 128|0;
 $50 = sp + 124|0;
 $51 = sp + 120|0;
 $53 = sp + 112|0;
 $56 = sp + 92|0;
 $58 = sp + 84|0;
 $59 = sp;
 $60 = sp + 304|0;
 $62 = sp + 76|0;
 $76 = sp + 12|0;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 HEAP32[$22>>2] = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $78 = HEAP32[$22>>2]|0;
 $54 = $78;
 HEAP32[196] = 1;
 $79 = $18;
 $80 = HEAP32[$22>>2]|0;
 $81 = $25;
 (_markSyllables($79,$80,$81)|0);
 HEAP32[$47>>2] = 0;
 HEAP32[$56>>2] = 0;
 $82 = ((($56)) + 4|0);
 HEAP32[$82>>2] = 0;
 $83 = ((($56)) + 8|0);
 HEAP32[$83>>2] = 0;
 ;HEAP32[$49>>2]=HEAP32[$56>>2]|0;HEAP32[$49+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$56+8>>2]|0;
 HEAP32[$48>>2] = 0;
 $38 = 114;
 $84 = $23;
 $85 = ((($84)) + 12|0);
 HEAP32[$85>>2] = 0;
 HEAP32[$36>>2] = 0;
 $57 = 1;
 HEAP32[$50>>2] = 0;
 __lou_resetPassVariables();
 $86 = $25;
 $87 = ($86|0)!=(0|0);
 L1: do {
  if ($87) {
   $88 = $18;
   $89 = (_capsletterDefined($88)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $55 = 0;
    while(1) {
     $91 = $55;
     $92 = HEAP32[$22>>2]|0;
     $93 = ((($92)) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($91|0)<($94|0);
     if (!($95)) {
      break L1;
     }
     $96 = $55;
     $97 = HEAP32[$22>>2]|0;
     $98 = ((($97)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + ($96<<1)|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $18;
     $103 = (_checkAttr($101,16,0,0,$102)|0);
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = $55;
      $106 = $25;
      $107 = (($106) + ($105<<1)|0);
      $108 = HEAP16[$107>>1]|0;
      $109 = $108&65535;
      $110 = $109 | 32768;
      $111 = $110&65535;
      HEAP16[$107>>1] = $111;
     }
     $112 = $55;
     $113 = (($112) + 1)|0;
     $55 = $113;
    }
   }
  }
 } while(0);
 $114 = $18;
 $115 = HEAP32[$22>>2]|0;
 $116 = $25;
 $117 = $28;
 $118 = $29;
 $119 = $30;
 _markEmphases($114,$115,$116,$117,$118,$119);
 L11: while(1) {
  $120 = HEAP32[$36>>2]|0;
  $121 = HEAP32[$22>>2]|0;
  $122 = ((($121)) + 8|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($120|0)<($123|0);
  if (!($124)) {
   label = 151;
   break;
  }
  $125 = HEAP32[$36>>2]|0;
  $126 = $34;
  $127 = ($125|0)>=($126|0);
  if ($127) {
   $128 = HEAP32[$36>>2]|0;
   $129 = $35;
   $130 = ($128|0)<($129|0);
   if ($130) {
    HEAP32[$58>>2] = 2;
    $131 = HEAP32[$36>>2]|0;
    $132 = $35;
    $133 = $18;
    $134 = $19;
    $135 = HEAP32[$22>>2]|0;
    $136 = $23;
    $137 = $24;
    $138 = $29;
    $139 = $32;
    $140 = $20;
    $141 = (_doCompTrans($131,$132,$133,$134,$36,$135,$136,$137,$138,$39,$139,$58,$140)|0);
    $142 = ($141|0)!=(0);
    if ($142) {
     continue;
    } else {
     break;
    }
   }
  }
  $143 = $18;
  $144 = HEAP32[$36>>2]|0;
  $145 = HEAP32[$22>>2]|0;
  _setBefore($143,$144,$145,$59);
  $146 = HEAP32[$36>>2]|0;
  $147 = HEAP32[$22>>2]|0;
  $148 = ((($147)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($146|0)>=($149|0);
  if ($150) {
   label = 151;
   break;
  }
  $151 = HEAP32[$48>>2]|0;
  $152 = ($151|0)!=(0);
  if (!($152)) {
   $153 = HEAP32[$36>>2]|0;
   $154 = $25;
   $155 = (($154) + ($153<<1)|0);
   $156 = HEAP16[$155>>1]|0;
   $157 = $156&65535;
   $158 = $157 & 4096;
   HEAP32[$48>>2] = $158;
  }
  $159 = HEAP32[$36>>2]|0;
  $160 = $25;
  $161 = (($160) + ($159<<1)|0);
  $162 = HEAP16[$161>>1]|0;
  $163 = $162&65535;
  $164 = $163 & 2048;
  $165 = ($164|0)!=(0);
  if ($165) {
   $166 = HEAP32[$36>>2]|0;
   $167 = HEAP32[$22>>2]|0;
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + ($166<<1)|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $19;
   $173 = (__lou_getDotsForChar($171,$172)|0);
   HEAP16[$60>>1] = $173;
   $174 = HEAP32[$36>>2]|0;
   $175 = HEAP32[$22>>2]|0;
   $176 = ((($175)) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + ($174<<1)|0);
   $179 = HEAP16[$178>>1]|0;
   $180 = $179&65535;
   $181 = ($180|0)<(32);
   if ($181) {
    break;
   }
   $182 = HEAP32[$36>>2]|0;
   $183 = HEAP32[$22>>2]|0;
   $184 = ((($183)) + 4|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + ($182<<1)|0);
   $187 = HEAP16[$186>>1]|0;
   $188 = $187&65535;
   $189 = ($188|0)>(126);
   if ($189) {
    break;
   }
   $190 = HEAP32[$36>>2]|0;
   $191 = HEAP32[$22>>2]|0;
   $192 = $23;
   $193 = $24;
   $194 = $32;
   $195 = $33;
   $196 = (_for_updatePositions($60,1,1,0,$190,$191,$192,$193,$194,$195)|0);
   $197 = ($196|0)!=(0);
   if (!($197)) {
    break;
   }
   $198 = HEAP32[$36>>2]|0;
   $199 = (($198) + 1)|0;
   HEAP32[$36>>2] = $199;
   $57 = 1;
   $200 = HEAP32[$36>>2]|0;
   HEAP32[$50>>2] = $200;
   continue;
  }
  $201 = $18;
  $202 = HEAP32[$36>>2]|0;
  $203 = $23;
  $204 = $24;
  $205 = $20;
  $206 = HEAP32[$22>>2]|0;
  $207 = $25;
  $208 = $29;
  $209 = $38;
  $210 = $57;
  $211 = $32;
  $212 = HEAP32[$211>>2]|0;
  $213 = HEAP32[$48>>2]|0;
  $214 = $34;
  $215 = $35;
  $216 = $59;
  $217 = $216;
  $218 = HEAP32[$217>>2]|0;
  $219 = (($216) + 4)|0;
  $220 = $219;
  $221 = HEAP32[$220>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$203>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$203+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$203+12>>2]|0;
  _for_selectRule($201,$202,$$byval_copy,$204,$205,$206,$207,$208,$37,$209,$39,$40,$41,$42,$43,$44,$210,$212,$53,$213,$214,$215,$218,$221,$51,$45,$46);
  $222 = HEAP32[$37>>2]|0;
  $223 = ($222|0)!=(73);
  $224 = HEAP32[3717]|0;
  $225 = ($224|0)!=(0|0);
  $or$cond11 = $223 & $225;
  if ($or$cond11) {
   $226 = HEAP32[3716]|0;
   $227 = HEAP32[3718]|0;
   $228 = ($226|0)<($227|0);
   if ($228) {
    $229 = HEAP32[$39>>2]|0;
    $230 = HEAP32[3716]|0;
    $231 = (($230) + 1)|0;
    HEAP32[3716] = $231;
    $232 = HEAP32[3717]|0;
    $233 = (($232) + ($230<<2)|0);
    HEAP32[$233>>2] = $229;
   }
  }
  $234 = HEAP32[$37>>2]|0;
  $$off = (($234) + -87)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   $235 = $18;
   $236 = $19;
   $237 = HEAP32[$22>>2]|0;
   $238 = $23;
   $239 = $24;
   $240 = $29;
   $241 = $32;
   $242 = $33;
   $243 = $20;
   $244 = (_doCompbrl($235,$236,$36,$237,$238,$239,$240,$39,$241,$242,$49,$50,$243)|0);
   $245 = ($244|0)!=(0);
   if ($245) {
    continue;
   } else {
    break;
   }
  }
  $246 = HEAP32[$50>>2]|0;
  $61 = $246;
  while(1) {
   $247 = $61;
   $248 = HEAP32[$36>>2]|0;
   $249 = ($247|0)<=($248|0);
   if (!($249)) {
    break;
   }
   $250 = $61;
   $251 = $18;
   $252 = HEAP32[$36>>2]|0;
   $253 = HEAP32[$22>>2]|0;
   $254 = $23;
   $255 = $24;
   $256 = $29;
   $257 = $32;
   $258 = $33;
   _insertEmphasesAt(0,1,1,0,$250,$251,$252,$253,$254,$255,$256,$257,$258);
   $259 = $30;
   $260 = ($259|0)!=(0);
   if ($260) {
    $261 = $61;
    $262 = $18;
    $263 = HEAP32[$36>>2]|0;
    $264 = HEAP32[$22>>2]|0;
    $265 = $23;
    $266 = $24;
    $267 = $29;
    $268 = $32;
    $269 = $33;
    _insertEmphasesAt(0,1,0,1,$261,$262,$263,$264,$265,$266,$267,$268,$269);
    $270 = $61;
    $271 = $18;
    $272 = HEAP32[$36>>2]|0;
    $273 = HEAP32[$22>>2]|0;
    $274 = $23;
    $275 = $24;
    $276 = $29;
    $277 = $32;
    $278 = $33;
    _insertEmphasesAt(1,0,0,1,$270,$271,$272,$273,$274,$275,$276,$277,$278);
   }
   $279 = $61;
   $280 = HEAP32[$36>>2]|0;
   $281 = ($279|0)<($280|0);
   if ($281) {
    $282 = $61;
    $283 = $18;
    $284 = HEAP32[$36>>2]|0;
    $285 = HEAP32[$22>>2]|0;
    $286 = $23;
    $287 = $24;
    $288 = $29;
    $289 = $32;
    $290 = $33;
    _insertEmphasesAt(1,0,1,0,$282,$283,$284,$285,$286,$287,$288,$289,$290);
   }
   $291 = $61;
   $292 = (($291) + 1)|0;
   $61 = $292;
  }
  $293 = HEAP32[$36>>2]|0;
  $294 = (($293) + 1)|0;
  HEAP32[$50>>2] = $294;
  $295 = HEAP32[$37>>2]|0;
  $296 = ($295|0)==(95);
  if ($296) {
   $297 = $18;
   $298 = ((($297)) + 48|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $18;
   $301 = (_brailleIndicatorDefined($299,$300,$62)|0);
   $302 = ($301|0)!=(0);
   if ($302) {
    $303 = HEAP32[$62>>2]|0;
    $304 = ((($303)) + 38|0);
    $305 = HEAP32[$62>>2]|0;
    $306 = ((($305)) + 36|0);
    $307 = HEAP16[$306>>1]|0;
    $308 = $307 << 16 >> 16;
    $309 = HEAP32[$36>>2]|0;
    $310 = HEAP32[$22>>2]|0;
    $311 = $23;
    $312 = $24;
    $313 = $32;
    $314 = $33;
    (_for_updatePositions($304,0,$308,0,$309,$310,$311,$312,$313,$314)|0);
   }
  }
  $315 = $18;
  $316 = HEAP32[$36>>2]|0;
  $317 = HEAP32[$22>>2]|0;
  $318 = $23;
  $319 = $24;
  $320 = HEAP32[$37>>2]|0;
  $321 = $32;
  $322 = $33;
  $323 = $59;
  $324 = $323;
  $325 = HEAP32[$324>>2]|0;
  $326 = (($323) + 4)|0;
  $327 = $326;
  $328 = HEAP32[$327>>2]|0;
  $329 = (_insertLetterSign($315,$316,$317,$318,$319,$320,$321,$322,$325,$328)|0);
  $330 = ($329|0)!=(0);
  if (!($330)) {
   break;
  }
  $331 = HEAP32[$36>>2]|0;
  $332 = $18;
  $333 = HEAP32[$36>>2]|0;
  $334 = HEAP32[$22>>2]|0;
  $335 = $23;
  $336 = $24;
  $337 = $29;
  $338 = $32;
  $339 = $33;
  _insertEmphasesAt(1,0,1,0,$331,$332,$333,$334,$335,$336,$337,$338,$339);
  $340 = $18;
  $341 = ((($340)) + 20|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = ($342|0)!=(0);
  if (!($343)) {
   $344 = $18;
   $345 = HEAP32[$36>>2]|0;
   $346 = HEAP32[$22>>2]|0;
   $347 = $23;
   $348 = $24;
   $349 = $38;
   $350 = $32;
   $351 = $33;
   $352 = $59;
   $353 = $352;
   $354 = HEAP32[$353>>2]|0;
   $355 = (($352) + 4)|0;
   $356 = $355;
   $357 = HEAP32[$356>>2]|0;
   $358 = (_insertNumberSign($344,$345,$346,$347,$348,$349,$350,$351,$354,$357)|0);
   $359 = ($358|0)!=(0);
   if (!($359)) {
    break;
   }
  }
  $360 = $18;
  $361 = ((($360)) + 20|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ($362|0)!=(0);
  if ($363) {
   $364 = $18;
   $365 = HEAP32[$36>>2]|0;
   $366 = HEAP32[$22>>2]|0;
   $367 = $23;
   $368 = $24;
   $369 = $32;
   $370 = $33;
   _checkNumericMode($364,$365,$366,$367,$368,$369,$370,$48,$47);
  }
  $371 = HEAP32[$37>>2]|0;
  $372 = ($371|0)==(73);
  do {
   if ($372) {
    label = 44;
   } else {
    $373 = $57;
    $374 = ($373|0)!=(0);
    if ($374) {
     $375 = $18;
     $376 = HEAP32[$36>>2]|0;
     $377 = $21;
     $378 = HEAP32[$22>>2]|0;
     $379 = (_findForPassRule($375,$376,$377,$378,$37,$39,$40,$41,$42,$43,$44,$45,$46)|0);
     $380 = ($379|0)!=(0);
     if ($380) {
      label = 44;
      break;
     }
    }
    $57 = 1;
   }
  } while(0);
  if ((label|0) == 44) {
   label = 0;
   $57 = 1;
   $381 = HEAP32[$37>>2]|0;
   $cond = ($381|0)==(73);
   if ($cond) {
    $382 = HEAP32[$22>>2]|0;
    $63 = $382;
    $383 = HEAP32[$36>>2]|0;
    $64 = $383;
    $384 = HEAP32[3717]|0;
    $385 = ($384|0)!=(0|0);
    if ($385) {
     $386 = HEAP32[3716]|0;
     $387 = HEAP32[3718]|0;
     $388 = ($386|0)<($387|0);
     if ($388) {
      $389 = HEAP32[$39>>2]|0;
      $390 = HEAP32[3716]|0;
      $391 = (($390) + 1)|0;
      HEAP32[3716] = $391;
      $392 = HEAP32[3717]|0;
      $393 = (($392) + ($390<<2)|0);
      HEAP32[$393>>2] = $389;
     }
    }
    $394 = $18;
    $395 = $19;
    $396 = $23;
    $397 = $24;
    $398 = HEAP32[$37>>2]|0;
    $399 = HEAP32[$41>>2]|0;
    $400 = HEAP32[$42>>2]|0;
    $401 = HEAP32[$43>>2]|0;
    $402 = $32;
    $403 = $33;
    $404 = HEAP32[$45>>2]|0;
    $405 = HEAP16[$46>>1]|0;
    $406 = $20;
    ;HEAP32[$$byval_copy12>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$44+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$44+12>>2]|0;
    $407 = (_passDoAction($394,$395,$22,$396,$397,$398,$39,$399,$400,$401,$36,$$byval_copy12,$402,$403,$404,$405,$406)|0);
    $408 = ($407|0)!=(0);
    if (!($408)) {
     break;
    }
    $409 = HEAP32[$22>>2]|0;
    $410 = HEAP32[$409>>2]|0;
    $411 = $63;
    $412 = HEAP32[$411>>2]|0;
    $413 = ($410|0)!=($412|0);
    do {
     if ($413) {
      $414 = $63;
      $415 = HEAP32[$414>>2]|0;
      $416 = $54;
      $417 = HEAP32[$416>>2]|0;
      $418 = ($415|0)!=($417|0);
      if (!($418)) {
       break;
      }
      $419 = $63;
      $420 = HEAP32[$419>>2]|0;
      (_releaseStringBuffer($420)|0);
     }
    } while(0);
    $421 = HEAP32[$36>>2]|0;
    $422 = $64;
    $423 = ($421|0)==($422|0);
    if (!($423)) {
     continue;
    }
    $57 = 0;
    continue;
   }
  }
  $424 = HEAP32[$36>>2]|0;
  $425 = HEAP32[$22>>2]|0;
  $426 = ((($425)) + 4|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = (($427) + ($424<<1)|0);
  $429 = HEAP16[$428>>1]|0;
  $430 = $18;
  $431 = (_checkAttr($429,8193,0,0,$430)|0);
  $432 = ($431|0)!=(0);
  if ($432) {
   HEAP32[$48>>2] = 0;
  }
  $433 = HEAP32[$37>>2]|0;
  switch ($433|0) {
  case 107:  {
   $434 = $18;
   $435 = ((($434)) + 40|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = ($436|0)!=(0);
   if ($437) {
    $438 = HEAP32[$36>>2]|0;
    $439 = HEAP32[$22>>2]|0;
    $440 = ((($439)) + 4|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = (($441) + ($438<<1)|0);
    $443 = HEAP16[$442>>1]|0;
    $444 = $18;
    $445 = (_checkAttr($443,2,0,0,$444)|0);
    $446 = ($445|0)!=(0);
    if ($446) {
     $447 = $23;
     $448 = ((($447)) + 12|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = (($449) + -1)|0;
     HEAP32[$448>>2] = $450;
    }
   }
   break;
  }
  case 60: case 78:  {
   HEAP32[$48>>2] = 0;
   break;
  }
  case 89:  {
   $451 = $38;
   $452 = ($451|0)==(89);
   if ($452) {
    $65 = 0;
    while(1) {
     $453 = $23;
     $454 = ((($453)) + 12|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = ($455|0)>(0);
     if (!($456)) {
      break;
     }
     $457 = $23;
     $458 = ((($457)) + 12|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = (($459) - 1)|0;
     $461 = $23;
     $462 = ((($461)) + 4|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = (($463) + ($460<<1)|0);
     $465 = HEAP16[$464>>1]|0;
     $466 = $18;
     $467 = (_checkAttr($465,1,0,1,$466)|0);
     $468 = ($467|0)!=(0);
     if (!($468)) {
      break;
     }
     $469 = $23;
     $470 = ((($469)) + 12|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = (($471) - 1)|0;
     $473 = $23;
     $474 = ((($473)) + 4|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = (($475) + ($472<<1)|0);
     $477 = HEAP16[$476>>1]|0;
     $478 = $477&65535;
     $479 = ($478|0)==(65535);
     if ($479) {
      $65 = 1;
     }
     $480 = $23;
     $481 = ((($480)) + 12|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = (($482) + -1)|0;
     HEAP32[$481>>2] = $483;
    }
    $484 = $65;
    $485 = ($484|0)!=(0);
    if ($485) {
     $486 = $23;
     $487 = ((($486)) + 12|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = $23;
     $490 = ((($489)) + 4|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = (($491) + ($488<<1)|0);
     HEAP16[$492>>1] = -1;
     $493 = $23;
     $494 = ((($493)) + 12|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = (($495) + 1)|0;
     HEAP32[$494>>2] = $496;
    }
   }
   break;
  }
  case 108:  {
   $497 = $18;
   $498 = ((($497)) + 20|0);
   $499 = HEAP32[$498>>2]|0;
   $500 = ($499|0)!=(0);
   if (!($500)) {
    $501 = $18;
    $502 = ((($501)) + 44|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = ($503|0)!=(0);
    if ($504) {
     $505 = $18;
     $506 = ((($505)) + 44|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = $18;
     $509 = ((($508)) + 21088|0);
     $510 = (($509) + ($507<<3)|0);
     $66 = $510;
     $511 = $66;
     $512 = ((($511)) + 34|0);
     $513 = HEAP16[$512>>1]|0;
     $514 = $513 << 16 >> 16;
     $515 = $66;
     $516 = ((($515)) + 38|0);
     $517 = (($516) + ($514<<1)|0);
     $518 = $66;
     $519 = ((($518)) + 34|0);
     $520 = HEAP16[$519>>1]|0;
     $521 = $520 << 16 >> 16;
     $522 = $66;
     $523 = ((($522)) + 36|0);
     $524 = HEAP16[$523>>1]|0;
     $525 = $524 << 16 >> 16;
     $526 = HEAP32[$36>>2]|0;
     $527 = HEAP32[$22>>2]|0;
     $528 = $23;
     $529 = $24;
     $530 = $32;
     $531 = $33;
     $532 = (_for_updatePositions($517,$521,$525,0,$526,$527,$528,$529,$530,$531)|0);
     $533 = ($532|0)!=(0);
     if (!($533)) {
      break L11;
     }
    }
   }
   HEAP32[$37>>2] = 106;
   break;
  }
  case 86:  {
   $534 = HEAP32[$48>>2]|0;
   $535 = ($534|0)!=(0);
   if ($535) {
    continue L11;
   }
   $536 = $18;
   $537 = $23;
   $538 = $20;
   $539 = HEAP32[$22>>2]|0;
   (_doNocont($536,$36,$537,$538,$539,$49,$48,$50)|0);
   continue L11;
   break;
  }
  case 80: case 79:  {
   $540 = HEAP32[$36>>2]|0;
   $541 = HEAP32[$53>>2]|0;
   $542 = (($540) - ($541))|0;
   $52 = $542;
   break;
  }
  default: {
  }
  }
  $543 = HEAP32[$37>>2]|0;
  switch ($543|0) {
  case 72:  {
   $544 = HEAP32[$40>>2]|0;
   $545 = HEAP32[$36>>2]|0;
   $546 = (($545) + ($544))|0;
   HEAP32[$36>>2] = $546;
   $547 = HEAP32[$40>>2]|0;
   $548 = HEAP32[$39>>2]|0;
   $549 = ((($548)) + 38|0);
   $550 = (($549) + ($547<<1)|0);
   $551 = HEAP32[$39>>2]|0;
   $552 = ((($551)) + 36|0);
   $553 = HEAP16[$552>>1]|0;
   $554 = $553 << 16 >> 16;
   $555 = $18;
   $556 = $19;
   $557 = HEAP32[$36>>2]|0;
   $558 = HEAP32[$22>>2]|0;
   $559 = $23;
   $560 = $24;
   $561 = $32;
   $562 = $33;
   $563 = $20;
   $564 = (_putCharacters($550,$554,$555,$556,$557,$558,$559,$560,$561,$562,$563)|0);
   $565 = ($564|0)!=(0);
   if (!($565)) {
    break L11;
   }
   break;
  }
  case 114:  {
   $566 = HEAP32[$36>>2]|0;
   $567 = HEAP32[$22>>2]|0;
   $568 = ((($567)) + 4|0);
   $569 = HEAP32[$568>>2]|0;
   $570 = (($569) + ($566<<1)|0);
   $571 = HEAP16[$570>>1]|0;
   $572 = $18;
   $573 = $19;
   $574 = HEAP32[$36>>2]|0;
   $575 = HEAP32[$22>>2]|0;
   $576 = $23;
   $577 = $24;
   $578 = $32;
   $579 = $33;
   $580 = $20;
   $581 = (_undefinedCharacter($571,$572,$573,$574,$575,$576,$577,$578,$579,$580)|0);
   $582 = ($581|0)!=(0);
   if (!($582)) {
    break L11;
   }
   $583 = HEAP32[$36>>2]|0;
   $584 = (($583) + 1)|0;
   HEAP32[$36>>2] = $584;
   break;
  }
  case 66:  {
   $585 = $20;
   $586 = $585 & 34;
   $587 = ($586|0)!=(0);
   if ($587) {
    label = 87;
   } else {
    $588 = HEAP32[$39>>2]|0;
    $589 = ((($588)) + 36|0);
    $590 = HEAP16[$589>>1]|0;
    $591 = $590 << 16 >> 16;
    $592 = ($591|0)==(1);
    if ($592) {
     $593 = $18;
     $594 = (_capsletterDefined($593)|0);
     $595 = ($594|0)!=(0);
     if ($595) {
      $596 = HEAP32[$51>>2]|0;
      $597 = ((($596)) + 28|0);
      $598 = HEAP16[$597>>1]|0;
      $599 = $18;
      $600 = $19;
      $601 = HEAP32[$36>>2]|0;
      $602 = HEAP32[$22>>2]|0;
      $603 = $23;
      $604 = $24;
      $605 = $32;
      $606 = $33;
      $607 = $20;
      $608 = (_putCharacter($598,$599,$600,$601,$602,$603,$604,$605,$606,$607)|0);
      $609 = ($608|0)!=(0);
      if (!($609)) {
       break L11;
      }
      $610 = HEAP32[$36>>2]|0;
      $611 = (($610) + 1)|0;
      HEAP32[$36>>2] = $611;
     } else {
      label = 87;
     }
    } else {
     label = 87;
    }
   }
   break;
  }
  default: {
   label = 87;
  }
  }
  L112: do {
   if ((label|0) == 87) {
    label = 0;
    $612 = HEAP32[$40>>2]|0;
    $613 = HEAP32[$39>>2]|0;
    $614 = ((($613)) + 38|0);
    $615 = (($614) + ($612<<1)|0);
    $67 = $615;
    $616 = HEAP32[$39>>2]|0;
    $617 = ((($616)) + 36|0);
    $618 = HEAP16[$617>>1]|0;
    $619 = $618 << 16 >> 16;
    $68 = $619;
    $620 = HEAP32[$37>>2]|0;
    $621 = ($620|0)==(80);
    if ($621) {
     $69 = 1;
     while(1) {
      $622 = $69;
      $623 = $67;
      $624 = (($623) + ($622<<1)|0);
      $625 = HEAP16[$624>>1]|0;
      $626 = $625&65535;
      $627 = ($626|0)!=(44);
      $628 = $69;
      $629 = (($628) + 1)|0;
      $69 = $629;
      if (!($627)) {
       break;
      }
     }
     $630 = $69;
     $631 = $67;
     $632 = (($631) + ($630<<1)|0);
     $67 = $632;
     $633 = $69;
     $634 = $68;
     $635 = (($634) - ($633))|0;
     $68 = $635;
    }
    $636 = $68;
    $637 = ($636|0)!=(0);
    if ($637) {
     $638 = $67;
     $639 = HEAP32[$40>>2]|0;
     $640 = $68;
     $641 = HEAP32[$36>>2]|0;
     $642 = HEAP32[$22>>2]|0;
     $643 = $23;
     $644 = $24;
     $645 = $32;
     $646 = $33;
     $647 = (_for_updatePositions($638,$639,$640,0,$641,$642,$643,$644,$645,$646)|0);
     $648 = ($647|0)!=(0);
     if (!($648)) {
      break L11;
     }
     $649 = HEAP32[$40>>2]|0;
     $650 = HEAP32[$36>>2]|0;
     $651 = (($650) + ($649))|0;
     HEAP32[$36>>2] = $651;
     break;
    }
    $55 = 0;
    while(1) {
     $652 = $55;
     $653 = HEAP32[$40>>2]|0;
     $654 = ($652|0)<($653|0);
     if (!($654)) {
      break L112;
     }
     $655 = HEAP32[$36>>2]|0;
     $656 = HEAP32[$22>>2]|0;
     $657 = ((($656)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($658) + ($655<<1)|0);
     $660 = HEAP16[$659>>1]|0;
     $661 = $18;
     $662 = $19;
     $663 = HEAP32[$36>>2]|0;
     $664 = HEAP32[$22>>2]|0;
     $665 = $23;
     $666 = $24;
     $667 = $32;
     $668 = $33;
     $669 = $20;
     $670 = (_putCharacter($660,$661,$662,$663,$664,$665,$666,$667,$668,$669)|0);
     $671 = ($670|0)!=(0);
     if (!($671)) {
      break L11;
     }
     $672 = HEAP32[$36>>2]|0;
     $673 = (($672) + 1)|0;
     HEAP32[$36>>2] = $673;
     $674 = $55;
     $675 = (($674) + 1)|0;
     $55 = $675;
    }
   }
  } while(0);
  $676 = HEAP32[$37>>2]|0;
  L129: do {
   switch ($676|0) {
   case 78:  {
    $677 = HEAP32[$22>>2]|0;
    $678 = ((($677)) + 8|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = HEAP32[$40>>2]|0;
    $681 = (($679) - ($680))|0;
    $70 = $681;
    $682 = $20;
    $683 = $682 & 34;
    $684 = ($683|0)!=(0);
    if ($684) {
     $685 = $34;
     $686 = $70;
     $687 = ($685|0)<($686|0);
     if ($687) {
      $688 = $34;
      $689 = (($688) - 1)|0;
      $70 = $689;
     }
    }
    while(1) {
     $690 = HEAP32[$36>>2]|0;
     $691 = $70;
     $692 = ($690|0)<=($691|0);
     if (!($692)) {
      break L129;
     }
     $693 = HEAP32[$39>>2]|0;
     $694 = ((($693)) + 38|0);
     $695 = HEAP32[$36>>2]|0;
     $696 = HEAP32[$22>>2]|0;
     $697 = ((($696)) + 4|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = (($698) + ($695<<1)|0);
     $700 = HEAP32[$40>>2]|0;
     $701 = $18;
     $702 = (_compareChars($694,$699,$700,0,$701)|0);
     $703 = ($702|0)!=(0);
     if (!($703)) {
      break L129;
     }
     $704 = $33;
     $705 = HEAP32[$704>>2]|0;
     $706 = ($705|0)!=(0);
     do {
      if (!($706)) {
       $707 = HEAP32[$36>>2]|0;
       $708 = $32;
       $709 = HEAP32[$708>>2]|0;
       $710 = ($707|0)<=($709|0);
       if (!($710)) {
        break;
       }
       $711 = $32;
       $712 = HEAP32[$711>>2]|0;
       $713 = HEAP32[$36>>2]|0;
       $714 = HEAP32[$40>>2]|0;
       $715 = (($713) + ($714))|0;
       $716 = ($712|0)<($715|0);
       if (!($716)) {
        break;
       }
       $717 = $33;
       HEAP32[$717>>2] = 1;
       $718 = $23;
       $719 = ((($718)) + 12|0);
       $720 = HEAP32[$719>>2]|0;
       $721 = (($720) - 1)|0;
       $722 = $32;
       HEAP32[$722>>2] = $721;
      }
     } while(0);
     $723 = HEAP32[$40>>2]|0;
     $724 = HEAP32[$36>>2]|0;
     $725 = (($724) + ($723))|0;
     HEAP32[$36>>2] = $725;
    }
    break;
   }
   case 80:  {
    $726 = HEAP32[$40>>2]|0;
    $727 = HEAP32[$39>>2]|0;
    $728 = ((($727)) + 38|0);
    $729 = (($728) + ($726<<1)|0);
    $71 = $729;
    $72 = 1;
    while(1) {
     $730 = $72;
     $731 = $71;
     $732 = (($731) + ($730<<1)|0);
     $733 = HEAP16[$732>>1]|0;
     $734 = $733&65535;
     $735 = ($734|0)!=(44);
     if (!($735)) {
      break;
     }
     $736 = $72;
     $737 = (($736) + 1)|0;
     $72 = $737;
    }
    $738 = $23;
    $739 = ((($738)) + 12|0);
    $740 = HEAP32[$739>>2]|0;
    $741 = $72;
    $742 = (($740) + ($741))|0;
    $743 = $23;
    $744 = ((($743)) + 8|0);
    $745 = HEAP32[$744>>2]|0;
    $746 = ($742|0)>($745|0);
    if ($746) {
     break L11;
    }
    $747 = $23;
    $748 = ((($747)) + 12|0);
    $749 = HEAP32[$748>>2]|0;
    $750 = (($749) - 1)|0;
    $73 = $750;
    while(1) {
     $751 = $73;
     $752 = ($751|0)>=(0);
     if (!($752)) {
      break;
     }
     $753 = $73;
     $754 = $24;
     $755 = (($754) + ($753<<2)|0);
     $756 = HEAP32[$755>>2]|0;
     $757 = $52;
     $758 = ($756|0)>=($757|0);
     if (!($758)) {
      break;
     }
     $759 = $73;
     $760 = $23;
     $761 = ((($760)) + 4|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = (($762) + ($759<<1)|0);
     $764 = HEAP16[$763>>1]|0;
     $765 = $73;
     $766 = $72;
     $767 = (($765) + ($766))|0;
     $768 = $23;
     $769 = ((($768)) + 4|0);
     $770 = HEAP32[$769>>2]|0;
     $771 = (($770) + ($767<<1)|0);
     HEAP16[$771>>1] = $764;
     $772 = $73;
     $773 = $24;
     $774 = (($773) + ($772<<2)|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = $73;
     $777 = $72;
     $778 = (($776) + ($777))|0;
     $779 = $24;
     $780 = (($779) + ($778<<2)|0);
     HEAP32[$780>>2] = $775;
     $781 = $73;
     $782 = (($781) + -1)|0;
     $73 = $782;
    }
    $783 = $73;
    $784 = (($783) + 1)|0;
    $73 = $784;
    $785 = $73;
    $786 = $23;
    $787 = ((($786)) + 4|0);
    $788 = HEAP32[$787>>2]|0;
    $789 = (($788) + ($785<<1)|0);
    $790 = $71;
    $791 = $72;
    $792 = $791<<1;
    _memcpy(($789|0),($790|0),($792|0))|0;
    $74 = 0;
    while(1) {
     $793 = $74;
     $794 = $72;
     $795 = ($793|0)<($794|0);
     if (!($795)) {
      break;
     }
     $796 = $73;
     $797 = $24;
     $798 = (($797) + ($796<<2)|0);
     $799 = HEAP32[$798>>2]|0;
     $800 = $73;
     $801 = $74;
     $802 = (($800) + ($801))|0;
     $803 = $24;
     $804 = (($803) + ($802<<2)|0);
     HEAP32[$804>>2] = $799;
     $805 = $74;
     $806 = (($805) + 1)|0;
     $74 = $806;
    }
    $807 = $72;
    $808 = $23;
    $809 = ((($808)) + 12|0);
    $810 = HEAP32[$809>>2]|0;
    $811 = (($810) + ($807))|0;
    HEAP32[$809>>2] = $811;
    $812 = $33;
    $813 = HEAP32[$812>>2]|0;
    $814 = ($813|0)!=(0);
    if ($814) {
     $815 = $32;
     $816 = HEAP32[$815>>2]|0;
     $817 = $73;
     $818 = ($816|0)>=($817|0);
     if ($818) {
      $819 = $72;
      $820 = $32;
      $821 = HEAP32[$820>>2]|0;
      $822 = (($821) + ($819))|0;
      HEAP32[$820>>2] = $822;
      label = 123;
     } else {
      label = 123;
     }
    } else {
     label = 123;
    }
    break;
   }
   case 79:  {
    label = 123;
    break;
   }
   case 93: case 92:  {
    while(1) {
     $901 = HEAP32[$36>>2]|0;
     $902 = HEAP32[$22>>2]|0;
     $903 = ((($902)) + 8|0);
     $904 = HEAP32[$903>>2]|0;
     $905 = ($901|0)<($904|0);
     if (!($905)) {
      break L129;
     }
     $906 = HEAP32[$36>>2]|0;
     $907 = HEAP32[$22>>2]|0;
     $908 = ((($907)) + 4|0);
     $909 = HEAP32[$908>>2]|0;
     $910 = (($909) + ($906<<1)|0);
     $911 = HEAP16[$910>>1]|0;
     $912 = $18;
     $913 = (_checkAttr($911,1,0,0,$912)|0);
     $914 = ($913|0)!=(0);
     if (!($914)) {
      break L129;
     }
     $915 = HEAP32[$36>>2]|0;
     $916 = HEAP32[$22>>2]|0;
     $917 = ((($916)) + 4|0);
     $918 = HEAP32[$917>>2]|0;
     $919 = (($918) + ($915<<1)|0);
     $920 = HEAP16[$919>>1]|0;
     $921 = $920&65535;
     $922 = ($921|0)!=(65535);
     if (!($922)) {
      break L129;
     }
     $923 = HEAP32[$36>>2]|0;
     $924 = (($923) + 1)|0;
     HEAP32[$36>>2] = $924;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 123) {
   label = 0;
   $823 = HEAP32[$22>>2]|0;
   $824 = ((($823)) + 8|0);
   $825 = HEAP32[$824>>2]|0;
   $75 = $825;
   $826 = $20;
   $827 = $826 & 34;
   $828 = ($827|0)!=(0);
   if ($828) {
    $829 = $34;
    $830 = $75;
    $831 = ($829|0)<($830|0);
    if ($831) {
     $832 = $34;
     $75 = $832;
    }
   }
   while(1) {
    $833 = HEAP32[$36>>2]|0;
    $834 = HEAP32[$53>>2]|0;
    $835 = (($833) + ($834))|0;
    $836 = $75;
    $837 = ($835|0)<=($836|0);
    if (!($837)) {
     break;
    }
    $838 = $52;
    $839 = HEAP32[$22>>2]|0;
    $840 = ((($839)) + 4|0);
    $841 = HEAP32[$840>>2]|0;
    $842 = (($841) + ($838<<1)|0);
    $843 = HEAP32[$36>>2]|0;
    $844 = HEAP32[$22>>2]|0;
    $845 = ((($844)) + 4|0);
    $846 = HEAP32[$845>>2]|0;
    $847 = (($846) + ($843<<1)|0);
    $848 = HEAP32[$53>>2]|0;
    $849 = $18;
    $850 = (_compareChars($842,$847,$848,0,$849)|0);
    $851 = ($850|0)!=(0);
    if (!($851)) {
     break;
    }
    $852 = $33;
    $853 = HEAP32[$852>>2]|0;
    $854 = ($853|0)!=(0);
    do {
     if (!($854)) {
      $855 = $32;
      $856 = HEAP32[$855>>2]|0;
      $857 = HEAP32[$36>>2]|0;
      $858 = HEAP32[$40>>2]|0;
      $859 = (($857) - ($858))|0;
      $860 = ($856|0)>=($859|0);
      if (!($860)) {
       break;
      }
      $861 = $32;
      $862 = HEAP32[$861>>2]|0;
      $863 = HEAP32[$36>>2]|0;
      $864 = HEAP32[$53>>2]|0;
      $865 = (($863) + ($864))|0;
      $866 = ($862|0)<($865|0);
      if (!($866)) {
       break;
      }
      $867 = $33;
      HEAP32[$867>>2] = 1;
      $868 = $23;
      $869 = ((($868)) + 12|0);
      $870 = HEAP32[$869>>2]|0;
      $871 = (($870) - 1)|0;
      $872 = $32;
      HEAP32[$872>>2] = $871;
     }
    } while(0);
    $873 = HEAP32[$53>>2]|0;
    $874 = HEAP32[$36>>2]|0;
    $875 = (($874) + ($873))|0;
    HEAP32[$36>>2] = $875;
    $876 = HEAP32[$36>>2]|0;
    $877 = HEAP32[$40>>2]|0;
    $878 = (($876) + ($877))|0;
    $879 = $75;
    $880 = ($878|0)<=($879|0);
    if (!($880)) {
     label = 135;
     break;
    }
    $881 = HEAP32[$39>>2]|0;
    $882 = ((($881)) + 38|0);
    $883 = HEAP32[$36>>2]|0;
    $884 = HEAP32[$22>>2]|0;
    $885 = ((($884)) + 4|0);
    $886 = HEAP32[$885>>2]|0;
    $887 = (($886) + ($883<<1)|0);
    $888 = HEAP32[$40>>2]|0;
    $889 = $888<<1;
    $890 = (_memcmp($882,$887,$889)|0);
    $891 = ($890|0)!=(0);
    if ($891) {
     label = 135;
     break;
    }
    $892 = HEAP32[$40>>2]|0;
    $893 = HEAP32[$36>>2]|0;
    $894 = (($893) + ($892))|0;
    HEAP32[$36>>2] = $894;
   }
   if ((label|0) == 135) {
    label = 0;
    $895 = HEAP32[$40>>2]|0;
    $896 = HEAP32[$36>>2]|0;
    $897 = (($896) + ($895))|0;
    HEAP32[$36>>2] = $897;
   }
   $898 = HEAP32[$40>>2]|0;
   $899 = HEAP32[$36>>2]|0;
   $900 = (($899) - ($898))|0;
   HEAP32[$36>>2] = $900;
  }
  $925 = HEAP32[$36>>2]|0;
  $926 = ($925|0)>(0);
  if ($926) {
   $927 = HEAP32[$36>>2]|0;
   $928 = (($927) - 1)|0;
   $929 = HEAP32[$22>>2]|0;
   $930 = ((($929)) + 4|0);
   $931 = HEAP32[$930>>2]|0;
   $932 = (($931) + ($928<<1)|0);
   $933 = HEAP16[$932>>1]|0;
   $934 = $18;
   $935 = (_checkAttr($933,1,0,0,$934)|0);
   $936 = ($935|0)!=(0);
   $937 = HEAP32[$37>>2]|0;
   $938 = ($937|0)!=(93);
   $or$cond = $936 & $938;
   if ($or$cond) {
    $939 = HEAP32[$36>>2]|0;
    HEAP32[$76>>2] = $939;
    $940 = ((($76)) + 4|0);
    $941 = $23;
    $942 = ((($941)) + 12|0);
    $943 = HEAP32[$942>>2]|0;
    HEAP32[$940>>2] = $943;
    $944 = ((($76)) + 8|0);
    $945 = HEAP32[$50>>2]|0;
    HEAP32[$944>>2] = $945;
    ;HEAP32[$49>>2]=HEAP32[$76>>2]|0;HEAP32[$49+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$76+8>>2]|0;
   }
  }
  $946 = $26;
  $947 = ($946|0)!=(0|0);
  if ($947) {
   $948 = HEAP32[$36>>2]|0;
   $949 = $26;
   $950 = (($949) + ($948)|0);
   $951 = HEAP8[$950>>0]|0;
   $952 = $951&255;
   $953 = ($952|0)>=(48);
   if ($953) {
    $954 = HEAP32[$36>>2]|0;
    $955 = $26;
    $956 = (($955) + ($954)|0);
    $957 = HEAP8[$956>>0]|0;
    $958 = $957&255;
    $959 = ($958|0)<=(57);
    if ($959) {
     $960 = HEAP32[$36>>2]|0;
     $961 = $26;
     $962 = (($961) + ($960)|0);
     $963 = HEAP8[$962>>0]|0;
     $964 = $23;
     $965 = ((($964)) + 12|0);
     $966 = HEAP32[$965>>2]|0;
     $967 = $27;
     $968 = (($967) + ($966)|0);
     HEAP8[$968>>0] = $963;
    }
   }
  }
  $969 = HEAP32[$37>>2]|0;
  $970 = ($969|0)>=(82);
  $971 = HEAP32[$37>>2]|0;
  $972 = ($971|0)<=(114);
  $or$cond7 = $970 & $972;
  if (!($or$cond7)) {
   $973 = HEAP32[$37>>2]|0;
   $974 = ($973|0)>=(61);
   $975 = HEAP32[$37>>2]|0;
   $976 = ($975|0)<=(70);
   $or$cond9 = $974 & $976;
   if (!($or$cond9)) {
    continue;
   }
  }
  $977 = HEAP32[$37>>2]|0;
  $38 = $977;
 }
 L197: do {
  if ((label|0) == 151) {
   $978 = HEAP32[$50>>2]|0;
   $77 = $978;
   while(1) {
    $979 = $77;
    $980 = HEAP32[$36>>2]|0;
    $981 = ($979|0)<=($980|0);
    if (!($981)) {
     break L197;
    }
    $982 = $77;
    $983 = $18;
    $984 = HEAP32[$36>>2]|0;
    $985 = HEAP32[$22>>2]|0;
    $986 = $23;
    $987 = $24;
    $988 = $29;
    $989 = $32;
    $990 = $33;
    _insertEmphasesAt(0,1,1,0,$982,$983,$984,$985,$986,$987,$988,$989,$990);
    $991 = $30;
    $992 = ($991|0)!=(0);
    if ($992) {
     $993 = $77;
     $994 = $18;
     $995 = HEAP32[$36>>2]|0;
     $996 = HEAP32[$22>>2]|0;
     $997 = $23;
     $998 = $24;
     $999 = $29;
     $1000 = $32;
     $1001 = $33;
     _insertEmphasesAt(0,1,0,1,$993,$994,$995,$996,$997,$998,$999,$1000,$1001);
     $1002 = $77;
     $1003 = $18;
     $1004 = HEAP32[$36>>2]|0;
     $1005 = HEAP32[$22>>2]|0;
     $1006 = $23;
     $1007 = $24;
     $1008 = $29;
     $1009 = $32;
     $1010 = $33;
     _insertEmphasesAt(1,0,0,1,$1002,$1003,$1004,$1005,$1006,$1007,$1008,$1009,$1010);
    }
    $1011 = $77;
    $1012 = $18;
    $1013 = HEAP32[$36>>2]|0;
    $1014 = HEAP32[$22>>2]|0;
    $1015 = $23;
    $1016 = $24;
    $1017 = $29;
    $1018 = $32;
    $1019 = $33;
    _insertEmphasesAt(1,0,1,0,$1011,$1012,$1013,$1014,$1015,$1016,$1017,$1018,$1019);
    $1020 = $77;
    $1021 = (($1020) + 1)|0;
    $77 = $1021;
   }
  }
 } while(0);
 $1022 = ((($49)) + 4|0);
 $1023 = HEAP32[$1022>>2]|0;
 $1024 = ($1023|0)!=(0);
 if ($1024) {
  $1025 = HEAP32[$36>>2]|0;
  $1026 = HEAP32[$22>>2]|0;
  $1027 = ((($1026)) + 8|0);
  $1028 = HEAP32[$1027>>2]|0;
  $1029 = ($1025|0)<($1028|0);
  if ($1029) {
   $1030 = HEAP32[$36>>2]|0;
   $1031 = HEAP32[$22>>2]|0;
   $1032 = ((($1031)) + 4|0);
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = (($1033) + ($1030<<1)|0);
   $1035 = HEAP16[$1034>>1]|0;
   $1036 = $18;
   $1037 = (_checkAttr($1035,1,0,0,$1036)|0);
   $1038 = ($1037|0)!=(0);
   if (!($1038)) {
    $1039 = HEAP32[$49>>2]|0;
    HEAP32[$36>>2] = $1039;
    $1040 = ((($49)) + 4|0);
    $1041 = HEAP32[$1040>>2]|0;
    $1042 = $23;
    $1043 = ((($1042)) + 12|0);
    HEAP32[$1043>>2] = $1041;
   }
  }
 }
 $1044 = HEAP32[$36>>2]|0;
 $1045 = HEAP32[$22>>2]|0;
 $1046 = ((($1045)) + 8|0);
 $1047 = HEAP32[$1046>>2]|0;
 $1048 = ($1044|0)<($1047|0);
 L211: do {
  if ($1048) {
   while(1) {
    $1049 = HEAP32[$36>>2]|0;
    $1050 = HEAP32[$22>>2]|0;
    $1051 = ((($1050)) + 4|0);
    $1052 = HEAP32[$1051>>2]|0;
    $1053 = (($1052) + ($1049<<1)|0);
    $1054 = HEAP16[$1053>>1]|0;
    $1055 = $18;
    $1056 = (_checkAttr($1054,1,0,0,$1055)|0);
    $1057 = ($1056|0)!=(0);
    if (!($1057)) {
     break L211;
    }
    $1058 = HEAP32[$36>>2]|0;
    $1059 = (($1058) + 1)|0;
    HEAP32[$36>>2] = $1059;
    $1060 = HEAP32[$22>>2]|0;
    $1061 = ((($1060)) + 8|0);
    $1062 = HEAP32[$1061>>2]|0;
    $1063 = ($1059|0)==($1062|0);
    if ($1063) {
     break;
    }
   }
  }
 } while(0);
 $1064 = HEAP32[$36>>2]|0;
 $1065 = $31;
 HEAP32[$1065>>2] = $1064;
 $1066 = HEAP32[$22>>2]|0;
 $1067 = HEAP32[$1066>>2]|0;
 $1068 = $54;
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = ($1067|0)!=($1069|0);
 if (!($1070)) {
  STACKTOP = sp;return 1;
 }
 $1071 = HEAP32[$22>>2]|0;
 $1072 = HEAP32[$1071>>2]|0;
 (_releaseStringBuffer($1072)|0);
 STACKTOP = sp;return 1;
}
function _translatePass($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 112|0;
 $13 = sp + 92|0;
 $20 = sp + 64|0;
 $21 = sp + 60|0;
 $22 = sp + 56|0;
 $23 = sp + 52|0;
 $24 = sp + 48|0;
 $25 = sp + 44|0;
 $26 = sp + 40|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 $29 = sp + 128|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 HEAP32[$13>>2] = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $34 = HEAP32[$13>>2]|0;
 $30 = $34;
 $35 = $14;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 HEAP32[$20>>2] = 0;
 $31 = 1;
 __lou_resetPassVariables();
 L1: while(1) {
  $37 = HEAP32[$20>>2]|0;
  $38 = HEAP32[$13>>2]|0;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $31;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $10;
   $45 = HEAP32[$20>>2]|0;
   $46 = $12;
   $47 = HEAP32[$13>>2]|0;
   _passSelectRule($44,$45,$46,$47,$21,$22,$23,$24,$25,$26,$27,$28,$29);
  } else {
   HEAP32[$21>>2] = 82;
  }
  $31 = 1;
  $48 = HEAP32[$21>>2]|0;
  switch ($48|0) {
  case 77: case 76: case 75: case 73:  {
   break;
  }
  case 82:  {
   $91 = $14;
   $92 = ((($91)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 1)|0;
   $95 = $14;
   $96 = ((($95)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($94|0)>($97|0);
   if ($98) {
    break L1;
   }
   $99 = HEAP32[$20>>2]|0;
   $100 = $14;
   $101 = ((($100)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $15;
   $104 = (($103) + ($102<<2)|0);
   HEAP32[$104>>2] = $99;
   $105 = HEAP32[$20>>2]|0;
   $106 = (($105) + 1)|0;
   HEAP32[$20>>2] = $106;
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($105<<1)|0);
   $111 = HEAP16[$110>>1]|0;
   $112 = $14;
   $113 = ((($112)) + 12|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 1)|0;
   HEAP32[$113>>2] = $115;
   $116 = $14;
   $117 = ((($116)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + ($114<<1)|0);
   HEAP16[$119>>1] = $111;
   continue L1;
   break;
  }
  default: {
   break L1;
  }
  }
  $49 = HEAP32[$13>>2]|0;
  $32 = $49;
  $50 = HEAP32[$20>>2]|0;
  $33 = $50;
  $51 = HEAP32[3717]|0;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = HEAP32[3716]|0;
   $54 = HEAP32[3718]|0;
   $55 = ($53|0)<($54|0);
   if ($55) {
    $56 = HEAP32[$22>>2]|0;
    $57 = HEAP32[3716]|0;
    $58 = (($57) + 1)|0;
    HEAP32[3716] = $58;
    $59 = HEAP32[3717]|0;
    $60 = (($59) + ($57<<2)|0);
    HEAP32[$60>>2] = $56;
   }
  }
  $61 = $10;
  $62 = $11;
  $63 = $14;
  $64 = $15;
  $65 = HEAP32[$21>>2]|0;
  $66 = HEAP32[$24>>2]|0;
  $67 = HEAP32[$25>>2]|0;
  $68 = HEAP32[$26>>2]|0;
  $69 = $17;
  $70 = $18;
  $71 = HEAP32[$28>>2]|0;
  $72 = HEAP16[$29>>1]|0;
  $73 = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$27+12>>2]|0;
  $74 = (_passDoAction($61,$62,$13,$63,$64,$65,$22,$66,$67,$68,$20,$$byval_copy,$69,$70,$71,$72,$73)|0);
  $75 = ($74|0)!=(0);
  if (!($75)) {
   break;
  }
  $76 = HEAP32[$13>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = $32;
  $79 = HEAP32[$78>>2]|0;
  $80 = ($77|0)!=($79|0);
  if ($80) {
   $81 = $32;
   $82 = HEAP32[$81>>2]|0;
   $83 = $30;
   $84 = HEAP32[$83>>2]|0;
   $85 = ($82|0)!=($84|0);
   if ($85) {
    $86 = $32;
    $87 = HEAP32[$86>>2]|0;
    (_releaseStringBuffer($87)|0);
   }
  }
  $88 = HEAP32[$20>>2]|0;
  $89 = $33;
  $90 = ($88|0)==($89|0);
  if (!($90)) {
   continue;
  }
  $31 = 0;
 }
 $120 = HEAP32[$20>>2]|0;
 $121 = HEAP32[$13>>2]|0;
 $122 = ((($121)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($120|0)<($123|0);
 L23: do {
  if ($124) {
   while(1) {
    $125 = HEAP32[$20>>2]|0;
    $126 = HEAP32[$13>>2]|0;
    $127 = ((($126)) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($128) + ($125<<1)|0);
    $130 = HEAP16[$129>>1]|0;
    $131 = $10;
    $132 = (_checkAttr($130,1,0,1,$131)|0);
    $133 = ($132|0)!=(0);
    if (!($133)) {
     break L23;
    }
    $134 = HEAP32[$20>>2]|0;
    $135 = (($134) + 1)|0;
    HEAP32[$20>>2] = $135;
    $136 = HEAP32[$13>>2]|0;
    $137 = ((($136)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($135|0)==($138|0);
    if ($139) {
     break;
    }
   }
  }
 } while(0);
 $140 = HEAP32[$20>>2]|0;
 $141 = $16;
 HEAP32[$141>>2] = $140;
 $142 = HEAP32[$13>>2]|0;
 $143 = HEAP32[$142>>2]|0;
 $144 = $30;
 $145 = HEAP32[$144>>2]|0;
 $146 = ($143|0)!=($145|0);
 if (!($146)) {
  STACKTOP = sp;return 1;
 }
 $147 = HEAP32[$13>>2]|0;
 $148 = HEAP32[$147>>2]|0;
 (_releaseStringBuffer($148)|0);
 STACKTOP = sp;return 1;
}
function _passSelectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $26 = $13;
 $27 = $14;
 $28 = $15;
 $29 = $16;
 $30 = $17;
 $31 = $18;
 $32 = $19;
 $33 = $20;
 $34 = $21;
 $35 = $22;
 $36 = $23;
 $37 = $24;
 $38 = $25;
 $39 = (_findForPassRule($26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $17;
 HEAP32[$41>>2] = 82;
 STACKTOP = sp;return;
}
function _passDoAction($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $27 = sp + 48|0;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 HEAP32[$27>>2] = $9;
 $28 = $10;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $35 = 0;
 $36 = 0;
 $41 = $21;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $37 = $43;
 $44 = ((($11)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $39 = $45;
 $46 = HEAP32[$11>>2]|0;
 $47 = ((($11)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $18;
 $50 = $19;
 $51 = $20;
 $52 = HEAP32[$51>>2]|0;
 $53 = $21;
 $54 = $22;
 $55 = $23;
 $56 = $29;
 $57 = $30;
 $58 = $33;
 $59 = (_copyCharacters($46,$48,$49,$50,$52,$53,$54,$55,$56,$57,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 $61 = $21;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $38 = $63;
 L5: while(1) {
  $64 = HEAP32[$27>>2]|0;
  $65 = $24;
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 36|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($64|0)<($69|0);
  if (!($70)) {
   label = 31;
   break;
  }
  $71 = HEAP32[$27>>2]|0;
  $72 = $26;
  $73 = (($72) + ($71<<1)|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  switch ($75|0) {
  case 64: case 34:  {
   $76 = $21;
   $77 = ((($76)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = HEAP32[$27>>2]|0;
   $80 = (($79) + 1)|0;
   $81 = $26;
   $82 = (($81) + ($80<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = $83&65535;
   $85 = (($78) + ($84))|0;
   $86 = $21;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($85|0)>($88|0);
   if ($89) {
    label = 7;
    break L5;
   }
   $34 = 0;
   while(1) {
    $90 = $34;
    $91 = HEAP32[$27>>2]|0;
    $92 = (($91) + 1)|0;
    $93 = $26;
    $94 = (($93) + ($92<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = ($90|0)<($96|0);
    if (!($97)) {
     break;
    }
    $98 = ((($11)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $21;
    $101 = ((($100)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $34;
    $104 = (($102) + ($103))|0;
    $105 = $22;
    $106 = (($105) + ($104<<2)|0);
    HEAP32[$106>>2] = $99;
    $107 = $34;
    $108 = (($107) + 1)|0;
    $34 = $108;
   }
   $109 = $21;
   $110 = ((($109)) + 12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $21;
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + ($111<<1)|0);
   $116 = HEAP32[$27>>2]|0;
   $117 = (($116) + 2)|0;
   $118 = $26;
   $119 = (($118) + ($117<<1)|0);
   $120 = HEAP32[$27>>2]|0;
   $121 = (($120) + 1)|0;
   $122 = $26;
   $123 = (($122) + ($121<<1)|0);
   $124 = HEAP16[$123>>1]|0;
   $125 = $124&65535;
   $126 = $125<<1;
   _memcpy(($115|0),($119|0),($126|0))|0;
   $127 = HEAP32[$27>>2]|0;
   $128 = (($127) + 1)|0;
   $129 = $26;
   $130 = (($129) + ($128<<1)|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131&65535;
   $133 = $21;
   $134 = ((($133)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + ($132))|0;
   HEAP32[$134>>2] = $136;
   $137 = HEAP32[$27>>2]|0;
   $138 = (($137) + 1)|0;
   $139 = $26;
   $140 = (($139) + ($138<<1)|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141&65535;
   $143 = (($142) + 2)|0;
   $144 = HEAP32[$27>>2]|0;
   $145 = (($144) + ($143))|0;
   HEAP32[$27>>2] = $145;
   continue L5;
   break;
  }
  case 123:  {
   $146 = HEAP32[$27>>2]|0;
   $147 = (($146) + 1)|0;
   $148 = $26;
   $149 = (($148) + ($147<<1)|0);
   $150 = HEAP16[$149>>1]|0;
   $151 = $150&65535;
   $152 = $151 << 16;
   $153 = HEAP32[$27>>2]|0;
   $154 = (($153) + 2)|0;
   $155 = $26;
   $156 = (($155) + ($154<<1)|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157&65535;
   $159 = $152 | $158;
   $35 = $159;
   $160 = $35;
   $161 = $18;
   $162 = ((($161)) + 21088|0);
   $163 = (($162) + ($160<<3)|0);
   $36 = $163;
   $164 = HEAP32[$11>>2]|0;
   $165 = $21;
   $166 = ((($165)) + 12|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $22;
   $169 = (($168) + ($167<<2)|0);
   HEAP32[$169>>2] = $164;
   $170 = $25;
   $171 = $170<<1;
   $172 = $36;
   $173 = ((($172)) + 38|0);
   $174 = (($173) + ($171<<1)|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = $21;
   $177 = ((($176)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + 1)|0;
   HEAP32[$177>>2] = $179;
   $180 = $21;
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + ($178<<1)|0);
   HEAP16[$183>>1] = $175;
   $184 = HEAP32[$27>>2]|0;
   $185 = (($184) + 3)|0;
   HEAP32[$27>>2] = $185;
   continue L5;
   break;
  }
  case 125:  {
   $186 = HEAP32[$27>>2]|0;
   $187 = (($186) + 1)|0;
   $188 = $26;
   $189 = (($188) + ($187<<1)|0);
   $190 = HEAP16[$189>>1]|0;
   $191 = $190&65535;
   $192 = $191 << 16;
   $193 = HEAP32[$27>>2]|0;
   $194 = (($193) + 2)|0;
   $195 = $26;
   $196 = (($195) + ($194<<1)|0);
   $197 = HEAP16[$196>>1]|0;
   $198 = $197&65535;
   $199 = $192 | $198;
   $35 = $199;
   $200 = $35;
   $201 = $18;
   $202 = ((($201)) + 21088|0);
   $203 = (($202) + ($200<<3)|0);
   $36 = $203;
   $204 = HEAP32[$11>>2]|0;
   $205 = $21;
   $206 = ((($205)) + 12|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $22;
   $209 = (($208) + ($207<<2)|0);
   HEAP32[$209>>2] = $204;
   $210 = $25;
   $211 = $210<<1;
   $212 = (($211) + 1)|0;
   $213 = $36;
   $214 = ((($213)) + 38|0);
   $215 = (($214) + ($212<<1)|0);
   $216 = HEAP16[$215>>1]|0;
   $217 = $21;
   $218 = ((($217)) + 12|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + 1)|0;
   HEAP32[$218>>2] = $220;
   $221 = $21;
   $222 = ((($221)) + 4|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($219<<1)|0);
   HEAP16[$224>>1] = $216;
   $225 = HEAP32[$27>>2]|0;
   $226 = (($225) + 3)|0;
   HEAP32[$27>>2] = $226;
   continue L5;
   break;
  }
  case 37:  {
   $227 = ((($11)) + 4|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($11)) + 8|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $18;
   $232 = $20;
   $233 = HEAP32[$232>>2]|0;
   $234 = $21;
   $235 = $22;
   $236 = $26;
   $237 = HEAP32[$27>>2]|0;
   $238 = (_swapReplace($228,$230,$231,$233,$234,$235,$236,$237)|0);
   $239 = ($238|0)!=(0);
   if (!($239)) {
    label = 15;
    break L5;
   }
   $240 = HEAP32[$27>>2]|0;
   $241 = (($240) + 3)|0;
   HEAP32[$27>>2] = $241;
   continue L5;
   break;
  }
  case 59:  {
   $242 = $31;
   $243 = ($242|0)!=(0|0);
   if (!($243)) {
    label = 19;
    break L5;
   }
   $244 = $18;
   $245 = $20;
   $246 = $21;
   $247 = $23;
   $248 = $25;
   $249 = $26;
   $250 = HEAP32[$27>>2]|0;
   $251 = ((($11)) + 4|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $31;
   $254 = $32;
   $255 = (_replaceGrouping($244,$245,$246,$247,$248,$249,$250,$252,$253,$254)|0);
   $256 = ($255|0)!=(0);
   if (!($256)) {
    label = 19;
    break L5;
   }
   $257 = HEAP32[$27>>2]|0;
   $258 = (($257) + 3)|0;
   HEAP32[$27>>2] = $258;
   continue L5;
   break;
  }
  case 63:  {
   $259 = $31;
   $260 = ($259|0)!=(0|0);
   if ($260) {
    $261 = $20;
    $262 = $21;
    $263 = $25;
    $264 = ((($11)) + 4|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $31;
    $267 = $32;
    (_removeGrouping($261,$262,$263,$265,$266,$267)|0);
   }
   $268 = HEAP32[$27>>2]|0;
   $269 = (($268) + 1)|0;
   HEAP32[$27>>2] = $269;
   continue L5;
   break;
  }
  case 42:  {
   $270 = $38;
   $271 = $37;
   $272 = (($270) - ($271))|0;
   $40 = $272;
   $273 = $40;
   $274 = ($273|0)>(0);
   if ($274) {
    $275 = $37;
    $276 = $21;
    $277 = ((($276)) + 4|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = (($278) + ($275<<1)|0);
    $280 = $38;
    $281 = $21;
    $282 = ((($281)) + 4|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (($283) + ($280<<1)|0);
    $285 = $40;
    $286 = $285<<1;
    _memmove(($279|0),($284|0),($286|0))|0;
    $287 = $40;
    $288 = $21;
    $289 = ((($288)) + 12|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (($290) - ($287))|0;
    HEAP32[$289>>2] = $291;
    $292 = $37;
    $38 = $292;
   }
   $293 = ((($11)) + 4|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = ((($11)) + 8|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $18;
   $298 = $19;
   $299 = $20;
   $300 = HEAP32[$299>>2]|0;
   $301 = $21;
   $302 = $22;
   $303 = $23;
   $304 = $29;
   $305 = $30;
   $306 = $33;
   $307 = (_copyCharacters($294,$296,$297,$298,$300,$301,$302,$303,$304,$305,$306)|0);
   $308 = ($307|0)!=(0);
   if (!($308)) {
    label = 27;
    break L5;
   }
   $309 = ((($11)) + 12|0);
   $310 = HEAP32[$309>>2]|0;
   $39 = $310;
   $311 = HEAP32[$27>>2]|0;
   $312 = (($311) + 1)|0;
   HEAP32[$27>>2] = $312;
   continue L5;
   break;
  }
  default: {
   $313 = $26;
   $314 = (__lou_handlePassVariableAction($313,$27)|0);
   $315 = ($314|0)!=(0);
   if ($315) {
    continue L5;
   } else {
    label = 30;
    break L5;
   }
  }
  }
 }
 if ((label|0) == 7) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 else if ((label|0) == 15) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 else if ((label|0) == 19) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 else if ((label|0) == 27) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 else if ((label|0) == 30) {
  $17 = 0;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 else if ((label|0) == 31) {
  $316 = $39;
  $317 = $28;
  HEAP32[$317>>2] = $316;
  $17 = 1;
  $318 = $17;
  STACKTOP = sp;return ($318|0);
 }
 return (0)|0;
}
function _copyCharacters($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $19;
 $24 = ($23|0)==(73);
 L1: do {
  if ($24) {
   while(1) {
    $25 = $12;
    $26 = $13;
    $27 = ($25|0)<($26|0);
    if (!($27)) {
     break L1;
    }
    $28 = $12;
    $29 = $16;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($28<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $14;
    $35 = $15;
    $36 = $12;
    $37 = $16;
    $38 = $17;
    $39 = $18;
    $40 = $20;
    $41 = $21;
    $42 = $22;
    $43 = (_putCharacter($33,$34,$35,$36,$37,$38,$39,$40,$41,$42)|0);
    $44 = ($43|0)!=(0);
    if (!($44)) {
     break;
    }
    $45 = $12;
    $46 = (($45) + 1)|0;
    $12 = $46;
   }
   $11 = 0;
   $89 = $11;
   STACKTOP = sp;return ($89|0);
  } else {
   $47 = $13;
   $48 = $12;
   $49 = ($47|0)>($48|0);
   if ($49) {
    $50 = $17;
    $51 = ((($50)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $13;
    $54 = (($52) + ($53))|0;
    $55 = $12;
    $56 = (($54) - ($55))|0;
    $57 = $17;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($56|0)>($59|0);
    if ($60) {
     $11 = 0;
     $89 = $11;
     STACKTOP = sp;return ($89|0);
    } else {
     while(1) {
      $61 = $13;
      $62 = $12;
      $63 = ($61|0)>($62|0);
      if (!($63)) {
       break L1;
      }
      $64 = $12;
      $65 = $17;
      $66 = ((($65)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = $18;
      $69 = (($68) + ($67<<2)|0);
      HEAP32[$69>>2] = $64;
      $70 = $12;
      $71 = $16;
      $72 = ((($71)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($73) + ($70<<1)|0);
      $75 = HEAP16[$74>>1]|0;
      $76 = $17;
      $77 = ((($76)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $17;
      $80 = ((($79)) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (($81) + ($78<<1)|0);
      HEAP16[$82>>1] = $75;
      $83 = $17;
      $84 = ((($83)) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($85) + 1)|0;
      HEAP32[$84>>2] = $86;
      $87 = $12;
      $88 = (($87) + 1)|0;
      $12 = $88;
     }
    }
   }
  }
 } while(0);
 $11 = 1;
 $89 = $11;
 STACKTOP = sp;return ($89|0);
}
function _swapReplace($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $26 = $16;
 $27 = (($26) + 1)|0;
 $28 = $15;
 $29 = (($28) + ($27<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = $31 << 16;
 $33 = $16;
 $34 = (($33) + 2)|0;
 $35 = $15;
 $36 = (($35) + ($34<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $32 | $38;
 $17 = $39;
 $40 = $17;
 $41 = $11;
 $42 = ((($41)) + 21088|0);
 $43 = (($42) + ($40<<3)|0);
 $18 = $43;
 $44 = $18;
 $45 = ((($44)) + 34|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 $48 = $18;
 $49 = ((($48)) + 38|0);
 $50 = (($49) + ($47<<1)|0);
 $19 = $50;
 $51 = $9;
 $20 = $51;
 L1: while(1) {
  $52 = $20;
  $53 = $10;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   label = 28;
   break;
  }
  $55 = $18;
  $56 = ((($55)) + 28|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(59);
  $22 = 0;
  if ($58) {
   while(1) {
    $59 = $22;
    $60 = $59<<1;
    $61 = (($60) + 1)|0;
    $62 = $18;
    $63 = ((($62)) + 34|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64 << 16 >> 16;
    $66 = ($61|0)<($65|0);
    if (!($66)) {
     break;
    }
    $67 = $20;
    $68 = $12;
    $69 = ((($68)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = $22;
    $75 = $74<<1;
    $76 = (($75) + 1)|0;
    $77 = $18;
    $78 = ((($77)) + 38|0);
    $79 = (($78) + ($76<<1)|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    $82 = ($73|0)==($81|0);
    if ($82) {
     break;
    }
    $83 = $22;
    $84 = (($83) + 1)|0;
    $22 = $84;
   }
   $85 = $22;
   $86 = $85<<1;
   $87 = $18;
   $88 = ((($87)) + 34|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89 << 16 >> 16;
   $91 = ($86|0)==($90|0);
   if (!($91)) {
    label = 12;
   }
  } else {
   while(1) {
    $92 = $22;
    $93 = $18;
    $94 = ((($93)) + 34|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95 << 16 >> 16;
    $97 = ($92|0)<($96|0);
    if (!($97)) {
     break;
    }
    $98 = $20;
    $99 = $12;
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($98<<1)|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = $22;
    $106 = $18;
    $107 = ((($106)) + 38|0);
    $108 = (($107) + ($105<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109&65535;
    $111 = ($104|0)==($110|0);
    if ($111) {
     break;
    }
    $112 = $22;
    $113 = (($112) + 1)|0;
    $22 = $113;
   }
   $114 = $22;
   $115 = $18;
   $116 = ((($115)) + 34|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117 << 16 >> 16;
   $119 = ($114|0)==($118|0);
   if (!($119)) {
    label = 12;
   }
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $23 = 0;
    $21 = 0;
    while(1) {
     $120 = $21;
     $121 = $22;
     $122 = ($120|0)<($121|0);
     $123 = $18;
     $124 = ((($123)) + 28|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)==(57);
     if (!($122)) {
      break;
     }
     $127 = $23;
     if ($126) {
      $128 = (($127) + 1)|0;
      $23 = $128;
     } else {
      $129 = $19;
      $130 = (($129) + ($127<<1)|0);
      $131 = HEAP16[$130>>1]|0;
      $132 = $131&65535;
      $133 = $23;
      $134 = (($133) + ($132))|0;
      $23 = $134;
     }
     $135 = $21;
     $136 = (($135) + 1)|0;
     $21 = $136;
    }
    if ($126) {
     $137 = $13;
     $138 = ((($137)) + 12|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + 1)|0;
     $141 = $13;
     $142 = ((($141)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)>($143|0);
     if ($144) {
      label = 20;
      break L1;
     }
     $145 = $20;
     $146 = $13;
     $147 = ((($146)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $14;
     $150 = (($149) + ($148<<2)|0);
     HEAP32[$150>>2] = $145;
     $151 = $23;
     $152 = $19;
     $153 = (($152) + ($151<<1)|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $13;
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + 1)|0;
     HEAP32[$156>>2] = $158;
     $159 = $13;
     $160 = ((($159)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + ($157<<1)|0);
     HEAP16[$162>>1] = $154;
     break;
    }
    $163 = $23;
    $164 = $19;
    $165 = (($164) + ($163<<1)|0);
    $166 = HEAP16[$165>>1]|0;
    $167 = $166&65535;
    $168 = (($167) - 1)|0;
    $24 = $168;
    $169 = $13;
    $170 = ((($169)) + 12|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $24;
    $173 = (($171) + ($172))|0;
    $25 = $173;
    $174 = $25;
    $175 = $13;
    $176 = ((($175)) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($174|0)>($177|0);
    if ($178) {
     label = 23;
     break L1;
    }
    while(1) {
     $179 = $25;
     $180 = (($179) + -1)|0;
     $25 = $180;
     $181 = $13;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($180|0)>=($183|0);
     if (!($184)) {
      break;
     }
     $185 = $20;
     $186 = $25;
     $187 = $14;
     $188 = (($187) + ($186<<2)|0);
     HEAP32[$188>>2] = $185;
    }
    $189 = $13;
    $190 = ((($189)) + 12|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $13;
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($194) + ($191<<1)|0);
    $196 = $23;
    $197 = (($196) + 1)|0;
    $198 = $19;
    $199 = (($198) + ($197<<1)|0);
    $200 = $24;
    $201 = $200<<1;
    _memcpy(($195|0),($199|0),($201|0))|0;
    $202 = $24;
    $203 = $13;
    $204 = ((($203)) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + ($202))|0;
    HEAP32[$204>>2] = $206;
   }
  } while(0);
  $207 = $20;
  $208 = (($207) + 1)|0;
  $20 = $208;
 }
 if ((label|0) == 20) {
  $8 = 0;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 else if ((label|0) == 23) {
  $8 = 0;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 else if ((label|0) == 28) {
  $8 = 1;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 return (0)|0;
}
function _replaceGrouping($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $31 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $32 = $15;
 $33 = $32<<1;
 $34 = $19;
 $35 = ((($34)) + 38|0);
 $36 = (($35) + ($33<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $21 = $37;
 $38 = $15;
 $39 = $38<<1;
 $40 = (($39) + 1)|0;
 $41 = $19;
 $42 = ((($41)) + 38|0);
 $43 = (($42) + ($40<<1)|0);
 $44 = HEAP16[$43>>1]|0;
 $22 = $44;
 $24 = 0;
 $45 = $17;
 $46 = (($45) + 1)|0;
 $47 = $16;
 $48 = (($47) + ($46<<1)|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = $50 << 16;
 $52 = $17;
 $53 = (($52) + 2)|0;
 $54 = $16;
 $55 = (($54) + ($53<<1)|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $57 & 255;
 $59 = $51 | $58;
 $25 = $59;
 $60 = $25;
 $61 = $11;
 $62 = ((($61)) + 21088|0);
 $63 = (($62) + ($60<<3)|0);
 $26 = $63;
 $64 = $15;
 $65 = $64<<1;
 $66 = $26;
 $67 = ((($66)) + 38|0);
 $68 = (($67) + ($65<<1)|0);
 $69 = HEAP16[$68>>1]|0;
 $27 = $69;
 $70 = $15;
 $71 = $70<<1;
 $72 = (($71) + 1)|0;
 $73 = $26;
 $74 = ((($73)) + 38|0);
 $75 = (($74) + ($72<<1)|0);
 $76 = HEAP16[$75>>1]|0;
 $28 = $76;
 $77 = $20;
 $78 = $77&65535;
 $79 = ($78|0)==(123);
 do {
  if ($79) {
   $80 = $18;
   $81 = (($80) + 1)|0;
   $23 = $81;
   while(1) {
    $82 = $23;
    $83 = $12;
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($82|0)<($86|0);
    if (!($87)) {
     break;
    }
    $88 = $23;
    $89 = $12;
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($88<<1)|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $21;
    $97 = $96&65535;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $24;
     $100 = (($99) + -1)|0;
     $24 = $100;
    }
    $101 = $23;
    $102 = $12;
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($103)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($101<<1)|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $22;
    $110 = $109&65535;
    $111 = ($108|0)==($110|0);
    if ($111) {
     $112 = $24;
     $113 = (($112) + 1)|0;
     $24 = $113;
    }
    $114 = $24;
    $115 = ($114|0)==(1);
    if ($115) {
     break;
    }
    $116 = $23;
    $117 = (($116) + 1)|0;
    $23 = $117;
   }
   $118 = $23;
   $119 = $12;
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($118|0)==($122|0);
   if (!($123)) {
    $124 = $12;
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_getStringBuffer($127)|0);
    $29 = $128;
    $129 = $29;
    $130 = HEAP32[3719]|0;
    $131 = ((($130)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($129<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $30 = $134;
    $135 = $30;
    $136 = $12;
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($137)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $12;
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($141)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143<<1;
    _memcpy(($135|0),($139|0),($144|0))|0;
    $145 = $27;
    $146 = $18;
    $147 = $30;
    $148 = (($147) + ($146<<1)|0);
    HEAP16[$148>>1] = $145;
    $149 = $28;
    $150 = $23;
    $151 = $30;
    $152 = (($151) + ($150<<1)|0);
    HEAP16[$152>>1] = $149;
    $153 = $29;
    HEAP32[$31>>2] = $153;
    $154 = ((($31)) + 4|0);
    $155 = $30;
    HEAP32[$154>>2] = $155;
    $156 = ((($31)) + 8|0);
    $157 = $12;
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($158)) + 8|0);
    $160 = HEAP32[$159>>2]|0;
    HEAP32[$156>>2] = $160;
    ;HEAP32[14892>>2]=HEAP32[$31>>2]|0;HEAP32[14892+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[14892+8>>2]=HEAP32[$31+8>>2]|0;
    $161 = $12;
    HEAP32[$161>>2] = 14892;
    break;
   }
   $10 = 0;
   $234 = $10;
   STACKTOP = sp;return ($234|0);
  } else {
   $162 = $14;
   $163 = ($162|0)==(73);
   if ($163) {
    $164 = $19;
    $165 = ((($164)) + 38|0);
    $166 = ((($165)) + 4|0);
    $167 = HEAP16[$166>>1]|0;
    $21 = $167;
    $168 = $19;
    $169 = ((($168)) + 38|0);
    $170 = ((($169)) + 6|0);
    $171 = HEAP16[$170>>1]|0;
    $22 = $171;
    $172 = $26;
    $173 = ((($172)) + 38|0);
    $174 = ((($173)) + 4|0);
    $175 = HEAP16[$174>>1]|0;
    $27 = $175;
    $176 = $26;
    $177 = ((($176)) + 38|0);
    $178 = ((($177)) + 6|0);
    $179 = HEAP16[$178>>1]|0;
    $28 = $179;
   }
   $180 = $28;
   $181 = $13;
   $182 = ((($181)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $13;
   $185 = ((($184)) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($183<<1)|0);
   HEAP16[$187>>1] = $180;
   $188 = $13;
   $189 = ((($188)) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) - 1)|0;
   $23 = $191;
   while(1) {
    $192 = $23;
    $193 = ($192|0)>=(0);
    if (!($193)) {
     break;
    }
    $194 = $23;
    $195 = $13;
    $196 = ((($195)) + 4|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($197) + ($194<<1)|0);
    $199 = HEAP16[$198>>1]|0;
    $200 = $199&65535;
    $201 = $22;
    $202 = $201&65535;
    $203 = ($200|0)==($202|0);
    if ($203) {
     $204 = $24;
     $205 = (($204) + -1)|0;
     $24 = $205;
    }
    $206 = $23;
    $207 = $13;
    $208 = ((($207)) + 4|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + ($206<<1)|0);
    $211 = HEAP16[$210>>1]|0;
    $212 = $211&65535;
    $213 = $21;
    $214 = $213&65535;
    $215 = ($212|0)==($214|0);
    if ($215) {
     $216 = $24;
     $217 = (($216) + 1)|0;
     $24 = $217;
    }
    $218 = $24;
    $219 = ($218|0)==(1);
    if ($219) {
     break;
    }
    $220 = $23;
    $221 = (($220) + -1)|0;
    $23 = $221;
   }
   $222 = $23;
   $223 = ($222|0)<(0);
   if (!($223)) {
    $224 = $27;
    $225 = $23;
    $226 = $13;
    $227 = ((($226)) + 4|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (($228) + ($225<<1)|0);
    HEAP16[$229>>1] = $224;
    $230 = $13;
    $231 = ((($230)) + 12|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + 1)|0;
    HEAP32[$231>>2] = $233;
    break;
   }
   $10 = 0;
   $234 = $10;
   STACKTOP = sp;return ($234|0);
  }
 } while(0);
 $10 = 1;
 $234 = $10;
 STACKTOP = sp;return ($234|0);
}
function _removeGrouping($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $22 = $9;
 $23 = $22<<1;
 $24 = $11;
 $25 = ((($24)) + 38|0);
 $26 = (($25) + ($23<<1)|0);
 $27 = HEAP16[$26>>1]|0;
 $13 = $27;
 $28 = $9;
 $29 = $28<<1;
 $30 = (($29) + 1)|0;
 $31 = $11;
 $32 = ((($31)) + 38|0);
 $33 = (($32) + ($30<<1)|0);
 $34 = HEAP16[$33>>1]|0;
 $14 = $34;
 $16 = 0;
 $35 = $12;
 $36 = $35&65535;
 $37 = ($36|0)==(123);
 if ($37) {
  $38 = $10;
  $39 = (($38) + 1)|0;
  $15 = $39;
  while(1) {
   $40 = $15;
   $41 = $7;
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = $15;
   $47 = $7;
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($46<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = $13;
   $55 = $54&65535;
   $56 = ($53|0)==($55|0);
   if ($56) {
    $57 = $16;
    $58 = (($57) + -1)|0;
    $16 = $58;
   }
   $59 = $15;
   $60 = $7;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($59<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $14;
   $68 = $67&65535;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = $16;
    $71 = (($70) + 1)|0;
    $16 = $71;
   }
   $72 = $16;
   $73 = ($72|0)==(1);
   if ($73) {
    break;
   }
   $74 = $15;
   $75 = (($74) + 1)|0;
   $15 = $75;
  }
  $76 = $15;
  $77 = $7;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($76|0)==($80|0);
  if ($81) {
   $6 = 0;
   $182 = $6;
   STACKTOP = sp;return ($182|0);
  }
  $82 = $7;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_getStringBuffer($85)|0);
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[3719]|0;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($87<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $18 = $92;
  $19 = 0;
  $20 = 0;
  while(1) {
   $93 = $20;
   $94 = $7;
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($93|0)<($97|0);
   if (!($98)) {
    break;
   }
   $99 = $20;
   $100 = $15;
   $101 = ($99|0)==($100|0);
   if (!($101)) {
    $102 = $20;
    $103 = $7;
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + ($102<<1)|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $19;
    $110 = (($109) + 1)|0;
    $19 = $110;
    $111 = $18;
    $112 = (($111) + ($109<<1)|0);
    HEAP16[$112>>1] = $108;
   }
   $113 = $20;
   $114 = (($113) + 1)|0;
   $20 = $114;
  }
  $115 = $17;
  HEAP32[$21>>2] = $115;
  $116 = ((($21)) + 4|0);
  $117 = $18;
  HEAP32[$116>>2] = $117;
  $118 = ((($21)) + 8|0);
  $119 = $19;
  HEAP32[$118>>2] = $119;
  ;HEAP32[14880>>2]=HEAP32[$21>>2]|0;HEAP32[14880+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[14880+8>>2]=HEAP32[$21+8>>2]|0;
  $120 = $7;
  HEAP32[$120>>2] = 14880;
 } else {
  $121 = $8;
  $122 = ((($121)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) - 1)|0;
  $15 = $124;
  while(1) {
   $125 = $15;
   $126 = ($125|0)>=(0);
   if (!($126)) {
    break;
   }
   $127 = $15;
   $128 = $8;
   $129 = ((($128)) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($127<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132&65535;
   $134 = $14;
   $135 = $134&65535;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = $16;
    $138 = (($137) + -1)|0;
    $16 = $138;
   }
   $139 = $15;
   $140 = $8;
   $141 = ((($140)) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($139<<1)|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = $144&65535;
   $146 = $13;
   $147 = $146&65535;
   $148 = ($145|0)==($147|0);
   if ($148) {
    $149 = $16;
    $150 = (($149) + 1)|0;
    $16 = $150;
   }
   $151 = $16;
   $152 = ($151|0)==(1);
   if ($152) {
    break;
   }
   $153 = $15;
   $154 = (($153) + -1)|0;
   $15 = $154;
  }
  $155 = $15;
  $156 = ($155|0)<(0);
  if ($156) {
   $6 = 0;
   $182 = $6;
   STACKTOP = sp;return ($182|0);
  }
  $157 = $15;
  $158 = (($157) + 1)|0;
  $15 = $158;
  while(1) {
   $159 = $15;
   $160 = $8;
   $161 = ((($160)) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    break;
   }
   $164 = $15;
   $165 = $8;
   $166 = ((($165)) + 4|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<1)|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $15;
   $171 = (($170) - 1)|0;
   $172 = $8;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<1)|0);
   HEAP16[$175>>1] = $169;
   $176 = $15;
   $177 = (($176) + 1)|0;
   $15 = $177;
  }
  $178 = $8;
  $179 = ((($178)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + -1)|0;
  HEAP32[$179>>2] = $181;
 }
 $6 = 1;
 $182 = $6;
 STACKTOP = sp;return ($182|0);
}
function _putCharacter($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $24 = sp + 52|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = 0;
 $22 = 0;
 $25 = $11;
 $26 = $12;
 $27 = (_findCharOrDots($25,0,$26)|0);
 $22 = $27;
 $28 = $22;
 $29 = ((($28)) + 16|0);
 $30 = $29;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $32 & 16;
 $37 = ($36|0)!=(0);
 $38 = (0)!=(0);
 $39 = $37 | $38;
 if ($39) {
  $40 = $12;
  $41 = (_capsletterDefined($40)|0);
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $22;
   $44 = ((($43)) + 28|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $12;
   $47 = (_findCharOrDots($45,0,$46)|0);
   $22 = $47;
  }
 }
 $48 = $22;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $23 = $50;
 $51 = $23;
 $52 = ($51|0)!=(0);
 if (!($52)) {
  $85 = $11;
  $86 = $12;
  $87 = $13;
  $88 = $14;
  $89 = $15;
  $90 = $16;
  $91 = $17;
  $92 = $18;
  $93 = $19;
  $94 = $20;
  $95 = (_undefinedCharacter($85,$86,$87,$88,$89,$90,$91,$92,$93,$94)|0);
  $10 = $95;
  $96 = $10;
  STACKTOP = sp;return ($96|0);
 }
 $53 = $23;
 $54 = $12;
 $55 = ((($54)) + 21088|0);
 $56 = (($55) + ($53<<3)|0);
 $21 = $56;
 $57 = $21;
 $58 = ((($57)) + 36|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59<<16>>16)!=(0);
 if ($60) {
  $61 = $21;
  $62 = ((($61)) + 38|0);
  $63 = ((($62)) + 2|0);
  $64 = $21;
  $65 = ((($64)) + 36|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = $14;
  $69 = $15;
  $70 = $16;
  $71 = $17;
  $72 = $18;
  $73 = $19;
  $74 = (_for_updatePositions($63,1,$67,0,$68,$69,$70,$71,$72,$73)|0);
  $10 = $74;
  $96 = $10;
  STACKTOP = sp;return ($96|0);
 } else {
  $75 = $11;
  $76 = $13;
  $77 = (__lou_getDotsForChar($75,$76)|0);
  HEAP16[$24>>1] = $77;
  $78 = $14;
  $79 = $15;
  $80 = $16;
  $81 = $17;
  $82 = $18;
  $83 = $19;
  $84 = (_for_updatePositions($24,1,1,0,$78,$79,$80,$81,$82,$83)|0);
  $10 = $84;
  $96 = $10;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function _capsletterDefined($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 616|0);
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _for_updatePositions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $13;
 $26 = (($24) + ($25))|0;
 $27 = $17;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26|0)>($29|0);
 if (!($30)) {
  $31 = $15;
  $32 = $12;
  $33 = (($31) + ($32))|0;
  $34 = $16;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)>($36|0);
  if (!($37)) {
   $38 = $17;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $17;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<1)|0);
   $45 = $11;
   $46 = $13;
   $47 = $46<<1;
   _memcpy(($44|0),($45|0),($47|0))|0;
   $48 = $20;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0);
   do {
    if ($50) {
     $90 = $20;
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(2);
     if ($92) {
      $93 = $19;
      $94 = HEAP32[$93>>2]|0;
      $95 = $15;
      $96 = ($94|0)==($95|0);
      if ($96) {
       $97 = $17;
       $98 = ((($97)) + 12|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = $19;
       HEAP32[$100>>2] = $99;
      }
     }
    } else {
     $51 = $19;
     $52 = HEAP32[$51>>2]|0;
     $53 = $15;
     $54 = ($52|0)>=($53|0);
     if ($54) {
      $55 = $19;
      $56 = HEAP32[$55>>2]|0;
      $57 = $15;
      $58 = $12;
      $59 = (($57) + ($58))|0;
      $60 = ($56|0)<($59|0);
      if ($60) {
       $61 = $17;
       $62 = ((($61)) + 12|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $19;
       HEAP32[$64>>2] = $63;
       $65 = $20;
       HEAP32[$65>>2] = 1;
       break;
      }
     }
     $66 = $19;
     $67 = HEAP32[$66>>2]|0;
     $68 = $16;
     $69 = ((($68)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&65535;
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = $19;
      $76 = HEAP32[$75>>2]|0;
      $77 = $15;
      $78 = $12;
      $79 = (($77) + ($78))|0;
      $80 = ($76|0)==($79|0);
      if ($80) {
       $81 = $17;
       $82 = ((($81)) + 12|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $13;
       $85 = (($84|0) / 2)&-1;
       $86 = (($83) + ($85))|0;
       $87 = (($86) + 1)|0;
       $88 = $19;
       HEAP32[$88>>2] = $87;
       $89 = $20;
       HEAP32[$89>>2] = 1;
      }
     }
    }
   } while(0);
   $21 = 0;
   while(1) {
    $101 = $21;
    $102 = $13;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $15;
    $105 = $14;
    $106 = (($104) + ($105))|0;
    $107 = $17;
    $108 = ((($107)) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $21;
    $111 = (($109) + ($110))|0;
    $112 = $18;
    $113 = (($112) + ($111<<2)|0);
    HEAP32[$113>>2] = $106;
    $114 = $21;
    $115 = (($114) + 1)|0;
    $21 = $115;
   }
   $116 = $13;
   $117 = $17;
   $118 = ((($117)) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($116))|0;
   HEAP32[$118>>2] = $120;
   $10 = 1;
   $121 = $10;
   STACKTOP = sp;return ($121|0);
  }
 }
 $10 = 0;
 $121 = $10;
 STACKTOP = sp;return ($121|0);
}
function _undefinedCharacter($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 64|0;
 HEAP16[$11>>1] = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $28 = $12;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $12;
  $33 = ((($32)) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $12;
  $36 = ((($35)) + 21088|0);
  $37 = (($36) + ($34<<3)|0);
  $21 = $37;
  $38 = $21;
  $39 = ((($38)) + 34|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = $21;
  $43 = ((($42)) + 38|0);
  $44 = (($43) + ($41<<1)|0);
  $45 = $21;
  $46 = ((($45)) + 34|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $21;
  $50 = ((($49)) + 36|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = $14;
  $54 = $15;
  $55 = $16;
  $56 = $17;
  $57 = $18;
  $58 = $19;
  $59 = (_for_updatePositions($44,$48,$52,0,$53,$54,$55,$56,$57,$58)|0);
  $10 = $59;
  $100 = $10;
  STACKTOP = sp;return ($100|0);
 }
 $60 = $20;
 $61 = $60 & 128;
 $62 = ($61|0)!=(0);
 if ($62) {
  $64 = 28246;
 } else {
  $63 = (__lou_showString($11,1,1)|0);
  $64 = $63;
 }
 $22 = $64;
 $65 = $22;
 $66 = (_strlen($65)|0);
 $23 = $66;
 $67 = $23;
 $68 = (_llvm_stacksave()|0);
 $24 = $68;
 $$alloca_mul = $67<<1;
 $69 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $25 = 0;
 while(1) {
  $70 = $25;
  $71 = $23;
  $72 = ($70>>>0)<($71>>>0);
  if (!($72)) {
   break;
  }
  $73 = $25;
  $74 = $22;
  $75 = (($74) + ($73)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 << 24 >> 24;
  $26 = $77;
  $78 = $26;
  $79 = $13;
  $80 = (__lou_getDotsForChar($78,$79)|0);
  $27 = $80;
  $81 = $27;
  $82 = $81&65535;
  $83 = ($82|0)==(32768);
  if ($83) {
   $84 = $26;
   $85 = (__lou_charToFallbackDots($84)|0);
   $27 = $85;
  }
  $86 = $27;
  $87 = $25;
  $88 = (($69) + ($87<<1)|0);
  HEAP16[$88>>1] = $86;
  $89 = $25;
  $90 = (($89) + 1)|0;
  $25 = $90;
 }
 $91 = $23;
 $92 = $14;
 $93 = $15;
 $94 = $16;
 $95 = $17;
 $96 = $18;
 $97 = $19;
 $98 = (_for_updatePositions($69,1,$91,0,$92,$93,$94,$95,$96,$97)|0);
 $10 = $98;
 $99 = $24;
 _llvm_stackrestore(($99|0));
 $100 = $10;
 STACKTOP = sp;return ($100|0);
}
function _findForPassRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $31 = $20;
 $32 = HEAP32[$31>>2]|0;
 $27 = $32;
 $33 = $19;
 $34 = HEAP32[$33>>2]|0;
 $28 = $34;
 $35 = $18;
 $36 = HEAP32[$35>>2]|0;
 $29 = $36;
 $37 = $16;
 $38 = $14;
 $39 = ((($38)) + 12064|0);
 $40 = (($39) + ($37<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $30 = $41;
 $42 = $20;
 HEAP32[$42>>2] = 0;
 while(1) {
  $43 = $30;
  $44 = ($43|0)!=(0);
  if (!($44)) {
   label = 6;
   break;
  }
  $45 = $30;
  $46 = $14;
  $47 = ((($46)) + 21088|0);
  $48 = (($47) + ($45<<3)|0);
  $49 = $19;
  HEAP32[$49>>2] = $48;
  $50 = $19;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $18;
  HEAP32[$54>>2] = $53;
  $55 = $14;
  $56 = $15;
  $57 = $17;
  $58 = $18;
  $59 = HEAP32[$58>>2]|0;
  $60 = $19;
  $61 = HEAP32[$60>>2]|0;
  $62 = $21;
  $63 = $22;
  $64 = $23;
  $65 = $24;
  $66 = $25;
  $67 = $26;
  $68 = (_passDoTest($55,$56,$57,$59,$61,$62,$63,$64,$65,$66,$67)|0);
  $69 = ($68|0)!=(0);
  if ($69) {
   label = 4;
   break;
  }
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$71>>2]|0;
  $30 = $72;
 }
 if ((label|0) == 4) {
  $13 = 1;
  $79 = $13;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 6) {
  $73 = $27;
  $74 = $20;
  HEAP32[$74>>2] = $73;
  $75 = $28;
  $76 = $19;
  HEAP32[$76>>2] = $75;
  $77 = $29;
  $78 = $18;
  HEAP32[$78>>2] = $77;
  $13 = 0;
  $79 = $13;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _passDoTest($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = sp + 104|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $29 = sp;
 $34 = sp + 24|0;
 $35 = sp + 8|0;
 $12 = $0;
 HEAP32[$13>>2] = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $26 = 0;
 $27 = 0;
 $28 = 0;
 $36 = $29;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$13>>2]|0;
 $30 = $40;
 $41 = HEAP32[$13>>2]|0;
 $31 = $41;
 $32 = -1;
 $33 = -1;
 $42 = $21;
 HEAP32[$42>>2] = 0;
 $43 = $16;
 $44 = ((($43)) + 34|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = $16;
 $48 = ((($47)) + 38|0);
 $49 = (($48) + ($46<<1)|0);
 $50 = $18;
 HEAP32[$50>>2] = $49;
 $51 = $19;
 HEAP32[$51>>2] = 0;
 $52 = $15;
 $53 = ($52|0)==(73);
 $54 = $15;
 $55 = ($54|0)==(74);
 $or$cond = $53 | $55;
 $56 = $17;
 if ($or$cond) {
  HEAP32[$56>>2] = 0;
 } else {
  HEAP32[$56>>2] = 1;
 }
 L4: while(1) {
  $57 = $19;
  $58 = HEAP32[$57>>2]|0;
  $59 = $16;
  $60 = ((($59)) + 36|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = ($58|0)<($62|0);
  if (!($63)) {
   label = 68;
   break;
  }
  HEAP32[$34>>2] = 1;
  $64 = HEAP32[$13>>2]|0;
  $65 = $14;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)>($67|0);
  if ($68) {
   label = 6;
   break;
  }
  $69 = $19;
  $70 = HEAP32[$69>>2]|0;
  $71 = $18;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($70<<1)|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  do {
   switch ($75|0) {
   case 47:  {
    label = 53;
    break L4;
    break;
   }
   case 32:  {
    break L4;
    break;
   }
   case 96:  {
    $76 = HEAP32[$13>>2]|0;
    $77 = ($76|0)!=(0);
    if ($77) {
     HEAP32[$34>>2] = 0;
    }
    $78 = $19;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[$78>>2] = $80;
    break;
   }
   case 126:  {
    $81 = HEAP32[$13>>2]|0;
    $82 = $14;
    $83 = ((($82)) + 8|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($81|0)!=($84|0);
    if ($85) {
     HEAP32[$34>>2] = 0;
    }
    $86 = $19;
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 1)|0;
    HEAP32[$86>>2] = $88;
    break;
   }
   case 95:  {
    $89 = $19;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 1)|0;
    $92 = $18;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($91<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = HEAP32[$13>>2]|0;
    $98 = (($97) - ($96))|0;
    HEAP32[$13>>2] = $98;
    $99 = HEAP32[$13>>2]|0;
    $100 = ($99|0)<(0);
    if ($100) {
     HEAP32[$24>>2] = 0;
     HEAP32[$34>>2] = 0;
    }
    $101 = $19;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 2)|0;
    HEAP32[$101>>2] = $103;
    break;
   }
   case 33:  {
    $104 = $26;
    $105 = ($104|0)!=(0);
    $106 = $105 ^ 1;
    $107 = $106&1;
    $26 = $107;
    $108 = $19;
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + 1)|0;
    HEAP32[$108>>2] = $110;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $111 = $14;
    $112 = HEAP32[$13>>2]|0;
    $113 = $18;
    $114 = HEAP32[$113>>2]|0;
    $115 = $19;
    $116 = HEAP32[$115>>2]|0;
    $117 = (_matchCurrentInput($111,$112,$114,$116)|0);
    HEAP32[$34>>2] = $117;
    $118 = $19;
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + 1)|0;
    $121 = $18;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + ($120<<1)|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = $124&65535;
    $126 = HEAP32[$13>>2]|0;
    $127 = (($126) + ($125))|0;
    HEAP32[$13>>2] = $127;
    $128 = $19;
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + 1)|0;
    $131 = $18;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($130<<1)|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $136 = (($135) + 2)|0;
    $137 = $19;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($136))|0;
    HEAP32[$137>>2] = $139;
    break;
   }
   case 91:  {
    $140 = HEAP32[$13>>2]|0;
    $32 = $140;
    $141 = $19;
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + 1)|0;
    HEAP32[$141>>2] = $143;
    break;
   }
   case 93:  {
    $144 = HEAP32[$13>>2]|0;
    $33 = $144;
    $145 = $19;
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + 1)|0;
    HEAP32[$145>>2] = $147;
    break;
   }
   case 36:  {
    $148 = $19;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($149) + 1)|0;
    $151 = $18;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($150<<1)|0);
    $154 = HEAP16[$153>>1]|0;
    $155 = $154&65535;
    $156 = $155 << 16;
    $157 = $19;
    $158 = HEAP32[$157>>2]|0;
    $159 = (($158) + 2)|0;
    $160 = $18;
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + ($159<<1)|0);
    $163 = HEAP16[$162>>1]|0;
    $164 = $163&65535;
    $165 = $156 | $164;
    $166 = ($165|0)<(0);
    $167 = $166 << 31 >> 31;
    $168 = $29;
    $169 = $168;
    HEAP32[$169>>2] = $165;
    $170 = (($168) + 4)|0;
    $171 = $170;
    HEAP32[$171>>2] = $167;
    $25 = 0;
    while(1) {
     $172 = $25;
     $173 = $19;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + 3)|0;
     $176 = $18;
     $177 = HEAP32[$176>>2]|0;
     $178 = (($177) + ($175<<1)|0);
     $179 = HEAP16[$178>>1]|0;
     $180 = $179&65535;
     $181 = ($172|0)<($180|0);
     if (!($181)) {
      break;
     }
     $182 = HEAP32[$13>>2]|0;
     $183 = $14;
     $184 = ((($183)) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($182|0)>=($185|0);
     if ($186) {
      label = 24;
      break;
     }
     $187 = HEAP32[$13>>2]|0;
     $188 = $14;
     $189 = ((($188)) + 4|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + ($187<<1)|0);
     $192 = HEAP16[$191>>1]|0;
     $193 = $192&65535;
     $194 = ($193|0)==(65535);
     if ($194) {
      label = 26;
      break;
     }
     $195 = HEAP32[$13>>2]|0;
     $196 = $14;
     $197 = ((($196)) + 4|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($198) + ($195<<1)|0);
     $200 = HEAP16[$199>>1]|0;
     $201 = $17;
     $202 = HEAP32[$201>>2]|0;
     $203 = $12;
     $204 = (_findCharOrDots($200,$202,$203)|0);
     $205 = ((($204)) + 16|0);
     $206 = $205;
     $207 = $206;
     $208 = HEAP32[$207>>2]|0;
     $209 = (($206) + 4)|0;
     $210 = $209;
     $211 = HEAP32[$210>>2]|0;
     $212 = $29;
     $213 = $212;
     $214 = HEAP32[$213>>2]|0;
     $215 = (($212) + 4)|0;
     $216 = $215;
     $217 = HEAP32[$216>>2]|0;
     $218 = $208 & $214;
     $219 = $211 & $217;
     $220 = ($218|0)!=(0);
     $221 = ($219|0)!=(0);
     $222 = $220 | $221;
     $223 = $26;
     $224 = ($223|0)!=(0);
     if ($222) {
      if ($224) {
       label = 31;
       break;
      }
     } else {
      if (!($224)) {
       label = 29;
       break;
      }
     }
     $225 = HEAP32[$13>>2]|0;
     $226 = (($225) + 1)|0;
     HEAP32[$13>>2] = $226;
     $227 = $25;
     $228 = (($227) + 1)|0;
     $25 = $228;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 26) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 29) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 31) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    $229 = HEAP32[$34>>2]|0;
    $230 = ($229|0)!=(0);
    L42: do {
     if ($230) {
      $231 = $19;
      $232 = HEAP32[$231>>2]|0;
      $233 = (($232) + 3)|0;
      $234 = $18;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($235) + ($233<<1)|0);
      $237 = HEAP16[$236>>1]|0;
      $238 = $237&65535;
      $25 = $238;
      while(1) {
       $239 = $25;
       $240 = $19;
       $241 = HEAP32[$240>>2]|0;
       $242 = (($241) + 4)|0;
       $243 = $18;
       $244 = HEAP32[$243>>2]|0;
       $245 = (($244) + ($242<<1)|0);
       $246 = HEAP16[$245>>1]|0;
       $247 = $246&65535;
       $248 = ($239|0)<($247|0);
       if (!($248)) {
        break L42;
       }
       $249 = HEAP32[$13>>2]|0;
       $250 = $14;
       $251 = ((($250)) + 8|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = ($249|0)<($252|0);
       if (!($253)) {
        break L42;
       }
       $254 = HEAP32[$13>>2]|0;
       $255 = $14;
       $256 = ((($255)) + 4|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (($257) + ($254<<1)|0);
       $259 = HEAP16[$258>>1]|0;
       $260 = $259&65535;
       $261 = ($260|0)==(65535);
       if ($261) {
        break;
       }
       $262 = HEAP32[$13>>2]|0;
       $263 = $14;
       $264 = ((($263)) + 4|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = (($265) + ($262<<1)|0);
       $267 = HEAP16[$266>>1]|0;
       $268 = $17;
       $269 = HEAP32[$268>>2]|0;
       $270 = $12;
       $271 = (_findCharOrDots($267,$269,$270)|0);
       $272 = ((($271)) + 16|0);
       $273 = $272;
       $274 = $273;
       $275 = HEAP32[$274>>2]|0;
       $276 = (($273) + 4)|0;
       $277 = $276;
       $278 = HEAP32[$277>>2]|0;
       $279 = $29;
       $280 = $279;
       $281 = HEAP32[$280>>2]|0;
       $282 = (($279) + 4)|0;
       $283 = $282;
       $284 = HEAP32[$283>>2]|0;
       $285 = $275 & $281;
       $286 = $278 & $284;
       $287 = ($285|0)!=(0);
       $288 = ($286|0)!=(0);
       $289 = $287 | $288;
       $290 = $26;
       $291 = ($290|0)!=(0);
       if ($289) {
        if ($291) {
         break L42;
        }
       } else {
        if (!($291)) {
         break L42;
        }
       }
       $292 = HEAP32[$13>>2]|0;
       $293 = (($292) + 1)|0;
       HEAP32[$13>>2] = $293;
       $294 = $25;
       $295 = (($294) + 1)|0;
       $25 = $295;
      }
      HEAP32[$34>>2] = 0;
     }
    } while(0);
    $26 = 0;
    $296 = $19;
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + 5)|0;
    HEAP32[$296>>2] = $298;
    break;
   }
   case 125: case 123:  {
    $299 = $19;
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) + 1)|0;
    $302 = $18;
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + ($301<<1)|0);
    $305 = HEAP16[$304>>1]|0;
    $306 = $305&65535;
    $307 = $306 << 16;
    $308 = $19;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($309) + 2)|0;
    $311 = $18;
    $312 = HEAP32[$311>>2]|0;
    $313 = (($312) + ($310<<1)|0);
    $314 = HEAP16[$313>>1]|0;
    $315 = $314&65535;
    $316 = $307 | $315;
    $27 = $316;
    $317 = $27;
    $318 = $12;
    $319 = ((($318)) + 21088|0);
    $320 = (($319) + ($317<<3)|0);
    $28 = $320;
    $321 = $19;
    $322 = HEAP32[$321>>2]|0;
    $323 = ($322|0)==(0);
    if ($323) {
     label = 47;
    } else {
     $324 = $19;
     $325 = HEAP32[$324>>2]|0;
     $326 = ($325|0)>(0);
     if ($326) {
      $327 = $19;
      $328 = HEAP32[$327>>2]|0;
      $329 = (($328) - 1)|0;
      $330 = $18;
      $331 = HEAP32[$330>>2]|0;
      $332 = (($331) + ($329<<1)|0);
      $333 = HEAP16[$332>>1]|0;
      $334 = $333&65535;
      $335 = ($334|0)==(91);
      if ($335) {
       label = 47;
      }
     }
    }
    if ((label|0) == 47) {
     label = 0;
     $336 = $28;
     $337 = $21;
     HEAP32[$337>>2] = $336;
     $338 = $19;
     $339 = HEAP32[$338>>2]|0;
     $340 = $18;
     $341 = HEAP32[$340>>2]|0;
     $342 = (($341) + ($339<<1)|0);
     $343 = HEAP16[$342>>1]|0;
     $344 = $22;
     HEAP16[$344>>1] = $343;
    }
    $345 = $19;
    $346 = HEAP32[$345>>2]|0;
    $347 = $18;
    $348 = HEAP32[$347>>2]|0;
    $349 = (($348) + ($346<<1)|0);
    $350 = HEAP16[$349>>1]|0;
    $351 = $350&65535;
    $352 = ($351|0)==(123);
    $353 = HEAP32[$13>>2]|0;
    $354 = $14;
    $355 = ((($354)) + 4|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (($356) + ($353<<1)|0);
    $358 = HEAP16[$357>>1]|0;
    $359 = $358&65535;
    $360 = $17;
    $361 = HEAP32[$360>>2]|0;
    $362 = $361<<1;
    if ($352) {
     $363 = $28;
     $364 = ((($363)) + 38|0);
     $365 = (($364) + ($362<<1)|0);
     $366 = HEAP16[$365>>1]|0;
     $367 = $366&65535;
     $368 = ($359|0)==($367|0);
     $369 = $368 ? 1 : 0;
     HEAP32[$34>>2] = $369;
    } else {
     $370 = (($362) + 1)|0;
     $371 = $28;
     $372 = ((($371)) + 38|0);
     $373 = (($372) + ($370<<1)|0);
     $374 = HEAP16[$373>>1]|0;
     $375 = $374&65535;
     $376 = ($359|0)==($375|0);
     $377 = $376 ? 1 : 0;
     HEAP32[$34>>2] = $377;
    }
    $378 = HEAP32[$13>>2]|0;
    $379 = (($378) + 1)|0;
    HEAP32[$13>>2] = $379;
    $380 = $19;
    $381 = HEAP32[$380>>2]|0;
    $382 = (($381) + 3)|0;
    HEAP32[$380>>2] = $382;
    break;
   }
   case 37:  {
    $383 = $19;
    $384 = HEAP32[$383>>2]|0;
    $385 = $12;
    $386 = $14;
    $387 = $18;
    $388 = HEAP32[$387>>2]|0;
    $389 = (_swapTest($384,$13,$385,$386,$388)|0);
    HEAP32[$34>>2] = $389;
    $390 = $19;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($391) + 5)|0;
    HEAP32[$390>>2] = $392;
    break;
   }
   default: {
    $438 = $18;
    $439 = HEAP32[$438>>2]|0;
    $440 = $19;
    $441 = (__lou_handlePassVariableTest($439,$440,$34)|0);
    $442 = ($441|0)!=(0);
    if (!($442)) {
     label = 63;
     break L4;
    }
   }
   }
  } while(0);
  $443 = $26;
  $444 = ($443|0)!=(0);
  $445 = HEAP32[$34>>2]|0;
  $446 = ($445|0)!=(0);
  $or$cond7 = $444 | $446;
  if (!($or$cond7)) {
   label = 66;
   break;
  }
  $447 = $26;
  $448 = ($447|0)!=(0);
  $449 = HEAP32[$34>>2]|0;
  $450 = ($449|0)!=(0);
  $or$cond9 = $448 & $450;
  if ($or$cond9) {
   label = 66;
   break;
  }
  $26 = 0;
 }
 do {
  if ((label|0) == 6) {
   $11 = 0;
   $451 = $11;
   STACKTOP = sp;return ($451|0);
  }
  else if ((label|0) == 53) {
   $393 = $12;
   $394 = $14;
   $395 = $16;
   $396 = $17;
   $397 = HEAP32[$396>>2]|0;
   $398 = HEAP32[$13>>2]|0;
   $399 = $18;
   $400 = HEAP32[$399>>2]|0;
   $401 = $19;
   $402 = HEAP32[$401>>2]|0;
   $403 = $21;
   $404 = HEAP32[$403>>2]|0;
   $405 = $22;
   $406 = HEAP16[$405>>1]|0;
   $407 = (_doPassSearch($393,$394,$395,$397,$398,$400,$402,$23,$24,$404,$406)|0);
   HEAP32[$34>>2] = $407;
   $408 = $26;
   $409 = ($408|0)!=(0);
   $410 = HEAP32[$34>>2]|0;
   $411 = ($410|0)!=(0);
   $or$cond3 = $409 | $411;
   if ($or$cond3) {
    $412 = $26;
    $413 = ($412|0)!=(0);
    $414 = HEAP32[$34>>2]|0;
    $415 = ($414|0)!=(0);
    $or$cond5 = $413 & $415;
    if (!($or$cond5)) {
     $416 = HEAP32[$23>>2]|0;
     $417 = $19;
     HEAP32[$417>>2] = $416;
     $418 = HEAP32[$24>>2]|0;
     HEAP32[$13>>2] = $418;
     break;
    }
   }
   $11 = 0;
   $451 = $11;
   STACKTOP = sp;return ($451|0);
  }
  else if ((label|0) == 63) {
   $11 = 0;
   $451 = $11;
   STACKTOP = sp;return ($451|0);
  }
  else if ((label|0) == 66) {
   $11 = 0;
   $451 = $11;
   STACKTOP = sp;return ($451|0);
  }
  else if ((label|0) == 68) {
   $11 = 0;
   $451 = $11;
   STACKTOP = sp;return ($451|0);
  }
 } while(0);
 $419 = $19;
 $420 = HEAP32[$419>>2]|0;
 $421 = (($420) + 1)|0;
 HEAP32[$419>>2] = $421;
 $422 = HEAP32[$13>>2]|0;
 $31 = $422;
 $423 = $32;
 $424 = ($423|0)==(-1);
 if ($424) {
  $425 = $30;
  $32 = $425;
  $426 = $31;
  $33 = $426;
 }
 $427 = $32;
 $428 = $30;
 $429 = ($427|0)<($428|0);
 if ($429) {
  $11 = 0;
  $451 = $11;
  STACKTOP = sp;return ($451|0);
 } else {
  $430 = $20;
  $431 = $30;
  HEAP32[$35>>2] = $431;
  $432 = ((($35)) + 4|0);
  $433 = $32;
  HEAP32[$432>>2] = $433;
  $434 = ((($35)) + 8|0);
  $435 = $33;
  HEAP32[$434>>2] = $435;
  $436 = ((($35)) + 12|0);
  $437 = $31;
  HEAP32[$436>>2] = $437;
  ;HEAP32[$430>>2]=HEAP32[$35>>2]|0;HEAP32[$430+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$430+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$430+12>>2]=HEAP32[$35+12>>2]|0;
  $11 = 1;
  $451 = $11;
  STACKTOP = sp;return ($451|0);
 }
 return (0)|0;
}
function _matchCurrentInput($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $10 = $11;
 $12 = $8;
 $13 = (($12) + 2)|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = $8;
  $16 = (($15) + 2)|0;
  $17 = $8;
  $18 = (($17) + 1)|0;
  $19 = $7;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($16) + ($22))|0;
  $24 = ($14|0)<($23|0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $10;
  $26 = $5;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   label = 8;
   break;
  }
  $30 = $10;
  $31 = $5;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($36|0)==(65535);
  if ($37) {
   label = 6;
   break;
  }
  $38 = $9;
  $39 = $7;
  $40 = (($39) + ($38<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $10;
  $44 = (($43) + 1)|0;
  $10 = $44;
  $45 = $5;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($43<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($42|0)!=($50|0);
  if ($51) {
   label = 6;
   break;
  }
  $52 = $9;
  $53 = (($52) + 1)|0;
  $9 = $53;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _swapTest($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $7;
 $17 = HEAP32[$16>>2]|0;
 $11 = $17;
 $18 = $6;
 $19 = (($18) + 1)|0;
 $20 = $10;
 $21 = (($20) + ($19<<1)|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = $23 << 16;
 $25 = $6;
 $26 = (($25) + 2)|0;
 $27 = $10;
 $28 = (($27) + ($26<<1)|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $24 | $30;
 $12 = $31;
 $32 = $12;
 $33 = $8;
 $34 = ((($33)) + 21088|0);
 $35 = (($34) + ($32<<3)|0);
 $13 = $35;
 while(1) {
  $36 = $11;
  $37 = $7;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) - ($38))|0;
  $40 = $6;
  $41 = (($40) + 3)|0;
  $42 = $10;
  $43 = (($42) + ($41<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ($39|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $13;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(59);
  L4: do {
   if ($50) {
    $14 = 1;
    while(1) {
     $51 = $14;
     $52 = $13;
     $53 = ((($52)) + 34|0);
     $54 = HEAP16[$53>>1]|0;
     $55 = $54 << 16 >> 16;
     $56 = ($51|0)<($55|0);
     if (!($56)) {
      break L4;
     }
     $57 = $11;
     $58 = $9;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + ($57<<1)|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62&65535;
     $64 = $14;
     $65 = $13;
     $66 = ((($65)) + 38|0);
     $67 = (($66) + ($64<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = ($63|0)==($69|0);
     if ($70) {
      break L4;
     }
     $71 = $14;
     $72 = (($71) + 2)|0;
     $14 = $72;
    }
   } else {
    $14 = 0;
    while(1) {
     $73 = $14;
     $74 = $13;
     $75 = ((($74)) + 34|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76 << 16 >> 16;
     $78 = ($73|0)<($77|0);
     if (!($78)) {
      break L4;
     }
     $79 = $11;
     $80 = $9;
     $81 = ((($80)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + ($79<<1)|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84&65535;
     $86 = $14;
     $87 = $13;
     $88 = ((($87)) + 38|0);
     $89 = (($88) + ($86<<1)|0);
     $90 = HEAP16[$89>>1]|0;
     $91 = $90&65535;
     $92 = ($85|0)==($91|0);
     if ($92) {
      break L4;
     }
     $93 = $14;
     $94 = (($93) + 1)|0;
     $14 = $94;
    }
   }
  } while(0);
  $95 = $14;
  $96 = $13;
  $97 = ((($96)) + 34|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 << 16 >> 16;
  $100 = ($95|0)>=($99|0);
  if ($100) {
   label = 13;
   break;
  }
  $101 = $11;
  $102 = (($101) + 1)|0;
  $11 = $102;
 }
 if ((label|0) == 13) {
  $5 = 0;
  $188 = $5;
  STACKTOP = sp;return ($188|0);
 }
 $103 = $6;
 $104 = (($103) + 3)|0;
 $105 = $10;
 $106 = (($105) + ($104<<1)|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 $109 = $6;
 $110 = (($109) + 4)|0;
 $111 = $10;
 $112 = (($111) + ($110<<1)|0);
 $113 = HEAP16[$112>>1]|0;
 $114 = $113&65535;
 $115 = ($108|0)==($114|0);
 if ($115) {
  $116 = $11;
  $117 = $7;
  HEAP32[$117>>2] = $116;
  $5 = 1;
  $188 = $5;
  STACKTOP = sp;return ($188|0);
 }
 while(1) {
  $118 = $11;
  $119 = $7;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) - ($120))|0;
  $122 = $6;
  $123 = (($122) + 4)|0;
  $124 = $10;
  $125 = (($124) + ($123<<1)|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126&65535;
  $128 = ($121|0)<($127|0);
  if (!($128)) {
   label = 30;
   break;
  }
  $129 = $13;
  $130 = ((($129)) + 28|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)==(59);
  L27: do {
   if ($132) {
    $15 = 1;
    while(1) {
     $133 = $15;
     $134 = $13;
     $135 = ((($134)) + 34|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136 << 16 >> 16;
     $138 = ($133|0)<($137|0);
     if (!($138)) {
      break L27;
     }
     $139 = $11;
     $140 = $9;
     $141 = ((($140)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($142) + ($139<<1)|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144&65535;
     $146 = $15;
     $147 = $13;
     $148 = ((($147)) + 38|0);
     $149 = (($148) + ($146<<1)|0);
     $150 = HEAP16[$149>>1]|0;
     $151 = $150&65535;
     $152 = ($145|0)==($151|0);
     if ($152) {
      break L27;
     }
     $153 = $15;
     $154 = (($153) + 2)|0;
     $15 = $154;
    }
   } else {
    $15 = 0;
    while(1) {
     $155 = $15;
     $156 = $13;
     $157 = ((($156)) + 34|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $158 << 16 >> 16;
     $160 = ($155|0)<($159|0);
     if (!($160)) {
      break L27;
     }
     $161 = $11;
     $162 = $9;
     $163 = ((($162)) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (($164) + ($161<<1)|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = $15;
     $169 = $13;
     $170 = ((($169)) + 38|0);
     $171 = (($170) + ($168<<1)|0);
     $172 = HEAP16[$171>>1]|0;
     $173 = $172&65535;
     $174 = ($167|0)==($173|0);
     if ($174) {
      break L27;
     }
     $175 = $15;
     $176 = (($175) + 1)|0;
     $15 = $176;
    }
   }
  } while(0);
  $177 = $15;
  $178 = $13;
  $179 = ((($178)) + 34|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180 << 16 >> 16;
  $182 = ($177|0)>=($181|0);
  $183 = $11;
  if ($182) {
   label = 28;
   break;
  }
  $185 = (($183) + 1)|0;
  $11 = $185;
 }
 if ((label|0) == 28) {
  $184 = $7;
  HEAP32[$184>>2] = $183;
  $5 = 1;
  $188 = $5;
  STACKTOP = sp;return ($188|0);
 }
 else if ((label|0) == 30) {
  $186 = $11;
  $187 = $7;
  HEAP32[$187>>2] = $186;
  $5 = 1;
  $188 = $5;
  STACKTOP = sp;return ($188|0);
 }
 return (0)|0;
}
function _doPassSearch($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $29 = sp;
 $30 = sp + 8|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0;
 $26 = 0;
 L1: while(1) {
  $31 = $16;
  $32 = $13;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)<($34|0);
  if (!($35)) {
   label = 60;
   break;
  }
  $36 = $18;
  $37 = (($36) + 1)|0;
  $38 = $19;
  HEAP32[$38>>2] = $37;
  $39 = $16;
  $40 = $20;
  HEAP32[$40>>2] = $39;
  L4: while(1) {
   $41 = $19;
   $42 = HEAP32[$41>>2]|0;
   $43 = $14;
   $44 = ((($43)) + 36|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = ($42|0)<($46|0);
   if (!($47)) {
    break;
   }
   HEAP32[$30>>2] = 1;
   $48 = $20;
   $49 = HEAP32[$48>>2]|0;
   $50 = $13;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49|0)>($52|0);
   if ($53) {
    label = 6;
    break L1;
   }
   $54 = $19;
   $55 = HEAP32[$54>>2]|0;
   $56 = $17;
   $57 = (($56) + ($55<<1)|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58&65535;
   do {
    switch ($59|0) {
    case 95:  {
     $60 = $19;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + 1)|0;
     $63 = $17;
     $64 = (($63) + ($62<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) - ($66))|0;
     HEAP32[$67>>2] = $69;
     $70 = $20;
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)<(0);
     if ($72) {
      $73 = $20;
      HEAP32[$73>>2] = 0;
      HEAP32[$30>>2] = 0;
     }
     $74 = $19;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + 2)|0;
     HEAP32[$74>>2] = $76;
     break;
    }
    case 33:  {
     $77 = $26;
     $78 = ($77|0)!=(0);
     $79 = $78 ^ 1;
     $80 = $79&1;
     $26 = $80;
     $81 = $19;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + 1)|0;
     HEAP32[$81>>2] = $83;
     continue L4;
     break;
    }
    case 64: case 34:  {
     $84 = $20;
     $85 = HEAP32[$84>>2]|0;
     $25 = $85;
     $86 = $19;
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + 2)|0;
     $24 = $88;
     while(1) {
      $89 = $24;
      $90 = $19;
      $91 = HEAP32[$90>>2]|0;
      $92 = (($91) + 2)|0;
      $93 = $19;
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + 1)|0;
      $96 = $17;
      $97 = (($96) + ($95<<1)|0);
      $98 = HEAP16[$97>>1]|0;
      $99 = $98&65535;
      $100 = (($92) + ($99))|0;
      $101 = ($89|0)<($100|0);
      if (!($101)) {
       break;
      }
      $102 = $25;
      $103 = $13;
      $104 = ((($103)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102<<1)|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = $107&65535;
      $109 = ($108|0)==(65535);
      if ($109) {
       label = 16;
       break;
      }
      $110 = $24;
      $111 = $17;
      $112 = (($111) + ($110<<1)|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = $25;
      $116 = (($115) + 1)|0;
      $25 = $116;
      $117 = $13;
      $118 = ((($117)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (($119) + ($115<<1)|0);
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $123 = ($114|0)!=($122|0);
      if ($123) {
       label = 16;
       break;
      }
      $124 = $24;
      $125 = (($124) + 1)|0;
      $24 = $125;
     }
     if ((label|0) == 16) {
      label = 0;
      HEAP32[$30>>2] = 0;
     }
     $126 = $19;
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + 1)|0;
     $129 = $17;
     $130 = (($129) + ($128<<1)|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = $20;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + ($132))|0;
     HEAP32[$133>>2] = $135;
     $136 = $19;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + 1)|0;
     $139 = $17;
     $140 = (($139) + ($138<<1)|0);
     $141 = HEAP16[$140>>1]|0;
     $142 = $141&65535;
     $143 = (($142) + 2)|0;
     $144 = $19;
     $145 = HEAP32[$144>>2]|0;
     $146 = (($145) + ($143))|0;
     HEAP32[$144>>2] = $146;
     break;
    }
    case 91:  {
     $147 = $19;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + 1)|0;
     HEAP32[$147>>2] = $149;
     break;
    }
    case 93:  {
     $150 = $19;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + 1)|0;
     HEAP32[$150>>2] = $152;
     break;
    }
    case 36:  {
     $153 = $19;
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + 1)|0;
     $156 = $17;
     $157 = (($156) + ($155<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $158&65535;
     $160 = $159 << 16;
     $161 = $19;
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + 2)|0;
     $164 = $17;
     $165 = (($164) + ($163<<1)|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = $160 | $167;
     $169 = ($168|0)<(0);
     $170 = $169 << 31 >> 31;
     $171 = $29;
     $172 = $171;
     HEAP32[$172>>2] = $168;
     $173 = (($171) + 4)|0;
     $174 = $173;
     HEAP32[$174>>2] = $170;
     $24 = 0;
     while(1) {
      $175 = $24;
      $176 = $19;
      $177 = HEAP32[$176>>2]|0;
      $178 = (($177) + 3)|0;
      $179 = $17;
      $180 = (($179) + ($178<<1)|0);
      $181 = HEAP16[$180>>1]|0;
      $182 = $181&65535;
      $183 = ($175|0)<($182|0);
      if (!($183)) {
       break;
      }
      $184 = $20;
      $185 = HEAP32[$184>>2]|0;
      $186 = $13;
      $187 = ((($186)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + ($185<<1)|0);
      $190 = HEAP16[$189>>1]|0;
      $191 = $190&65535;
      $192 = ($191|0)==(65535);
      if ($192) {
       HEAP32[$30>>2] = 0;
      } else {
       $193 = $20;
       $194 = HEAP32[$193>>2]|0;
       $195 = (($194) + 1)|0;
       HEAP32[$193>>2] = $195;
       $196 = $13;
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = (($198) + ($194<<1)|0);
       $200 = HEAP16[$199>>1]|0;
       $201 = $15;
       $202 = $12;
       $203 = (_findCharOrDots($200,$201,$202)|0);
       $204 = ((($203)) + 16|0);
       $205 = $204;
       $206 = $205;
       $207 = HEAP32[$206>>2]|0;
       $208 = (($205) + 4)|0;
       $209 = $208;
       $210 = HEAP32[$209>>2]|0;
       $211 = $29;
       $212 = $211;
       $213 = HEAP32[$212>>2]|0;
       $214 = (($211) + 4)|0;
       $215 = $214;
       $216 = HEAP32[$215>>2]|0;
       $217 = $207 & $213;
       $218 = $210 & $216;
       $219 = ($217|0)!=(0);
       $220 = ($218|0)!=(0);
       $221 = $219 | $220;
       $222 = $221 ? 1 : 0;
       HEAP32[$30>>2] = $222;
       $223 = $26;
       $224 = ($223|0)!=(0);
       if ($224) {
        $225 = HEAP32[$30>>2]|0;
        $226 = ($225|0)!=(0);
        $227 = $226 ^ 1;
        $228 = $227&1;
        HEAP32[$30>>2] = $228;
       }
      }
      $229 = HEAP32[$30>>2]|0;
      $230 = ($229|0)!=(0);
      if (!($230)) {
       break;
      }
      $231 = $24;
      $232 = (($231) + 1)|0;
      $24 = $232;
     }
     $233 = HEAP32[$30>>2]|0;
     $234 = ($233|0)!=(0);
     L37: do {
      if ($234) {
       $235 = $19;
       $236 = HEAP32[$235>>2]|0;
       $237 = (($236) + 3)|0;
       $238 = $17;
       $239 = (($238) + ($237<<1)|0);
       $240 = HEAP16[$239>>1]|0;
       $241 = $240&65535;
       $24 = $241;
       while(1) {
        $242 = $24;
        $243 = $19;
        $244 = HEAP32[$243>>2]|0;
        $245 = (($244) + 4)|0;
        $246 = $17;
        $247 = (($246) + ($245<<1)|0);
        $248 = HEAP16[$247>>1]|0;
        $249 = $248&65535;
        $250 = ($242|0)<($249|0);
        if (!($250)) {
         break L37;
        }
        $251 = $20;
        $252 = HEAP32[$251>>2]|0;
        $253 = $13;
        $254 = ((($253)) + 4|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = (($255) + ($252<<1)|0);
        $257 = HEAP16[$256>>1]|0;
        $258 = $257&65535;
        $259 = ($258|0)==(65535);
        if ($259) {
         break;
        }
        $260 = $20;
        $261 = HEAP32[$260>>2]|0;
        $262 = $13;
        $263 = ((($262)) + 4|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($264) + ($261<<1)|0);
        $266 = HEAP16[$265>>1]|0;
        $267 = $15;
        $268 = $12;
        $269 = (_findCharOrDots($266,$267,$268)|0);
        $270 = ((($269)) + 16|0);
        $271 = $270;
        $272 = $271;
        $273 = HEAP32[$272>>2]|0;
        $274 = (($271) + 4)|0;
        $275 = $274;
        $276 = HEAP32[$275>>2]|0;
        $277 = $29;
        $278 = $277;
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 4)|0;
        $281 = $280;
        $282 = HEAP32[$281>>2]|0;
        $283 = $273 & $279;
        $284 = $276 & $282;
        $285 = ($283|0)!=(0);
        $286 = ($284|0)!=(0);
        $287 = $285 | $286;
        $288 = $26;
        $289 = ($288|0)!=(0);
        if ($287) {
         if ($289) {
          break L37;
         }
        } else {
         if (!($289)) {
          break L37;
         }
        }
        $290 = $20;
        $291 = HEAP32[$290>>2]|0;
        $292 = (($291) + 1)|0;
        HEAP32[$290>>2] = $292;
        $293 = $24;
        $294 = (($293) + 1)|0;
        $24 = $294;
       }
       HEAP32[$30>>2] = 0;
      }
     } while(0);
     $26 = 0;
     $295 = $19;
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + 5)|0;
     HEAP32[$295>>2] = $297;
     break;
    }
    case 125: case 123:  {
     $298 = $19;
     $299 = HEAP32[$298>>2]|0;
     $300 = (($299) + 1)|0;
     $301 = $17;
     $302 = (($301) + ($300<<1)|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $303&65535;
     $305 = $304 << 16;
     $306 = $19;
     $307 = HEAP32[$306>>2]|0;
     $308 = (($307) + 2)|0;
     $309 = $17;
     $310 = (($309) + ($308<<1)|0);
     $311 = HEAP16[$310>>1]|0;
     $312 = $311&65535;
     $313 = $305 | $312;
     $27 = $313;
     $314 = $27;
     $315 = $12;
     $316 = ((($315)) + 21088|0);
     $317 = (($316) + ($314<<3)|0);
     $28 = $317;
     $318 = $19;
     $319 = HEAP32[$318>>2]|0;
     $320 = $17;
     $321 = (($320) + ($319<<1)|0);
     $322 = HEAP16[$321>>1]|0;
     $323 = $322&65535;
     $324 = ($323|0)==(123);
     $325 = $20;
     $326 = HEAP32[$325>>2]|0;
     $327 = $13;
     $328 = ((($327)) + 4|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + ($326<<1)|0);
     $331 = HEAP16[$330>>1]|0;
     $332 = $331&65535;
     $333 = $15;
     $334 = $333<<1;
     if ($324) {
      $335 = $28;
      $336 = ((($335)) + 38|0);
      $337 = (($336) + ($334<<1)|0);
      $338 = HEAP16[$337>>1]|0;
      $339 = $338&65535;
      $340 = ($332|0)==($339|0);
      $341 = $340 ? 1 : 0;
      HEAP32[$30>>2] = $341;
     } else {
      $342 = (($334) + 1)|0;
      $343 = $28;
      $344 = ((($343)) + 38|0);
      $345 = (($344) + ($342<<1)|0);
      $346 = HEAP16[$345>>1]|0;
      $347 = $346&65535;
      $348 = ($332|0)==($347|0);
      $349 = $348 ? 1 : 0;
      HEAP32[$30>>2] = $349;
     }
     $350 = $21;
     $351 = ($350|0)!=(0|0);
     do {
      if ($351) {
       $352 = $22;
       $353 = $352&65535;
       $354 = ($353|0)==(123);
       if ($354) {
        $355 = $28;
        $356 = $21;
        $357 = ($355|0)==($356|0);
        if ($357) {
         $358 = $20;
         $359 = HEAP32[$358>>2]|0;
         $360 = $13;
         $361 = ((($360)) + 4|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = (($362) + ($359<<1)|0);
         $364 = HEAP16[$363>>1]|0;
         $365 = $364&65535;
         $366 = $15;
         $367 = $366<<1;
         $368 = $28;
         $369 = ((($368)) + 38|0);
         $370 = (($369) + ($367<<1)|0);
         $371 = HEAP16[$370>>1]|0;
         $372 = $371&65535;
         $373 = ($365|0)==($372|0);
         if ($373) {
          $374 = $23;
          $375 = (($374) + -1)|0;
          $23 = $375;
          break;
         }
         $376 = $20;
         $377 = HEAP32[$376>>2]|0;
         $378 = $13;
         $379 = ((($378)) + 4|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (($380) + ($377<<1)|0);
         $382 = HEAP16[$381>>1]|0;
         $383 = $382&65535;
         $384 = $15;
         $385 = $384<<1;
         $386 = (($385) + 1)|0;
         $387 = $28;
         $388 = ((($387)) + 38|0);
         $389 = (($388) + ($386<<1)|0);
         $390 = HEAP16[$389>>1]|0;
         $391 = $390&65535;
         $392 = ($383|0)==($391|0);
         if ($392) {
          $393 = $23;
          $394 = (($393) + 1)|0;
          $23 = $394;
         }
        }
       }
      }
     } while(0);
     $395 = $20;
     $396 = HEAP32[$395>>2]|0;
     $397 = (($396) + 1)|0;
     HEAP32[$395>>2] = $397;
     $398 = $19;
     $399 = HEAP32[$398>>2]|0;
     $400 = (($399) + 3)|0;
     HEAP32[$398>>2] = $400;
     break;
    }
    case 37:  {
     $401 = $19;
     $402 = HEAP32[$401>>2]|0;
     $403 = $20;
     $404 = $12;
     $405 = $13;
     $406 = $17;
     $407 = (_swapTest($402,$403,$404,$405,$406)|0);
     HEAP32[$30>>2] = $407;
     $408 = $19;
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) + 5)|0;
     HEAP32[$408>>2] = $410;
     break;
    }
    case 32:  {
     $411 = HEAP32[$30>>2]|0;
     $412 = ($411|0)!=(0);
     if ($412) {
      $413 = $21;
      $414 = ($413|0)!=(0|0);
      $415 = $23;
      $416 = ($415|0)==(1);
      $or$cond = $414 & $416;
      $or$cond$not = $or$cond ^ 1;
      $417 = $21;
      $418 = ($417|0)!=(0|0);
      $or$cond3 = $or$cond$not & $418;
      if (!($or$cond3)) {
       label = 53;
       break L1;
      }
     }
     $419 = $14;
     $420 = ((($419)) + 36|0);
     $421 = HEAP16[$420>>1]|0;
     $422 = $421 << 16 >> 16;
     $423 = $19;
     HEAP32[$423>>2] = $422;
     break;
    }
    default: {
     $424 = $17;
     $425 = $19;
     (__lou_handlePassVariableTest($424,$425,$30)|0);
    }
    }
   } while(0);
   $426 = $26;
   $427 = ($426|0)!=(0);
   $428 = HEAP32[$30>>2]|0;
   $429 = ($428|0)!=(0);
   $or$cond5 = $427 | $429;
   if (!($or$cond5)) {
    break;
   }
   $430 = $26;
   $431 = ($430|0)!=(0);
   $432 = HEAP32[$30>>2]|0;
   $433 = ($432|0)!=(0);
   $or$cond7 = $431 & $433;
   if ($or$cond7) {
    break;
   }
   $26 = 0;
  }
  $434 = $16;
  $435 = (($434) + 1)|0;
  $16 = $435;
 }
 if ((label|0) == 6) {
  $11 = 0;
  $436 = $11;
  STACKTOP = sp;return ($436|0);
 }
 else if ((label|0) == 53) {
  $11 = 1;
  $436 = $11;
  STACKTOP = sp;return ($436|0);
 }
 else if ((label|0) == 60) {
  $11 = 0;
  $436 = $11;
  STACKTOP = sp;return ($436|0);
 }
 return (0)|0;
}
function _markSyllables($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$old = 0, $$old1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0;
 $10 = 0;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = $4;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if ($22) {
   $7 = 0;
   L4: while(1) {
    $23 = $7;
    $24 = $5;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     label = 31;
     break;
    }
    $28 = $5;
    $29 = ((($28)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $14 = $32;
    $15 = 0;
    while(1) {
     $33 = $15;
     $34 = ($33|0)<(3);
     if (!($34)) {
      break;
     }
     $16 = 0;
     $35 = $15;
     switch ($35|0) {
     case 0:  {
      $36 = $14;
      $37 = ($36|0)>=(2);
      if ($37) {
       $38 = $7;
       $39 = $5;
       $40 = ((($39)) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($41) + ($38<<1)|0);
       $43 = $4;
       $44 = (__lou_stringHash($42,1,$43)|0);
       $45 = $4;
       $46 = ((($45)) + 12104|0);
       $47 = (($46) + ($44<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $16 = $48;
      }
      break;
     }
     case 1:  {
      $49 = $14;
      $50 = ($49|0)>=(1);
      if ($50) {
       $14 = 1;
       $51 = $7;
       $52 = $5;
       $53 = ((($52)) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($54) + ($51<<1)|0);
       $56 = HEAP16[$55>>1]|0;
       $57 = $4;
       $58 = (_findCharOrDots($56,0,$57)|0);
       $59 = ((($58)) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $16 = $60;
      }
      break;
     }
     case 2:  {
      $12 = 82;
      $16 = 0;
      break;
     }
     default: {
     }
     }
     while(1) {
      $61 = $16;
      $62 = ($61|0)!=(0);
      if (!($62)) {
       break;
      }
      $63 = $16;
      $64 = $4;
      $65 = ((($64)) + 21088|0);
      $66 = (($65) + ($63<<3)|0);
      $11 = $66;
      $67 = $11;
      $68 = ((($67)) + 28|0);
      $69 = HEAP32[$68>>2]|0;
      $12 = $69;
      $70 = $11;
      $71 = ((($70)) + 34|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 << 16 >> 16;
      $13 = $73;
      $74 = $15;
      $75 = ($74|0)==(1);
      if ($75) {
       $$old = $12;
       $$old1 = ($$old|0)==(85);
       if ($$old1) {
        label = 19;
        break;
       }
      } else {
       $76 = $13;
       $77 = $14;
       $78 = ($76|0)<=($77|0);
       if ($78) {
        $79 = $11;
        $80 = ((($79)) + 38|0);
        $81 = $7;
        $82 = $5;
        $83 = ((($82)) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($84) + ($81<<1)|0);
        $86 = $13;
        $87 = $4;
        $88 = (_compareChars($80,$85,$86,0,$87)|0);
        $89 = ($88|0)!=(0);
        $90 = $12;
        $91 = ($90|0)==(85);
        $or$cond = $89 & $91;
        if ($or$cond) {
         label = 19;
         break;
        }
       }
      }
      $92 = $11;
      $93 = HEAP32[$92>>2]|0;
      $16 = $93;
     }
     if ((label|0) == 19) {
      label = 0;
      $15 = 4;
     }
     $94 = $15;
     $95 = (($94) + 1)|0;
     $15 = $95;
    }
    $96 = $12;
    switch ($96|0) {
    case 82:  {
     $97 = $7;
     $98 = $5;
     $99 = ((($98)) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($97|0)>=($100|0);
     if ($101) {
      label = 24;
      break L4;
     }
     $102 = $9;
     $103 = $7;
     $104 = (($103) + 1)|0;
     $7 = $104;
     $105 = $6;
     $106 = (($105) + ($103<<1)|0);
     $107 = HEAP16[$106>>1]|0;
     $108 = $107&65535;
     $109 = $108 | $102;
     $110 = $109&65535;
     HEAP16[$106>>1] = $110;
     continue L4;
     break;
    }
    case 85:  {
     break;
    }
    default: {
     continue L4;
    }
    }
    $111 = $10;
    $112 = (772 + ($111<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $9 = $113;
    $114 = $10;
    $115 = (($114) + 1)|0;
    $116 = (($115|0) % 2)&-1;
    $10 = $116;
    $117 = $7;
    $118 = $13;
    $119 = (($117) + ($118))|0;
    $120 = $5;
    $121 = ((($120)) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($119|0)>($122|0);
    if ($123) {
     label = 27;
     break;
    }
    $8 = 0;
    while(1) {
     $124 = $8;
     $125 = $13;
     $126 = ($124|0)<($125|0);
     if (!($126)) {
      continue L4;
     }
     $127 = $9;
     $128 = $7;
     $129 = (($128) + 1)|0;
     $7 = $129;
     $130 = $6;
     $131 = (($130) + ($128<<1)|0);
     $132 = HEAP16[$131>>1]|0;
     $133 = $132&65535;
     $134 = $133 | $127;
     $135 = $134&65535;
     HEAP16[$131>>1] = $135;
     $136 = $8;
     $137 = (($136) + 1)|0;
     $8 = $137;
    }
   }
   if ((label|0) == 24) {
    $3 = 0;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
   else if ((label|0) == 27) {
    $3 = 0;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
   else if ((label|0) == 31) {
    $3 = 1;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
  }
 }
 $3 = 1;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _markEmphases($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = -1;
 $13 = -1;
 $14 = -1;
 $15 = 0;
 $16 = 0;
 dest=$17; src=732; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $21 = $6;
 $22 = ((($21)) + 616|0);
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $6;
  $27 = ((($26)) + 616|0);
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0);
  $32 = $30;
 } else {
  $32 = 0;
 }
 $31 = $32&1;
 $18 = $31;
 $33 = $11;
 $34 = ($33|0)==(0);
 $35 = HEAP32[3726]|0;
 $36 = ($35|0)!=(0|0);
 $or$cond = $34 | $36;
 if (!($or$cond)) {
  _initEmphClasses();
 }
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $7;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $19;
  $43 = $7;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $6;
  $49 = (_checkAttr($47,1,0,0,$48)|0);
  $50 = ($49|0)!=(0);
  $51 = $19;
  if ($50) {
   $12 = $51;
   $56 = $15;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = $19;
    $14 = $58;
    $15 = 0;
   }
  } else {
   $52 = $9;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 | 1;
   HEAP32[$53>>2] = $55;
  }
  $59 = $19;
  $60 = $7;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $6;
  $66 = (_checkAttr($64,16,0,0,$65)|0);
  $67 = ($66|0)!=(0);
  do {
   if ($67) {
    $68 = $13;
    $69 = ($68|0)<(0);
    if ($69) {
     $70 = $19;
     $13 = $70;
    }
    $15 = 1;
    $71 = $16;
    $72 = (($71) + 1)|0;
    $16 = $72;
    $73 = $6;
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)!=(0);
    $76 = $16;
    $77 = ($76|0)>=(2);
    $or$cond3 = $75 & $77;
    if ($or$cond3) {
     $78 = $19;
     $79 = $8;
     $80 = (($79) + ($78<<1)|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = $81&65535;
     $83 = $82 | 4096;
     $84 = $83&65535;
     HEAP16[$80>>1] = $84;
     $85 = $16;
     $86 = ($85|0)==(2);
     if ($86) {
      $87 = $19;
      $88 = (($87) - 1)|0;
      $89 = $8;
      $90 = (($89) + ($88<<1)|0);
      $91 = HEAP16[$90>>1]|0;
      $92 = $91&65535;
      $93 = $92 | 4096;
      $94 = $93&65535;
      HEAP16[$90>>1] = $94;
      label = 27;
     } else {
      label = 27;
     }
    } else {
     label = 27;
    }
   } else {
    $16 = 0;
    $95 = $13;
    $96 = ($95|0)>=(0);
    if ($96) {
     $97 = $19;
     $98 = $7;
     $99 = ((($98)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + ($97<<1)|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $6;
     $104 = (_checkAttr($102,2,0,0,$103)|0);
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $19;
      $107 = $7;
      $108 = ((($107)) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($109) + ($106<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $6;
      $113 = (_checkAttr($111,32,0,0,$112)|0);
      $114 = ($113|0)!=(0);
      if ($114) {
       $115 = $13;
       $116 = $10;
       $117 = (($116) + ($115<<3)|0);
       $118 = $117;
       $119 = $118;
       $120 = HEAP32[$119>>2]|0;
       $121 = (($118) + 4)|0;
       $122 = $121;
       $123 = HEAP32[$122>>2]|0;
       $124 = $120 & 65535;
       $125 = $124 | 1;
       $126 = $117;
       $127 = $126;
       $128 = HEAP32[$127>>2]|0;
       $129 = (($126) + 4)|0;
       $130 = $129;
       $131 = HEAP32[$130>>2]|0;
       $132 = $128 & -65536;
       $133 = $132 | $125;
       $134 = $117;
       $135 = $134;
       HEAP32[$135>>2] = $133;
       $136 = (($134) + 4)|0;
       $137 = $136;
       HEAP32[$137>>2] = $131;
       $138 = $15;
       $139 = ($138|0)!=(0);
       if ($139) {
        $140 = $18;
        $141 = ($140|0)!=(0);
        if ($141) {
         $142 = $13;
         $143 = $12;
         $144 = ($142|0)<($143|0);
         if ($144) {
          $145 = $14;
          $146 = $10;
          $147 = (($146) + ($145<<3)|0);
          $148 = $147;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = (($148) + 4)|0;
          $152 = $151;
          $153 = HEAP32[$152>>2]|0;
          $154 = (_bitshift64Lshr(($150|0),($153|0),16)|0);
          $155 = tempRet0;
          $156 = $154 & 65535;
          $157 = $156 | 1;
          $158 = $147;
          $159 = $158;
          $160 = HEAP32[$159>>2]|0;
          $161 = (($158) + 4)|0;
          $162 = $161;
          $163 = HEAP32[$162>>2]|0;
          $164 = (_bitshift64Shl(($157|0),0,16)|0);
          $165 = tempRet0;
          $166 = $160 & 65535;
          $167 = $166 | $164;
          $168 = $163 | $165;
          $169 = $147;
          $170 = $169;
          HEAP32[$170>>2] = $167;
          $171 = (($169) + 4)|0;
          $172 = $171;
          HEAP32[$172>>2] = $168;
          $13 = -1;
          $14 = -1;
          $15 = 0;
          $173 = $12;
          $19 = $173;
          break;
         }
        }
        $174 = $19;
        $175 = $10;
        $176 = (($175) + ($174<<3)|0);
        $177 = $176;
        $178 = $177;
        $179 = HEAP32[$178>>2]|0;
        $180 = (($177) + 4)|0;
        $181 = $180;
        $182 = HEAP32[$181>>2]|0;
        $183 = (_bitshift64Lshr(($179|0),($182|0),16)|0);
        $184 = tempRet0;
        $185 = $183 & 65535;
        $186 = $185 | 1;
        $187 = $176;
        $188 = $187;
        $189 = HEAP32[$188>>2]|0;
        $190 = (($187) + 4)|0;
        $191 = $190;
        $192 = HEAP32[$191>>2]|0;
        $193 = (_bitshift64Shl(($186|0),0,16)|0);
        $194 = tempRet0;
        $195 = $189 & 65535;
        $196 = $195 | $193;
        $197 = $192 | $194;
        $198 = $176;
        $199 = $198;
        HEAP32[$199>>2] = $196;
        $200 = (($198) + 4)|0;
        $201 = $200;
        HEAP32[$201>>2] = $197;
       } else {
        $202 = $14;
        $203 = $10;
        $204 = (($203) + ($202<<3)|0);
        $205 = $204;
        $206 = $205;
        $207 = HEAP32[$206>>2]|0;
        $208 = (($205) + 4)|0;
        $209 = $208;
        $210 = HEAP32[$209>>2]|0;
        $211 = (_bitshift64Lshr(($207|0),($210|0),16)|0);
        $212 = tempRet0;
        $213 = $211 & 65535;
        $214 = $213 | 1;
        $215 = $204;
        $216 = $215;
        $217 = HEAP32[$216>>2]|0;
        $218 = (($215) + 4)|0;
        $219 = $218;
        $220 = HEAP32[$219>>2]|0;
        $221 = (_bitshift64Shl(($214|0),0,16)|0);
        $222 = tempRet0;
        $223 = $217 & 65535;
        $224 = $223 | $221;
        $225 = $220 | $222;
        $226 = $204;
        $227 = $226;
        HEAP32[$227>>2] = $224;
        $228 = (($226) + 4)|0;
        $229 = $228;
        HEAP32[$229>>2] = $225;
       }
       $13 = -1;
       $14 = -1;
       $15 = 0;
       label = 27;
      } else {
       label = 27;
      }
     } else {
      label = 27;
     }
    } else {
     label = 27;
    }
   }
  } while(0);
  L34: do {
   if ((label|0) == 27) {
    label = 0;
    $230 = $11;
    $231 = ($230|0)!=(0);
    if ($231) {
     $20 = 0;
     while(1) {
      $232 = $20;
      $233 = ($232|0)<(10);
      if (!($233)) {
       break L34;
      }
      $234 = $19;
      $235 = $8;
      $236 = (($235) + ($234<<1)|0);
      $237 = HEAP16[$236>>1]|0;
      $238 = $237&65535;
      $239 = $20;
      $240 = 1 << $239;
      $241 = $238 & $240;
      $242 = ($241|0)!=(0);
      $243 = $20;
      $244 = (($17) + ($243<<2)|0);
      $245 = HEAP32[$244>>2]|0;
      if ($242) {
       $246 = ($245|0)<(0);
       if ($246) {
        $247 = $19;
        $248 = $20;
        $249 = (($17) + ($248<<2)|0);
        HEAP32[$249>>2] = $247;
       }
      } else {
       $250 = ($245|0)>=(0);
       if ($250) {
        $251 = $20;
        $252 = HEAP32[3726]|0;
        $253 = (($252) + ($251<<2)|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $20;
        $256 = (($17) + ($255<<2)|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $10;
        $259 = (($258) + ($257<<3)|0);
        $260 = $259;
        $261 = $260;
        $262 = HEAP32[$261>>2]|0;
        $263 = (($260) + 4)|0;
        $264 = $263;
        $265 = HEAP32[$264>>2]|0;
        $266 = $262 & 65535;
        $267 = $266 | $254;
        $268 = $259;
        $269 = $268;
        $270 = HEAP32[$269>>2]|0;
        $271 = (($268) + 4)|0;
        $272 = $271;
        $273 = HEAP32[$272>>2]|0;
        $274 = $267 & 65535;
        $275 = $270 & -65536;
        $276 = $275 | $274;
        $277 = $259;
        $278 = $277;
        HEAP32[$278>>2] = $276;
        $279 = (($277) + 4)|0;
        $280 = $279;
        HEAP32[$280>>2] = $273;
        $281 = $20;
        $282 = HEAP32[3726]|0;
        $283 = (($282) + ($281<<2)|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $19;
        $286 = $10;
        $287 = (($286) + ($285<<3)|0);
        $288 = $287;
        $289 = $288;
        $290 = HEAP32[$289>>2]|0;
        $291 = (($288) + 4)|0;
        $292 = $291;
        $293 = HEAP32[$292>>2]|0;
        $294 = (_bitshift64Lshr(($290|0),($293|0),16)|0);
        $295 = tempRet0;
        $296 = $294 & 65535;
        $297 = $296 | $284;
        $298 = $287;
        $299 = $298;
        $300 = HEAP32[$299>>2]|0;
        $301 = (($298) + 4)|0;
        $302 = $301;
        $303 = HEAP32[$302>>2]|0;
        $304 = $297 & 65535;
        $305 = (_bitshift64Shl(($304|0),0,16)|0);
        $306 = tempRet0;
        $307 = $300 & 65535;
        $308 = $307 | $305;
        $309 = $303 | $306;
        $310 = $287;
        $311 = $310;
        HEAP32[$311>>2] = $308;
        $312 = (($310) + 4)|0;
        $313 = $312;
        HEAP32[$313>>2] = $309;
        $314 = $20;
        $315 = (($17) + ($314<<2)|0);
        HEAP32[$315>>2] = -1;
       }
      }
      $316 = $20;
      $317 = (($316) + 1)|0;
      $20 = $317;
     }
    }
   }
  } while(0);
  $318 = $19;
  $319 = (($318) + 1)|0;
  $19 = $319;
 }
 $320 = $13;
 $321 = ($320|0)>=(0);
 do {
  if ($321) {
   $322 = $13;
   $323 = $10;
   $324 = (($323) + ($322<<3)|0);
   $325 = $324;
   $326 = $325;
   $327 = HEAP32[$326>>2]|0;
   $328 = (($325) + 4)|0;
   $329 = $328;
   $330 = HEAP32[$329>>2]|0;
   $331 = $327 & 65535;
   $332 = $331 | 1;
   $333 = $324;
   $334 = $333;
   $335 = HEAP32[$334>>2]|0;
   $336 = (($333) + 4)|0;
   $337 = $336;
   $338 = HEAP32[$337>>2]|0;
   $339 = $335 & -65536;
   $340 = $339 | $332;
   $341 = $324;
   $342 = $341;
   HEAP32[$342>>2] = $340;
   $343 = (($341) + 4)|0;
   $344 = $343;
   HEAP32[$344>>2] = $338;
   $345 = $15;
   $346 = ($345|0)!=(0);
   if ($346) {
    $347 = $7;
    $348 = ((($347)) + 8|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $10;
    $351 = (($350) + ($349<<3)|0);
    $352 = $351;
    $353 = $352;
    $354 = HEAP32[$353>>2]|0;
    $355 = (($352) + 4)|0;
    $356 = $355;
    $357 = HEAP32[$356>>2]|0;
    $358 = (_bitshift64Lshr(($354|0),($357|0),16)|0);
    $359 = tempRet0;
    $360 = $358 & 65535;
    $361 = $360 | 1;
    $362 = $351;
    $363 = $362;
    $364 = HEAP32[$363>>2]|0;
    $365 = (($362) + 4)|0;
    $366 = $365;
    $367 = HEAP32[$366>>2]|0;
    $368 = (_bitshift64Shl(($361|0),0,16)|0);
    $369 = tempRet0;
    $370 = $364 & 65535;
    $371 = $370 | $368;
    $372 = $367 | $369;
    $373 = $351;
    $374 = $373;
    HEAP32[$374>>2] = $371;
    $375 = (($373) + 4)|0;
    $376 = $375;
    HEAP32[$376>>2] = $372;
    break;
   } else {
    $377 = $14;
    $378 = $10;
    $379 = (($378) + ($377<<3)|0);
    $380 = $379;
    $381 = $380;
    $382 = HEAP32[$381>>2]|0;
    $383 = (($380) + 4)|0;
    $384 = $383;
    $385 = HEAP32[$384>>2]|0;
    $386 = (_bitshift64Lshr(($382|0),($385|0),16)|0);
    $387 = tempRet0;
    $388 = $386 & 65535;
    $389 = $388 | 1;
    $390 = $379;
    $391 = $390;
    $392 = HEAP32[$391>>2]|0;
    $393 = (($390) + 4)|0;
    $394 = $393;
    $395 = HEAP32[$394>>2]|0;
    $396 = (_bitshift64Shl(($389|0),0,16)|0);
    $397 = tempRet0;
    $398 = $392 & 65535;
    $399 = $398 | $396;
    $400 = $395 | $397;
    $401 = $379;
    $402 = $401;
    HEAP32[$402>>2] = $399;
    $403 = (($401) + 4)|0;
    $404 = $403;
    HEAP32[$404>>2] = $400;
    break;
   }
  }
 } while(0);
 $405 = $11;
 $406 = ($405|0)!=(0);
 L54: do {
  if ($406) {
   $20 = 0;
   while(1) {
    $407 = $20;
    $408 = ($407|0)<(10);
    if (!($408)) {
     break L54;
    }
    $409 = $20;
    $410 = (($17) + ($409<<2)|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = ($411|0)>=(0);
    if ($412) {
     $413 = $20;
     $414 = HEAP32[3726]|0;
     $415 = (($414) + ($413<<2)|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = $20;
     $418 = (($17) + ($417<<2)|0);
     $419 = HEAP32[$418>>2]|0;
     $420 = $10;
     $421 = (($420) + ($419<<3)|0);
     $422 = $421;
     $423 = $422;
     $424 = HEAP32[$423>>2]|0;
     $425 = (($422) + 4)|0;
     $426 = $425;
     $427 = HEAP32[$426>>2]|0;
     $428 = $424 & 65535;
     $429 = $428 | $416;
     $430 = $421;
     $431 = $430;
     $432 = HEAP32[$431>>2]|0;
     $433 = (($430) + 4)|0;
     $434 = $433;
     $435 = HEAP32[$434>>2]|0;
     $436 = $429 & 65535;
     $437 = $432 & -65536;
     $438 = $437 | $436;
     $439 = $421;
     $440 = $439;
     HEAP32[$440>>2] = $438;
     $441 = (($439) + 4)|0;
     $442 = $441;
     HEAP32[$442>>2] = $435;
     $443 = $20;
     $444 = HEAP32[3726]|0;
     $445 = (($444) + ($443<<2)|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = $7;
     $448 = ((($447)) + 8|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = $10;
     $451 = (($450) + ($449<<3)|0);
     $452 = $451;
     $453 = $452;
     $454 = HEAP32[$453>>2]|0;
     $455 = (($452) + 4)|0;
     $456 = $455;
     $457 = HEAP32[$456>>2]|0;
     $458 = (_bitshift64Lshr(($454|0),($457|0),16)|0);
     $459 = tempRet0;
     $460 = $458 & 65535;
     $461 = $460 | $446;
     $462 = $451;
     $463 = $462;
     $464 = HEAP32[$463>>2]|0;
     $465 = (($462) + 4)|0;
     $466 = $465;
     $467 = HEAP32[$466>>2]|0;
     $468 = $461 & 65535;
     $469 = (_bitshift64Shl(($468|0),0,16)|0);
     $470 = tempRet0;
     $471 = $464 & 65535;
     $472 = $471 | $469;
     $473 = $467 | $470;
     $474 = $451;
     $475 = $474;
     HEAP32[$475>>2] = $472;
     $476 = (($474) + 4)|0;
     $477 = $476;
     HEAP32[$477>>2] = $473;
    }
    $478 = $20;
    $479 = (($478) + 1)|0;
    $20 = $479;
   }
  }
 } while(0);
 $480 = $6;
 $481 = ((($480)) + 616|0);
 $482 = ((($481)) + 24|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = ($483|0)!=(0);
 do {
  if ($484) {
   $485 = $10;
   $486 = $6;
   $487 = $7;
   $488 = $9;
   _resolveEmphasisWords($485,0,1,$486,$487,$488);
   $489 = $6;
   $490 = ((($489)) + 616|0);
   $491 = ((($490)) + 32|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = ($492|0)!=(0);
   if ($493) {
    $494 = $10;
    $495 = $6;
    $496 = $7;
    $497 = $9;
    _resolveEmphasisPassages($494,0,1,$495,$496,$497);
   }
   $498 = $10;
   $499 = $6;
   $500 = $7;
   $501 = $9;
   _resolveEmphasisResets($498,0,1,16777216,$499,$500,$501);
   $502 = $6;
   $503 = ((($502)) + 616|0);
   $504 = ((($503)) + 28|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = ($505|0)!=(0);
   if (!($506)) {
    $507 = $10;
    $508 = $6;
    $509 = $8;
    $510 = $7;
    $511 = $9;
    _resolveEmphasisAllSymbols($507,0,1,$508,$509,$510,$511);
   }
  } else {
   $512 = $6;
   $513 = (_capsletterDefined($512)|0);
   $514 = ($513|0)!=(0);
   if ($514) {
    $515 = $6;
    $516 = ((($515)) + 616|0);
    $517 = ((($516)) + 12|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = ($518|0)!=(0);
    $520 = $10;
    if ($519) {
     $521 = $7;
     _resolveEmphasisSingleSymbols($520,1,$521);
     break;
    } else {
     $522 = $6;
     $523 = $8;
     $524 = $7;
     $525 = $9;
     _resolveEmphasisAllSymbols($520,0,1,$522,$523,$524,$525);
     break;
    }
   }
  }
 } while(0);
 $526 = $11;
 $527 = ($526|0)!=(0);
 if (!($527)) {
  STACKTOP = sp;return;
 }
 $20 = 0;
 while(1) {
  $528 = $20;
  $529 = ($528|0)<(10);
  if (!($529)) {
   break;
  }
  $530 = $20;
  $531 = (1 + ($530))|0;
  $532 = $6;
  $533 = ((($532)) + 616|0);
  $534 = (($533) + (($531*36)|0)|0);
  $535 = ((($534)) + 24|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = ($536|0)!=(0);
  do {
   if ($537) {
    $538 = $10;
    $539 = $20;
    $540 = (1 + ($539))|0;
    $541 = $20;
    $542 = HEAP32[3726]|0;
    $543 = (($542) + ($541<<2)|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $6;
    $546 = $7;
    $547 = $9;
    _resolveEmphasisWords($538,$540,$544,$545,$546,$547);
    $548 = $20;
    $549 = (1 + ($548))|0;
    $550 = $6;
    $551 = ((($550)) + 616|0);
    $552 = (($551) + (($549*36)|0)|0);
    $553 = ((($552)) + 32|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ($554|0)!=(0);
    if ($555) {
     $556 = $10;
     $557 = $20;
     $558 = (1 + ($557))|0;
     $559 = $20;
     $560 = HEAP32[3726]|0;
     $561 = (($560) + ($559<<2)|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = $6;
     $564 = $7;
     $565 = $9;
     _resolveEmphasisPassages($556,$558,$562,$563,$564,$565);
    }
    $566 = $6;
    $567 = ((($566)) + 24|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = ($568|0)!=(0);
    if ($569) {
     $570 = $10;
     $571 = $20;
     $572 = (1 + ($571))|0;
     $573 = $20;
     $574 = HEAP32[3726]|0;
     $575 = (($574) + ($573<<2)|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = $6;
     $578 = $7;
     $579 = $9;
     _resolveEmphasisResets($570,$572,$576,33554432,$577,$578,$579);
    }
    $580 = $20;
    $581 = (1 + ($580))|0;
    $582 = $6;
    $583 = ((($582)) + 616|0);
    $584 = (($583) + (($581*36)|0)|0);
    $585 = ((($584)) + 28|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = ($586|0)!=(0);
    if (!($587)) {
     $588 = $10;
     $589 = $20;
     $590 = (1 + ($589))|0;
     $591 = $20;
     $592 = HEAP32[3726]|0;
     $593 = (($592) + ($591<<2)|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = $6;
     $596 = $8;
     $597 = $7;
     $598 = $9;
     _resolveEmphasisAllSymbols($588,$590,$594,$595,$596,$597,$598);
    }
   } else {
    $599 = $20;
    $600 = (1 + ($599))|0;
    $601 = $6;
    $602 = ((($601)) + 616|0);
    $603 = (($602) + (($600*36)|0)|0);
    $604 = ((($603)) + 20|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = ($605|0)!=(0);
    if ($606) {
     $607 = $20;
     $608 = (1 + ($607))|0;
     $609 = $6;
     $610 = ((($609)) + 616|0);
     $611 = (($610) + (($608*36)|0)|0);
     $612 = ((($611)) + 12|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)!=(0);
     $615 = $10;
     $616 = $20;
     if ($614) {
      $617 = HEAP32[3726]|0;
      $618 = (($617) + ($616<<2)|0);
      $619 = HEAP32[$618>>2]|0;
      $620 = $7;
      _resolveEmphasisSingleSymbols($615,$619,$620);
      break;
     } else {
      $621 = (1 + ($616))|0;
      $622 = $20;
      $623 = HEAP32[3726]|0;
      $624 = (($623) + ($622<<2)|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = $6;
      $627 = $8;
      $628 = $7;
      $629 = $9;
      _resolveEmphasisAllSymbols($615,$621,$625,$626,$627,$628,$629);
      break;
     }
    }
   }
  } while(0);
  $630 = $20;
  $631 = (($630) + 1)|0;
  $20 = $631;
 }
 STACKTOP = sp;return;
}
function _doCompTrans($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $27 = sp + 20|0;
 $31 = sp;
 $32 = sp + 80|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $29 = 0;
 $33 = $25;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(2);
 if ($35) {
  $36 = $16;
  $37 = ((($36)) + 1028|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $16;
  $40 = (_brailleIndicatorDefined($38,$39,$27)|0);
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = HEAP32[$27>>2]|0;
   $43 = ((($42)) + 38|0);
   $44 = HEAP32[$27>>2]|0;
   $45 = ((($44)) + 36|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46 << 16 >> 16;
   $48 = $18;
   $49 = HEAP32[$48>>2]|0;
   $50 = $19;
   $51 = $20;
   $52 = $21;
   $53 = $24;
   $54 = $25;
   $55 = (_for_updatePositions($43,0,$47,0,$49,$50,$51,$52,$53,$54)|0);
   $56 = ($55|0)!=(0);
   if (!($56)) {
    $13 = 0;
    $229 = $13;
    STACKTOP = sp;return ($229|0);
   }
  }
 }
 $57 = $14;
 $28 = $57;
 L7: while(1) {
  $58 = $28;
  $59 = $15;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   label = 17;
   break;
  }
  $30 = 0;
  $61 = $28;
  $62 = $22;
  $63 = (($62) + ($61<<3)|0);
  $64 = $31;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = $66 & -65536;
  $71 = $31;
  $72 = $71;
  HEAP32[$72>>2] = $70;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $69;
  $75 = $31;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $77 & 65535;
  $82 = $31;
  $83 = $82;
  HEAP32[$83>>2] = $81;
  $84 = (($82) + 4)|0;
  $85 = $84;
  HEAP32[$85>>2] = $80;
  $86 = $31;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 & -65536;
  $93 = $31;
  $94 = $93;
  HEAP32[$94>>2] = $88;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
  $97 = $31;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 65535;
  $104 = $31;
  $105 = $104;
  HEAP32[$105>>2] = $99;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = $103;
  ;HEAP32[$63>>2]=HEAP32[$31>>2]|0;HEAP32[$63+4>>2]=HEAP32[$31+4>>2]|0;
  $108 = $28;
  $109 = $19;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113&65535;
  $115 = ($114|0)==(65535);
  do {
   if ($115) {
    $29 = 1;
   } else {
    $116 = $28;
    $117 = $18;
    HEAP32[$117>>2] = $116;
    $118 = $28;
    $119 = $19;
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + ($118<<1)|0);
    $123 = HEAP16[$122>>1]|0;
    $124 = $123&65535;
    $125 = ($124|0)<(256);
    if ($125) {
     $126 = $28;
     $127 = $19;
     $128 = ((($127)) + 4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + ($126<<1)|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = $16;
     $134 = ((($133)) + 10840|0);
     $135 = (($134) + ($132<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $30 = $136;
    }
    $137 = $30;
    $138 = ($137|0)!=(0);
    if ($138) {
     $139 = $30;
     $140 = $16;
     $141 = ((($140)) + 21088|0);
     $142 = (($141) + ($139<<3)|0);
     $143 = $23;
     HEAP32[$143>>2] = $142;
     $144 = $23;
     $145 = HEAP32[$144>>2]|0;
     $146 = ((($145)) + 34|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $147 << 16 >> 16;
     $149 = $23;
     $150 = HEAP32[$149>>2]|0;
     $151 = ((($150)) + 38|0);
     $152 = (($151) + ($148<<1)|0);
     $153 = $23;
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($154)) + 34|0);
     $156 = HEAP16[$155>>1]|0;
     $157 = $156 << 16 >> 16;
     $158 = $23;
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($159)) + 36|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = $161 << 16 >> 16;
     $163 = $18;
     $164 = HEAP32[$163>>2]|0;
     $165 = $19;
     $166 = $20;
     $167 = $21;
     $168 = $24;
     $169 = $25;
     $170 = (_for_updatePositions($152,$157,$162,0,$164,$165,$166,$167,$168,$169)|0);
     $171 = ($170|0)!=(0);
     if ($171) {
      break;
     } else {
      label = 13;
      break L7;
     }
    } else {
     $172 = $28;
     $173 = $19;
     $174 = ((($173)) + 4|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + ($172<<1)|0);
     $177 = HEAP16[$176>>1]|0;
     $178 = $16;
     $179 = $17;
     $180 = $18;
     $181 = HEAP32[$180>>2]|0;
     $182 = $19;
     $183 = $20;
     $184 = $21;
     $185 = $24;
     $186 = $25;
     $187 = $26;
     $188 = (_putCompChar($177,$178,$179,$181,$182,$183,$184,$185,$186,$187)|0);
     $189 = ($188|0)!=(0);
     if ($189) {
      break;
     } else {
      label = 15;
      break L7;
     }
    }
   }
  } while(0);
  $190 = $28;
  $191 = (($190) + 1)|0;
  $28 = $191;
 }
 if ((label|0) == 13) {
  $13 = 0;
  $229 = $13;
  STACKTOP = sp;return ($229|0);
 }
 else if ((label|0) == 15) {
  $13 = 0;
  $229 = $13;
  STACKTOP = sp;return ($229|0);
 }
 else if ((label|0) == 17) {
  $192 = $25;
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)!=(2);
  if ($194) {
   $195 = $16;
   $196 = ((($195)) + 1068|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $16;
   $199 = (_brailleIndicatorDefined($197,$198,$27)|0);
   $200 = ($199|0)!=(0);
   if ($200) {
    $201 = HEAP32[$27>>2]|0;
    $202 = ((($201)) + 38|0);
    $203 = HEAP32[$27>>2]|0;
    $204 = ((($203)) + 36|0);
    $205 = HEAP16[$204>>1]|0;
    $206 = $205 << 16 >> 16;
    $207 = $18;
    $208 = HEAP32[$207>>2]|0;
    $209 = $19;
    $210 = $20;
    $211 = $21;
    $212 = $24;
    $213 = $25;
    $214 = (_for_updatePositions($202,0,$206,0,$208,$209,$210,$211,$212,$213)|0);
    $215 = ($214|0)!=(0);
    if (!($215)) {
     $13 = 0;
     $229 = $13;
     STACKTOP = sp;return ($229|0);
    }
   }
  }
  $216 = $15;
  $217 = $18;
  HEAP32[$217>>2] = $216;
  $218 = $29;
  $219 = ($218|0)!=(0);
  if ($219) {
   HEAP16[$32>>1] = -1;
   $220 = $18;
   $221 = HEAP32[$220>>2]|0;
   $222 = $19;
   $223 = $20;
   $224 = $21;
   $225 = $24;
   $226 = $25;
   $227 = (_for_updatePositions($32,0,1,0,$221,$222,$223,$224,$225,$226)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    $13 = 0;
    $229 = $13;
    STACKTOP = sp;return ($229|0);
   }
  }
  $13 = 1;
  $229 = $13;
  STACKTOP = sp;return ($229|0);
 }
 return (0)|0;
}
function _setBefore($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = ($9|0)>=(2);
 if ($10) {
  $11 = $5;
  $12 = (($11) - 1)|0;
  $13 = $6;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)==(65535);
  if ($19) {
   $20 = $5;
   $21 = (($20) - 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $8 = $26;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = $5;
  $28 = ($27|0)==(0);
  if ($28) {
   $38 = 32;
  } else {
   $29 = $5;
   $30 = (($29) - 1)|0;
   $31 = $6;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<1)|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $38 = $36;
  }
  $37 = $38&65535;
  $8 = $37;
 }
 $39 = $8;
 $40 = $4;
 $41 = (_findCharOrDots($39,0,$40)|0);
 $42 = ((($41)) + 16|0);
 $43 = $42;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $7;
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = $45;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $48;
 STACKTOP = sp;return;
}
function _for_selectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 $26 = $26|0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $48 = sp + 8|0;
 $56 = sp;
 $27 = $0;
 $28 = $1;
 $29 = $3;
 $30 = $4;
 $31 = $5;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $38 = $12;
 $39 = $13;
 $40 = $14;
 $41 = $15;
 $42 = $16;
 $43 = $17;
 $44 = $18;
 $45 = $19;
 $46 = $20;
 $47 = $21;
 $60 = $48;
 $61 = $60;
 HEAP32[$61>>2] = $22;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $23;
 $49 = $24;
 $50 = $25;
 $51 = $26;
 $64 = $28;
 $65 = $46;
 $66 = ($64|0)<($65|0);
 if ($66) {
  $67 = $46;
  $73 = $67;
 } else {
  $68 = $31;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $73 = $70;
 }
 $71 = $28;
 $72 = (($73) - ($71))|0;
 $52 = $72;
 $55 = 0;
 $74 = $28;
 $75 = $31;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + ($74<<1)|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $27;
 $81 = (_findCharOrDots($79,0,$80)|0);
 $82 = $49;
 HEAP32[$82>>2] = $81;
 $53 = 0;
 L5: while(1) {
  $83 = $53;
  $84 = ($83|0)<(3);
  if (!($84)) {
   label = 149;
   break;
  }
  $85 = $53;
  switch ($85|0) {
  case 2:  {
   label = 11;
   break L5;
   break;
  }
  case 0:  {
   $86 = $52;
   $87 = ($86|0)>=(2);
   if ($87) {
    $88 = $28;
    $89 = $31;
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($88<<1)|0);
    $93 = $27;
    $94 = (__lou_stringHash($92,1,$93)|0);
    $95 = $27;
    $96 = ((($95)) + 12104|0);
    $97 = (($96) + ($94<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $55 = $98;
   }
   break;
  }
  case 1:  {
   $99 = $52;
   $100 = ($99|0)>=(1);
   if ($100) {
    $52 = 1;
    $101 = $49;
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $55 = $104;
   }
   break;
  }
  default: {
  }
  }
  L13: while(1) {
   $114 = $55;
   $115 = ($114|0)!=(0);
   if (!($115)) {
    break;
   }
   $116 = $55;
   $117 = $27;
   $118 = ((($117)) + 21088|0);
   $119 = (($118) + ($116<<3)|0);
   $120 = $36;
   HEAP32[$120>>2] = $119;
   $121 = $36;
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($122)) + 28|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $34;
   HEAP32[$125>>2] = $124;
   $126 = $36;
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($127)) + 34|0);
   $129 = HEAP16[$128>>1]|0;
   $130 = $129 << 16 >> 16;
   $131 = $37;
   HEAP32[$131>>2] = $130;
   $132 = $53;
   $133 = ($132|0)==(1);
   if ($133) {
    label = 16;
   } else {
    $134 = $37;
    $135 = HEAP32[$134>>2]|0;
    $136 = $52;
    $137 = ($135|0)<=($136|0);
    if ($137) {
     $138 = $27;
     $139 = $28;
     $140 = $31;
     $141 = $32;
     $142 = $36;
     $143 = HEAP32[$142>>2]|0;
     $144 = $37;
     $145 = HEAP32[$144>>2]|0;
     $146 = (_validMatch($138,$139,$140,$141,$143,$145)|0);
     $147 = ($146|0)!=(0);
     if ($147) {
      label = 16;
     }
    }
   }
   L19: do {
    if ((label|0) == 16) {
     label = 0;
     $148 = $36;
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($149)) + 16|0);
     $151 = $150;
     $152 = $151;
     $153 = HEAP32[$152>>2]|0;
     $154 = (($151) + 4)|0;
     $155 = $154;
     $156 = HEAP32[$155>>2]|0;
     $157 = $153 & 536870912;
     $158 = ($157|0)!=(0);
     $159 = (0)!=(0);
     $160 = $158 | $159;
     if ($160) {
      $161 = $28;
      $162 = $33;
      $163 = (($162) + ($161<<3)|0);
      $164 = $163;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + 4)|0;
      $168 = $167;
      $169 = HEAP32[$168>>2]|0;
      $170 = $166 & 65535;
      $171 = ($170|0)!=(0);
      if ($171) {
       break L13;
      }
      $172 = $28;
      $173 = $33;
      $174 = (($173) + ($172<<3)|0);
      $175 = $174;
      $176 = $175;
      $177 = HEAP32[$176>>2]|0;
      $178 = (($175) + 4)|0;
      $179 = $178;
      $180 = HEAP32[$179>>2]|0;
      $181 = (_bitshift64Lshr(($177|0),($180|0),16)|0);
      $182 = tempRet0;
      $183 = $181 & 65535;
      $184 = ($183|0)!=(0);
      if ($184) {
       break L13;
      }
      $185 = $28;
      $186 = $33;
      $187 = (($186) + ($185<<3)|0);
      $188 = $187;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (($188) + 4)|0;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = $193 & 65535;
      $195 = ($194|0)!=(0);
      if ($195) {
       break L13;
      }
      $196 = $28;
      $197 = $33;
      $198 = (($197) + ($196<<3)|0);
      $199 = $198;
      $200 = $199;
      $201 = HEAP32[$200>>2]|0;
      $202 = (($199) + 4)|0;
      $203 = $202;
      $204 = HEAP32[$203>>2]|0;
      $205 = (_bitshift64Lshr(($201|0),($204|0),48)|0);
      $206 = tempRet0;
      $207 = ($205|0)!=(0);
      if ($207) {
       break L13;
      }
     }
     $208 = $36;
     $209 = HEAP32[$208>>2]|0;
     $210 = ((($209)) + 8|0);
     $211 = $210;
     $212 = $211;
     $213 = HEAP32[$212>>2]|0;
     $214 = (($211) + 4)|0;
     $215 = $214;
     $216 = HEAP32[$215>>2]|0;
     $217 = $213 & 536870912;
     $218 = ($217|0)!=(0);
     $219 = (0)!=(0);
     $220 = $218 | $219;
     if ($220) {
      $221 = $28;
      $222 = $37;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + ($223))|0;
      $225 = $33;
      $226 = (($225) + ($224<<3)|0);
      $227 = $226;
      $228 = $227;
      $229 = HEAP32[$228>>2]|0;
      $230 = (($227) + 4)|0;
      $231 = $230;
      $232 = HEAP32[$231>>2]|0;
      $233 = $229 & 65535;
      $234 = ($233|0)!=(0);
      if ($234) {
       break L13;
      }
      $235 = $28;
      $236 = $37;
      $237 = HEAP32[$236>>2]|0;
      $238 = (($235) + ($237))|0;
      $239 = $33;
      $240 = (($239) + ($238<<3)|0);
      $241 = $240;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (($241) + 4)|0;
      $245 = $244;
      $246 = HEAP32[$245>>2]|0;
      $247 = (_bitshift64Lshr(($243|0),($246|0),16)|0);
      $248 = tempRet0;
      $249 = $247 & 65535;
      $250 = ($249|0)!=(0);
      if ($250) {
       break L13;
      }
      $251 = $28;
      $252 = $37;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + ($253))|0;
      $255 = $33;
      $256 = (($255) + ($254<<3)|0);
      $257 = $256;
      $258 = $257;
      $259 = HEAP32[$258>>2]|0;
      $260 = (($257) + 4)|0;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = $262 & 65535;
      $264 = ($263|0)!=(0);
      if ($264) {
       break L13;
      }
      $265 = $28;
      $266 = $37;
      $267 = HEAP32[$266>>2]|0;
      $268 = (($265) + ($267))|0;
      $269 = $33;
      $270 = (($269) + ($268<<3)|0);
      $271 = $270;
      $272 = $271;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($271) + 4)|0;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = (_bitshift64Lshr(($273|0),($276|0),48)|0);
      $278 = tempRet0;
      $279 = ($277|0)!=(0);
      if ($279) {
       break L13;
      }
     }
     $280 = $37;
     $281 = HEAP32[$280>>2]|0;
     $282 = $27;
     $283 = $28;
     $284 = $31;
     _setAfter($281,$282,$283,$284,$56);
     $285 = $36;
     $286 = HEAP32[$285>>2]|0;
     $287 = ((($286)) + 8|0);
     $288 = $287;
     $289 = $288;
     $290 = HEAP32[$289>>2]|0;
     $291 = (($288) + 4)|0;
     $292 = $291;
     $293 = HEAP32[$292>>2]|0;
     $294 = $290 & -536870913;
     $295 = ($294|0)!=(0);
     $296 = ($293|0)!=(0);
     $297 = $295 | $296;
     if ($297) {
      $298 = $48;
      $299 = $298;
      $300 = HEAP32[$299>>2]|0;
      $301 = (($298) + 4)|0;
      $302 = $301;
      $303 = HEAP32[$302>>2]|0;
      $304 = $36;
      $305 = HEAP32[$304>>2]|0;
      $306 = ((($305)) + 8|0);
      $307 = $306;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      $313 = $300 & $309;
      $314 = $303 & $312;
      $315 = ($313|0)!=(0);
      $316 = ($314|0)!=(0);
      $317 = $315 | $316;
      if (!($317)) {
       break;
      }
     }
     $318 = $36;
     $319 = HEAP32[$318>>2]|0;
     $320 = ((($319)) + 16|0);
     $321 = $320;
     $322 = $321;
     $323 = HEAP32[$322>>2]|0;
     $324 = (($321) + 4)|0;
     $325 = $324;
     $326 = HEAP32[$325>>2]|0;
     $327 = $323 & -536870913;
     $328 = ($327|0)!=(0);
     $329 = ($326|0)!=(0);
     $330 = $328 | $329;
     if ($330) {
      $331 = $56;
      $332 = $331;
      $333 = HEAP32[$332>>2]|0;
      $334 = (($331) + 4)|0;
      $335 = $334;
      $336 = HEAP32[$335>>2]|0;
      $337 = $36;
      $338 = HEAP32[$337>>2]|0;
      $339 = ((($338)) + 16|0);
      $340 = $339;
      $341 = $340;
      $342 = HEAP32[$341>>2]|0;
      $343 = (($340) + 4)|0;
      $344 = $343;
      $345 = HEAP32[$344>>2]|0;
      $346 = $333 & $342;
      $347 = $336 & $345;
      $348 = ($346|0)!=(0);
      $349 = ($347|0)!=(0);
      $350 = $348 | $349;
      if (!($350)) {
       break;
      }
     }
     $351 = $36;
     $352 = HEAP32[$351>>2]|0;
     $353 = ((($352)) + 32|0);
     $354 = HEAP8[$353>>0]|0;
     $355 = $354 << 24 >> 24;
     $356 = ($355|0)!=(0);
     if ($356) {
      $357 = $27;
      $358 = $28;
      $359 = $31;
      $360 = $37;
      $361 = HEAP32[$360>>2]|0;
      $362 = (_syllableBreak($357,$358,$359,$361)|0);
      $363 = ($362|0)!=(0);
      if ($363) {
       break;
      }
     }
     $364 = $34;
     $365 = HEAP32[$364>>2]|0;
     do {
      switch ($365|0) {
      case 83: case 88: case 87: case 72: case 109: case 64: case 63: case 62: case 70: case 61: case 67: case 66: case 65: case 60:  {
       label = 149;
       break L5;
       break;
      }
      case 78:  {
       $366 = $45;
       $367 = ($366|0)!=(0);
       if ($367) {
        break L19;
       }
       $368 = $30;
       $369 = $368 & 1;
       $370 = ($369|0)!=(0);
       if ($370) {
        break L19;
       }
       $371 = $30;
       $372 = $371 & 34;
       $373 = ($372|0)!=(0);
       if (!($373)) {
        label = 149;
        break L5;
       }
       $374 = $28;
       $375 = $46;
       $376 = ($374|0)>=($375|0);
       if (!($376)) {
        label = 149;
        break L5;
       }
       $377 = $28;
       $378 = $47;
       $379 = ($377|0)<=($378|0);
       if ($379) {
        break L19;
       } else {
        label = 149;
        break L5;
       }
       break;
      }
      case 80: case 79:  {
       $380 = $45;
       $381 = ($380|0)!=(0);
       if ($381) {
        break L19;
       }
       $382 = $30;
       $383 = $382 & 1;
       $384 = ($383|0)!=(0);
       if ($384) {
        break L19;
       }
       $385 = $27;
       $386 = $28;
       $387 = $31;
       $388 = ((($2)) + 12|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = $29;
       $391 = $37;
       $392 = HEAP32[$391>>2]|0;
       $393 = $44;
       $394 = (_isRepeatedWord($385,$386,$387,$389,$390,$392,$393)|0);
       $395 = ($394|0)!=(0);
       if (!($395)) {
        break L19;
       }
       $396 = $28;
       $397 = $44;
       $398 = HEAP32[$397>>2]|0;
       $399 = ($396|0)>($398|0);
       if ($399) {
        $400 = $28;
        $401 = $44;
        $402 = HEAP32[$401>>2]|0;
        $403 = (($400) - ($402))|0;
        $404 = (($403) - 1)|0;
        $405 = $31;
        $406 = ((($405)) + 4|0);
        $407 = HEAP32[$406>>2]|0;
        $408 = (($407) + ($404<<1)|0);
        $409 = HEAP16[$408>>1]|0;
        $410 = $27;
        $411 = (_checkAttr($409,2,0,0,$410)|0);
        $412 = ($411|0)!=(0);
        $414 = $412;
       } else {
        $414 = 0;
       }
       $413 = $414&1;
       $415 = $34;
       $416 = HEAP32[$415>>2]|0;
       $417 = ($416|0)==(80);
       $418 = $417&1;
       $419 = ($413|0)==($418|0);
       if ($419) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 86:  {
       $420 = $45;
       $421 = ($420|0)!=(0);
       if ($421) {
        break L19;
       }
       $422 = $30;
       $423 = $422 & 1;
       $424 = ($423|0)!=(0);
       if ($424) {
        break L19;
       } else {
        label = 149;
        break L5;
       }
       break;
      }
      case 85:  {
       $425 = $34;
       HEAP32[$425>>2] = 82;
       label = 47;
       break;
      }
      case 82:  {
       label = 47;
       break;
      }
      case 73:  {
       $437 = $42;
       $438 = ($437|0)!=(0);
       if (!($438)) {
        break L19;
       }
       $439 = $27;
       $440 = $28;
       $441 = $31;
       $442 = $34;
       $443 = HEAP32[$442>>2]|0;
       $444 = $36;
       $445 = HEAP32[$444>>2]|0;
       $446 = $38;
       $447 = $39;
       $448 = $40;
       $449 = $41;
       $450 = $50;
       $451 = $51;
       $452 = (_passDoTest($439,$440,$441,$443,$445,$446,$447,$448,$449,$450,$451)|0);
       $453 = ($452|0)!=(0);
       if ($453) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 89:  {
       $454 = $45;
       $455 = ($454|0)!=(0);
       if ($455) {
        break L19;
       }
       $456 = $30;
       $457 = $456 & 1;
       $458 = ($457|0)!=(0);
       if ($458) {
        break L19;
       } else {
        label = 53;
        break L5;
       }
       break;
      }
      case 90:  {
       $514 = $45;
       $515 = ($514|0)!=(0);
       if ($515) {
        break L19;
       }
       $516 = $30;
       $517 = $516 & 1;
       $518 = ($517|0)!=(0);
       if ($518) {
        break L19;
       }
       $519 = $28;
       $520 = $33;
       $521 = $36;
       $522 = HEAP32[$521>>2]|0;
       $523 = (_checkEmphasisChange(0,$519,$520,$522)|0);
       $524 = ($523|0)!=(0);
       if ($524) {
        break L19;
       }
       break;
      }
      case 95:  {
       break;
      }
      case 91:  {
       $556 = $45;
       $557 = ($556|0)!=(0);
       if ($557) {
        break L19;
       }
       $558 = $30;
       $559 = $558 & 1;
       $560 = ($559|0)!=(0);
       if ($560) {
        break L19;
       }
       $561 = $48;
       $562 = $561;
       $563 = HEAP32[$562>>2]|0;
       $564 = (($561) + 4)|0;
       $565 = $564;
       $566 = HEAP32[$565>>2]|0;
       $567 = $563 & 2;
       $568 = ($567|0)!=(0);
       $569 = (0)!=(0);
       $570 = $568 | $569;
       if ($570) {
        label = 149;
        break L5;
       }
       $571 = $56;
       $572 = $571;
       $573 = HEAP32[$572>>2]|0;
       $574 = (($571) + 4)|0;
       $575 = $574;
       $576 = HEAP32[$575>>2]|0;
       $577 = $573 & 2;
       $578 = ($577|0)!=(0);
       $579 = (0)!=(0);
       $580 = $578 | $579;
       if ($580) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 92:  {
       $581 = $45;
       $582 = ($581|0)!=(0);
       if ($582) {
        break L19;
       }
       $583 = $30;
       $584 = $583 & 1;
       $585 = ($584|0)!=(0);
       if ($585) {
        break L19;
       }
       $586 = $48;
       $587 = $586;
       $588 = HEAP32[$587>>2]|0;
       $589 = (($586) + 4)|0;
       $590 = $589;
       $591 = HEAP32[$590>>2]|0;
       $592 = $588 & 9;
       $593 = ($592|0)!=(0);
       $594 = (0)!=(0);
       $595 = $593 | $594;
       if (!($595)) {
        break L19;
       }
       $596 = $56;
       $597 = $596;
       $598 = HEAP32[$597>>2]|0;
       $599 = (($596) + 4)|0;
       $600 = $599;
       $601 = HEAP32[$600>>2]|0;
       $602 = $598 & 1;
       $603 = ($602|0)!=(0);
       $604 = (0)!=(0);
       $605 = $603 | $604;
       if (!($605)) {
        break L19;
       }
       $606 = ((($2)) + 12|0);
       $607 = HEAP32[$606>>2]|0;
       $608 = $36;
       $609 = HEAP32[$608>>2]|0;
       $610 = ((($609)) + 36|0);
       $611 = HEAP16[$610>>1]|0;
       $612 = $611 << 16 >> 16;
       $613 = (($607) + ($612))|0;
       $614 = ((($2)) + 8|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = ($613|0)<($615|0);
       if (!($616)) {
        break L19;
       }
       $617 = $28;
       $618 = $37;
       $619 = HEAP32[$618>>2]|0;
       $620 = (($617) + ($619))|0;
       $621 = (($620) + 1)|0;
       $57 = $621;
       while(1) {
        $622 = $57;
        $623 = $31;
        $624 = ((($623)) + 8|0);
        $625 = HEAP32[$624>>2]|0;
        $626 = ($622|0)<($625|0);
        if (!($626)) {
         break L19;
        }
        $627 = $57;
        $628 = $31;
        $629 = ((($628)) + 4|0);
        $630 = HEAP32[$629>>2]|0;
        $631 = (($630) + ($627<<1)|0);
        $632 = HEAP16[$631>>1]|0;
        $633 = $27;
        $634 = (_checkAttr($632,1,0,0,$633)|0);
        $635 = ($634|0)!=(0);
        $636 = $57;
        if (!($635)) {
         break;
        }
        $645 = (($636) + 1)|0;
        $57 = $645;
       }
       $637 = $31;
       $638 = ((($637)) + 4|0);
       $639 = HEAP32[$638>>2]|0;
       $640 = (($639) + ($636<<1)|0);
       $641 = HEAP16[$640>>1]|0;
       $642 = $27;
       $643 = (_checkAttr($641,4,0,0,$642)|0);
       $644 = ($643|0)!=(0);
       if ($644) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 94:  {
       $646 = $45;
       $647 = ($646|0)!=(0);
       if ($647) {
        break L19;
       }
       $648 = $30;
       $649 = $648 & 1;
       $650 = ($649|0)!=(0);
       if ($650) {
        break L19;
       }
       $651 = $48;
       $652 = $651;
       $653 = HEAP32[$652>>2]|0;
       $654 = (($651) + 4)|0;
       $655 = $654;
       $656 = HEAP32[$655>>2]|0;
       $657 = $653 & 1;
       $658 = ($657|0)!=(0);
       $659 = (0)!=(0);
       $660 = $658 | $659;
       if (!($660)) {
        break L19;
       }
       $661 = $56;
       $662 = $661;
       $663 = HEAP32[$662>>2]|0;
       $664 = (($661) + 4)|0;
       $665 = $664;
       $666 = HEAP32[$665>>2]|0;
       $667 = $663 & 1;
       $668 = ($667|0)!=(0);
       $669 = (0)!=(0);
       $670 = $668 | $669;
       $671 = $35;
       $672 = ($671|0)!=(93);
       $or$cond3 = $670 & $672;
       if ($or$cond3) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 93:  {
       $673 = $45;
       $674 = ($673|0)!=(0);
       if ($674) {
        break L19;
       }
       $675 = $30;
       $676 = $675 & 1;
       $677 = ($676|0)!=(0);
       if ($677) {
        break L19;
       }
       $678 = $48;
       $679 = $678;
       $680 = HEAP32[$679>>2]|0;
       $681 = (($678) + 4)|0;
       $682 = $681;
       $683 = HEAP32[$682>>2]|0;
       $684 = $680 & 9;
       $685 = ($684|0)!=(0);
       $686 = (0)!=(0);
       $687 = $685 | $686;
       if (!($687)) {
        break L19;
       }
       $688 = $27;
       $689 = $28;
       $690 = $31;
       $691 = $37;
       $692 = HEAP32[$691>>2]|0;
       $693 = $56;
       $694 = $693;
       $695 = HEAP32[$694>>2]|0;
       $696 = (($693) + 4)|0;
       $697 = $696;
       $698 = HEAP32[$697>>2]|0;
       $699 = (_onlyLettersAhead($688,$689,$690,$692,$695,$698)|0);
       $700 = ($699|0)!=(0);
       if (!($700)) {
        break L19;
       }
       $701 = $27;
       $702 = $28;
       $703 = $30;
       $704 = $31;
       $705 = $34;
       $706 = HEAP32[$705>>2]|0;
       $707 = $37;
       $708 = HEAP32[$707>>2]|0;
       $709 = $43;
       $710 = (_noCompbrlAhead($701,$702,$703,$704,$706,$708,$709)|0);
       $711 = ($710|0)!=(0);
       if ($711) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 96:  {
       $712 = $45;
       $713 = ($712|0)!=(0);
       if ($713) {
        break L19;
       }
       $714 = $30;
       $715 = $714 & 1;
       $716 = ($715|0)!=(0);
       if ($716) {
        break L19;
       }
       $717 = $48;
       $718 = $717;
       $719 = HEAP32[$718>>2]|0;
       $720 = (($717) + 4)|0;
       $721 = $720;
       $722 = HEAP32[$721>>2]|0;
       $723 = $719 & 9;
       $724 = ($723|0)!=(0);
       $725 = (0)!=(0);
       $726 = $724 | $725;
       if (!($726)) {
        break L19;
       }
       $727 = $56;
       $728 = $727;
       $729 = HEAP32[$728>>2]|0;
       $730 = (($727) + 4)|0;
       $731 = $730;
       $732 = HEAP32[$731>>2]|0;
       $733 = $729 & 11;
       $734 = ($733|0)!=(0);
       $735 = (0)!=(0);
       $736 = $734 | $735;
       if ($736) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 97:  {
       $737 = $45;
       $738 = ($737|0)!=(0);
       if ($738) {
        break L19;
       }
       $739 = $30;
       $740 = $739 & 1;
       $741 = ($740|0)!=(0);
       if ($741) {
        break L19;
       }
       $742 = $48;
       $743 = $742;
       $744 = HEAP32[$743>>2]|0;
       $745 = (($742) + 4)|0;
       $746 = $745;
       $747 = HEAP32[$746>>2]|0;
       $748 = $744 & 11;
       $749 = ($748|0)!=(0);
       $750 = (0)!=(0);
       $751 = $749 | $750;
       if (!($751)) {
        break L19;
       }
       $752 = $56;
       $753 = $752;
       $754 = HEAP32[$753>>2]|0;
       $755 = (($752) + 4)|0;
       $756 = $755;
       $757 = HEAP32[$756>>2]|0;
       $758 = $754 & 9;
       $759 = ($758|0)!=(0);
       $760 = (0)!=(0);
       $761 = $759 | $760;
       if ($761) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 98:  {
       $762 = $45;
       $763 = ($762|0)!=(0);
       if ($763) {
        break L19;
       }
       $764 = $30;
       $765 = $764 & 1;
       $766 = ($765|0)!=(0);
       if ($766) {
        break L19;
       }
       $767 = $48;
       $768 = $767;
       $769 = HEAP32[$768>>2]|0;
       $770 = (($767) + 4)|0;
       $771 = $770;
       $772 = HEAP32[$771>>2]|0;
       $773 = $769 & 9;
       $774 = ($773|0)!=(0);
       $775 = (0)!=(0);
       $776 = $774 | $775;
       if (!($776)) {
        break L19;
       }
       $777 = $56;
       $778 = $777;
       $779 = HEAP32[$778>>2]|0;
       $780 = (($777) + 4)|0;
       $781 = $780;
       $782 = HEAP32[$781>>2]|0;
       $783 = $779 & 2;
       $784 = ($783|0)!=(0);
       $785 = (0)!=(0);
       $786 = $784 | $785;
       if ($786) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 99:  {
       $787 = $45;
       $788 = ($787|0)!=(0);
       if ($788) {
        break L19;
       }
       $789 = $30;
       $790 = $789 & 1;
       $791 = ($790|0)!=(0);
       if ($791) {
        break L19;
       }
       $792 = $48;
       $793 = $792;
       $794 = HEAP32[$793>>2]|0;
       $795 = (($792) + 4)|0;
       $796 = $795;
       $797 = HEAP32[$796>>2]|0;
       $798 = $794 & 11;
       $799 = ($798|0)!=(0);
       $800 = (0)!=(0);
       $801 = $799 | $800;
       if (!($801)) {
        break L19;
       }
       $802 = $56;
       $803 = $802;
       $804 = HEAP32[$803>>2]|0;
       $805 = (($802) + 4)|0;
       $806 = $805;
       $807 = HEAP32[$806>>2]|0;
       $808 = $804 & 2;
       $809 = ($808|0)!=(0);
       $810 = (0)!=(0);
       $811 = $809 | $810;
       if ($811) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 100:  {
       $812 = $45;
       $813 = ($812|0)!=(0);
       if ($813) {
        break L19;
       }
       $814 = $30;
       $815 = $814 & 1;
       $816 = ($815|0)!=(0);
       if ($816) {
        break L19;
       }
       $817 = $48;
       $818 = $817;
       $819 = HEAP32[$818>>2]|0;
       $820 = (($817) + 4)|0;
       $821 = $820;
       $822 = HEAP32[$821>>2]|0;
       $823 = $819 & 2;
       $824 = ($823|0)!=(0);
       $825 = (0)!=(0);
       $826 = $824 | $825;
       if (!($826)) {
        break L19;
       }
       $827 = $56;
       $828 = $827;
       $829 = HEAP32[$828>>2]|0;
       $830 = (($827) + 4)|0;
       $831 = $830;
       $832 = HEAP32[$831>>2]|0;
       $833 = $829 & 2;
       $834 = ($833|0)!=(0);
       $835 = (0)!=(0);
       $836 = $834 | $835;
       if ($836) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 101:  {
       $837 = $45;
       $838 = ($837|0)!=(0);
       if ($838) {
        break L19;
       }
       $839 = $30;
       $840 = $839 & 1;
       $841 = ($840|0)!=(0);
       if ($841) {
        break L19;
       }
       $842 = $48;
       $843 = $842;
       $844 = HEAP32[$843>>2]|0;
       $845 = (($842) + 4)|0;
       $846 = $845;
       $847 = HEAP32[$846>>2]|0;
       $848 = $844 & 2;
       $849 = ($848|0)!=(0);
       $850 = (0)!=(0);
       $851 = $849 | $850;
       if (!($851)) {
        break L19;
       }
       $852 = $56;
       $853 = $852;
       $854 = HEAP32[$853>>2]|0;
       $855 = (($852) + 4)|0;
       $856 = $855;
       $857 = HEAP32[$856>>2]|0;
       $858 = $854 & 11;
       $859 = ($858|0)!=(0);
       $860 = (0)!=(0);
       $861 = $859 | $860;
       if ($861) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 102:  {
       $862 = $45;
       $863 = ($862|0)!=(0);
       if ($863) {
        break L19;
       }
       $864 = $30;
       $865 = $864 & 1;
       $866 = ($865|0)!=(0);
       if ($866) {
        break L19;
       }
       $867 = $48;
       $868 = $867;
       $869 = HEAP32[$868>>2]|0;
       $870 = (($867) + 4)|0;
       $871 = $870;
       $872 = HEAP32[$871>>2]|0;
       $873 = $869 & 2;
       $874 = ($873|0)!=(0);
       $875 = (0)!=(0);
       $876 = $874 | $875;
       if (!($876)) {
        break L19;
       }
       $877 = $56;
       $878 = $877;
       $879 = HEAP32[$878>>2]|0;
       $880 = (($877) + 4)|0;
       $881 = $880;
       $882 = HEAP32[$881>>2]|0;
       $883 = $879 & 9;
       $884 = ($883|0)!=(0);
       $885 = (0)!=(0);
       $886 = $884 | $885;
       if ($886) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 105:  {
       $887 = $48;
       $888 = $887;
       $889 = HEAP32[$888>>2]|0;
       $890 = (($887) + 4)|0;
       $891 = $890;
       $892 = HEAP32[$891>>2]|0;
       $893 = $889 & 9;
       $894 = ($893|0)!=(0);
       $895 = (0)!=(0);
       $896 = $894 | $895;
       if (!($896)) {
        break L19;
       }
       $897 = $56;
       $898 = $897;
       $899 = HEAP32[$898>>2]|0;
       $900 = (($897) + 4)|0;
       $901 = $900;
       $902 = HEAP32[$901>>2]|0;
       $903 = $899 & 4;
       $904 = ($903|0)!=(0);
       $905 = (0)!=(0);
       $906 = $904 | $905;
       if ($906) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 106:  {
       $907 = $35;
       $908 = ($907|0)!=(83);
       if (!($908)) {
        break L19;
       }
       $909 = $48;
       $910 = $909;
       $911 = HEAP32[$910>>2]|0;
       $912 = (($909) + 4)|0;
       $913 = $912;
       $914 = HEAP32[$913>>2]|0;
       $915 = $911 & 4;
       $916 = ($915|0)!=(0);
       $917 = (0)!=(0);
       $918 = $916 | $917;
       if (!($918)) {
        break L19;
       }
       $919 = $56;
       $920 = $919;
       $921 = HEAP32[$920>>2]|0;
       $922 = (($919) + 4)|0;
       $923 = $922;
       $924 = HEAP32[$923>>2]|0;
       $925 = $921 & 4;
       $926 = ($925|0)!=(0);
       $927 = (0)!=(0);
       $928 = $926 | $927;
       if ($928) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 107:  {
       $929 = $48;
       $930 = $929;
       $931 = HEAP32[$930>>2]|0;
       $932 = (($929) + 4)|0;
       $933 = $932;
       $934 = HEAP32[$933>>2]|0;
       $935 = $931 & 4;
       $936 = ($935|0)!=(0);
       $937 = (0)!=(0);
       $938 = $936 | $937;
       $939 = $35;
       $940 = ($939|0)!=(83);
       $or$cond5 = $938 & $940;
       if ($or$cond5) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 108:  {
       $941 = $56;
       $942 = $941;
       $943 = HEAP32[$942>>2]|0;
       $944 = (($941) + 4)|0;
       $945 = $944;
       $946 = HEAP32[$945>>2]|0;
       $947 = $943 & 4;
       $948 = ($947|0)!=(0);
       $949 = (0)!=(0);
       $950 = $948 | $949;
       if ($950) {
        label = 124;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 103:  {
       $962 = $28;
       $963 = $31;
       $964 = ((($963)) + 4|0);
       $965 = HEAP32[$964>>2]|0;
       $966 = (($965) + ($962<<1)|0);
       $967 = HEAP16[$966>>1]|0;
       $968 = $27;
       $969 = (_checkAttr($967,8,0,0,$968)|0);
       $970 = ($969|0)!=(0);
       if (!($970)) {
        break L19;
       }
       $971 = $28;
       $972 = ($971|0)>(0);
       if ($972) {
        $973 = $28;
        $974 = (($973) - 1)|0;
        $975 = $31;
        $976 = ((($975)) + 4|0);
        $977 = HEAP32[$976>>2]|0;
        $978 = (($977) + ($974<<1)|0);
        $979 = HEAP16[$978>>1]|0;
        $980 = $27;
        $981 = (_checkAttr($979,2,0,0,$980)|0);
        $982 = ($981|0)!=(0);
        if ($982) {
         break L19;
        }
       }
       $983 = $28;
       $984 = $37;
       $985 = HEAP32[$984>>2]|0;
       $986 = (($983) + ($985))|0;
       $54 = $986;
       while(1) {
        $987 = $54;
        $988 = $31;
        $989 = ((($988)) + 8|0);
        $990 = HEAP32[$989>>2]|0;
        $991 = ($987|0)<($990|0);
        if (!($991)) {
         break L19;
        }
        $992 = $54;
        $993 = $31;
        $994 = ((($993)) + 4|0);
        $995 = HEAP32[$994>>2]|0;
        $996 = (($995) + ($992<<1)|0);
        $997 = HEAP16[$996>>1]|0;
        $998 = $27;
        $999 = (_checkAttr($997,6,0,0,$998)|0);
        $1000 = ($999|0)!=(0);
        if ($1000) {
         label = 149;
         break L5;
        }
        $1001 = $54;
        $1002 = $31;
        $1003 = ((($1002)) + 4|0);
        $1004 = HEAP32[$1003>>2]|0;
        $1005 = (($1004) + ($1001<<1)|0);
        $1006 = HEAP16[$1005>>1]|0;
        $1007 = $27;
        $1008 = (_checkAttr($1006,1,0,0,$1007)|0);
        $1009 = ($1008|0)!=(0);
        if ($1009) {
         break L19;
        }
        $1010 = $54;
        $1011 = (($1010) + 1)|0;
        $54 = $1011;
       }
       break;
      }
      case 104:  {
       $1012 = $28;
       $1013 = $31;
       $1014 = ((($1013)) + 4|0);
       $1015 = HEAP32[$1014>>2]|0;
       $1016 = (($1015) + ($1012<<1)|0);
       $1017 = HEAP16[$1016>>1]|0;
       $1018 = $27;
       $1019 = (_checkAttr($1017,8,0,0,$1018)|0);
       $1020 = ($1019|0)!=(0);
       if (!($1020)) {
        break L19;
       }
       $1021 = $28;
       $1022 = $31;
       $1023 = ((($1022)) + 8|0);
       $1024 = HEAP32[$1023>>2]|0;
       $1025 = (($1024) - 1)|0;
       $1026 = ($1021|0)<($1025|0);
       if ($1026) {
        $1027 = $28;
        $1028 = (($1027) + 1)|0;
        $1029 = $31;
        $1030 = ((($1029)) + 4|0);
        $1031 = HEAP32[$1030>>2]|0;
        $1032 = (($1031) + ($1028<<1)|0);
        $1033 = HEAP16[$1032>>1]|0;
        $1034 = $27;
        $1035 = (_checkAttr($1033,2,0,0,$1034)|0);
        $1036 = ($1035|0)!=(0);
        if ($1036) {
         break L19;
        }
       }
       $1037 = $28;
       $54 = $1037;
       while(1) {
        $1038 = $54;
        $1039 = ($1038|0)>=(0);
        if (!($1039)) {
         break L19;
        }
        $1040 = $54;
        $1041 = $31;
        $1042 = ((($1041)) + 4|0);
        $1043 = HEAP32[$1042>>2]|0;
        $1044 = (($1043) + ($1040<<1)|0);
        $1045 = HEAP16[$1044>>1]|0;
        $1046 = $27;
        $1047 = (_checkAttr($1045,6,0,0,$1046)|0);
        $1048 = ($1047|0)!=(0);
        if ($1048) {
         label = 149;
         break L5;
        }
        $1049 = $54;
        $1050 = $31;
        $1051 = ((($1050)) + 4|0);
        $1052 = HEAP32[$1051>>2]|0;
        $1053 = (($1052) + ($1049<<1)|0);
        $1054 = HEAP16[$1053>>1]|0;
        $1055 = $27;
        $1056 = (_checkAttr($1054,1,0,0,$1055)|0);
        $1057 = ($1056|0)!=(0);
        if ($1057) {
         break L19;
        }
        $1058 = $54;
        $1059 = (($1058) + -1)|0;
        $54 = $1059;
       }
       break;
      }
      case 111:  {
       $1060 = $45;
       $1061 = ($1060|0)!=(0);
       if ($1061) {
        break L19;
       }
       $1062 = $30;
       $1063 = $1062 & 1;
       $1064 = ($1063|0)!=(0);
       if ($1064) {
        break L19;
       }
       $1065 = $28;
       $1066 = $33;
       $1067 = $36;
       $1068 = HEAP32[$1067>>2]|0;
       $1069 = (_checkEmphasisChange(0,$1065,$1066,$1068)|0);
       $1070 = ($1069|0)!=(0);
       if ($1070) {
        break L19;
       }
       $1071 = $36;
       $1072 = HEAP32[$1071>>2]|0;
       $1073 = ((($1072)) + 24|0);
       $1074 = HEAP32[$1073>>2]|0;
       $1075 = $27;
       $1076 = ((($1075)) + 21088|0);
       $1077 = (($1076) + ($1074<<3)|0);
       $58 = $1077;
       $1078 = $58;
       $1079 = ((($1078)) + 2|0);
       $59 = $1079;
       $1080 = $31;
       $1081 = ((($1080)) + 4|0);
       $1082 = HEAP32[$1081>>2]|0;
       $1083 = $28;
       $1084 = (($1083) - 1)|0;
       $1085 = $59;
       $1086 = $27;
       $1087 = (__lou_pattern_check($1082,$1084,-1,-1,$1085,$1086)|0);
       $1088 = ($1087|0)!=(0);
       if (!($1088)) {
        break L19;
       }
       $1089 = $58;
       $1090 = HEAP16[$1089>>1]|0;
       $1091 = $1090&65535;
       $1092 = $58;
       $1093 = (($1092) + ($1091<<1)|0);
       $59 = $1093;
       $1094 = $31;
       $1095 = ((($1094)) + 4|0);
       $1096 = HEAP32[$1095>>2]|0;
       $1097 = $28;
       $1098 = $36;
       $1099 = HEAP32[$1098>>2]|0;
       $1100 = ((($1099)) + 34|0);
       $1101 = HEAP16[$1100>>1]|0;
       $1102 = $1101 << 16 >> 16;
       $1103 = (($1097) + ($1102))|0;
       $1104 = $31;
       $1105 = ((($1104)) + 8|0);
       $1106 = HEAP32[$1105>>2]|0;
       $1107 = $59;
       $1108 = $27;
       $1109 = (__lou_pattern_check($1096,$1103,$1106,1,$1107,$1108)|0);
       $1110 = ($1109|0)!=(0);
       if ($1110) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      default: {
       break L19;
      }
      }
     } while(0);
     if ((label|0) == 47) {
      label = 0;
      $426 = $28;
      $427 = $33;
      $428 = $36;
      $429 = HEAP32[$428>>2]|0;
      $430 = (_checkEmphasisChange(0,$426,$427,$429)|0);
      $431 = ($430|0)!=(0);
      $432 = $45;
      $433 = ($432|0)!=(0);
      $or$cond7 = $431 | $433;
      if ($or$cond7) {
       break;
      }
      $434 = $30;
      $435 = $434 & 1;
      $436 = ($435|0)!=(0);
      if ($436) {
       break;
      } else {
       label = 149;
       break L5;
      }
     }
     $525 = $27;
     $526 = ((($525)) + 16|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = ($527|0)!=(0);
     if ($528) {
      $529 = $27;
      $530 = $28;
      $531 = $31;
      $532 = $36;
      $533 = HEAP32[$532>>2]|0;
      $534 = (_inSequence($529,$530,$531,$533)|0);
      $535 = ($534|0)!=(0);
      if ($535) {
       label = 149;
       break L5;
      } else {
       break;
      }
     }
     $536 = $48;
     $537 = $536;
     $538 = HEAP32[$537>>2]|0;
     $539 = (($536) + 4)|0;
     $540 = $539;
     $541 = HEAP32[$540>>2]|0;
     $542 = $538 & 9;
     $543 = ($542|0)!=(0);
     $544 = (0)!=(0);
     $545 = $543 | $544;
     if ($545) {
      $546 = $56;
      $547 = $546;
      $548 = HEAP32[$547>>2]|0;
      $549 = (($546) + 4)|0;
      $550 = $549;
      $551 = HEAP32[$550>>2]|0;
      $552 = $548 & 9;
      $553 = ($552|0)!=(0);
      $554 = (0)!=(0);
      $555 = $553 | $554;
      if ($555) {
       label = 149;
       break L5;
      }
     }
    }
   } while(0);
   $1111 = $36;
   $1112 = HEAP32[$1111>>2]|0;
   $1113 = HEAP32[$1112>>2]|0;
   $55 = $1113;
  }
  $1114 = $53;
  $1115 = (($1114) + 1)|0;
  $53 = $1115;
 }
 if ((label|0) == 11) {
  $105 = $36;
  HEAP32[$105>>2] = 10256;
  HEAP32[(10284)>>2] = 114;
  $106 = $34;
  HEAP32[$106>>2] = 114;
  HEAP16[(10290)>>1] = 1;
  $107 = $37;
  HEAP32[$107>>2] = 1;
  $108 = $28;
  $109 = $31;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  HEAP16[(10294)>>1] = $113;
  HEAP16[(10292)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 53) {
  $459 = $48;
  $460 = $459;
  $461 = HEAP32[$460>>2]|0;
  $462 = (($459) + 4)|0;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = $461 & 9;
  $466 = ($465|0)!=(0);
  $467 = (0)!=(0);
  $468 = $466 | $467;
  if ($468) {
   label = 55;
  } else {
   $469 = $27;
   $470 = $28;
   $471 = $31;
   $472 = $48;
   $473 = $472;
   $474 = HEAP32[$473>>2]|0;
   $475 = (($472) + 4)|0;
   $476 = $475;
   $477 = HEAP32[$476>>2]|0;
   $478 = (_onlyLettersBehind($469,$470,$471,$474,$477)|0);
   $479 = ($478|0)!=(0);
   if ($479) {
    label = 55;
   }
  }
  if ((label|0) == 55) {
   $480 = $56;
   $481 = $480;
   $482 = HEAP32[$481>>2]|0;
   $483 = (($480) + 4)|0;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $486 = $482 & 1;
   $487 = ($486|0)!=(0);
   $488 = (0)!=(0);
   $489 = $487 | $488;
   $490 = $35;
   $491 = ($490|0)==(89);
   $or$cond = $489 | $491;
   if ($or$cond) {
    $492 = $56;
    $493 = $492;
    $494 = HEAP32[$493>>2]|0;
    $495 = (($492) + 4)|0;
    $496 = $495;
    $497 = HEAP32[$496>>2]|0;
    $498 = $494 & 2;
    $499 = ($498|0)!=(0);
    $500 = (0)!=(0);
    $501 = $499 | $500;
    if (!($501)) {
     $502 = $27;
     $503 = $28;
     $504 = $30;
     $505 = $31;
     $506 = $34;
     $507 = HEAP32[$506>>2]|0;
     $508 = $37;
     $509 = HEAP32[$508>>2]|0;
     $510 = $43;
     $511 = (_noCompbrlAhead($502,$503,$504,$505,$507,$509,$510)|0);
     $512 = ($511|0)!=(0);
     if ($512) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $513 = $34;
  HEAP32[$513>>2] = 82;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 124) {
  $951 = $48;
  $952 = $951;
  $953 = HEAP32[$952>>2]|0;
  $954 = (($951) + 4)|0;
  $955 = $954;
  $956 = HEAP32[$955>>2]|0;
  $957 = $953 & 4;
  $958 = ($957|0)!=(0);
  $959 = (0)!=(0);
  $960 = $958 | $959;
  if (!($960)) {
   STACKTOP = sp;return;
  }
  $961 = $34;
  HEAP32[$961>>2] = 106;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 149) {
  STACKTOP = sp;return;
 }
}
function _doCompbrl($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $29 = $16;
 $30 = HEAP32[$29>>2]|0;
 $31 = $17;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30<<1)|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $14;
 $37 = (_checkAttr($35,1,0,0,$36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $13 = 1;
  $107 = $13;
  STACKTOP = sp;return ($107|0);
 }
 $39 = $24;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $24;
  $44 = HEAP32[$43>>2]|0;
  $45 = $16;
  HEAP32[$45>>2] = $44;
  $46 = $24;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $18;
  $50 = ((($49)) + 12|0);
  HEAP32[$50>>2] = $48;
 } else {
  $51 = $16;
  HEAP32[$51>>2] = 0;
  $52 = $18;
  $53 = ((($52)) + 12|0);
  HEAP32[$53>>2] = 0;
 }
 $54 = $24;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $25;
 HEAP32[$57>>2] = $56;
 $58 = $16;
 $59 = HEAP32[$58>>2]|0;
 $27 = $59;
 while(1) {
  $60 = $27;
  $61 = ($60|0)>=(0);
  if (!($61)) {
   break;
  }
  $62 = $27;
  $63 = $17;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $14;
  $69 = (_checkAttr($67,1,0,0,$68)|0);
  $70 = ($69|0)!=(0);
  if ($70) {
   break;
  }
  $71 = $27;
  $72 = (($71) + -1)|0;
  $27 = $72;
 }
 $73 = $27;
 $74 = (($73) + 1)|0;
 $27 = $74;
 $75 = $16;
 $76 = HEAP32[$75>>2]|0;
 $28 = $76;
 while(1) {
  $77 = $28;
  $78 = $17;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $28;
  $83 = $17;
  $84 = ((($83)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($82<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $14;
  $89 = (_checkAttr($87,1,0,0,$88)|0);
  $90 = ($89|0)!=(0);
  if ($90) {
   break;
  }
  $91 = $28;
  $92 = (($91) + 1)|0;
  $28 = $92;
 }
 $93 = $27;
 $94 = $28;
 $95 = $14;
 $96 = $15;
 $97 = $16;
 $98 = $17;
 $99 = $18;
 $100 = $19;
 $101 = $20;
 $102 = $21;
 $103 = $22;
 $104 = $23;
 $105 = $26;
 $106 = (_doCompTrans($93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105)|0);
 $13 = $106;
 $107 = $13;
 STACKTOP = sp;return ($107|0);
}
function _insertEmphasesAt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $26 = sp + 16|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $31 = $14;
 $32 = ($31|0)!=(0);
 $33 = $15;
 $34 = ($33|0)!=(0);
 $or$cond = $32 & $34;
 if ($or$cond) {
  $35 = $17;
  $36 = $23;
  $37 = (($36) + ($35<<3)|0);
  $38 = $37;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = $40 & 65535;
  $45 = $17;
  $46 = $23;
  $47 = (($46) + ($45<<3)|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_bitshift64Lshr(($50|0),($53|0),16)|0);
  $55 = tempRet0;
  $56 = $54 & 65535;
  $57 = $44 | $56;
  $58 = $17;
  $59 = $23;
  $60 = (($59) + ($58<<3)|0);
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 65535;
  $68 = $57 | $67;
  $69 = $17;
  $70 = $23;
  $71 = (($70) + ($69<<3)|0);
  $72 = $71;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (_bitshift64Lshr(($74|0),($77|0),48)|0);
  $79 = tempRet0;
  $80 = $68 | $78;
  $81 = $80 & 1;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $23;
   $84 = $17;
   $85 = $18;
   $86 = $19;
   $87 = $20;
   $88 = $21;
   $89 = $22;
   $90 = $24;
   $91 = $25;
   _insertEmphasisEnd($83,$84,0,1,$85,$86,$87,$88,$89,$90,$91);
  }
 }
 $92 = $14;
 $93 = ($92|0)!=(0);
 $94 = $16;
 $95 = ($94|0)!=(0);
 $or$cond3 = $93 & $95;
 L5: do {
  if ($or$cond3) {
   $27 = 0;
   while(1) {
    $96 = $27;
    $97 = ($96|0)<(10);
    if (!($97)) {
     break;
    }
    $98 = $23;
    $99 = $17;
    $100 = $27;
    $101 = HEAP32[3726]|0;
    $102 = (($101) + ($100<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_endCount($98,$99,$103)|0);
    $105 = $27;
    $106 = (($26) + ($105<<2)|0);
    HEAP32[$106>>2] = $104;
    $107 = $27;
    $108 = (($107) + 1)|0;
    $27 = $108;
   }
   $27 = 0;
   while(1) {
    $109 = $27;
    $110 = ($109|0)<(10);
    if (!($110)) {
     break L5;
    }
    $29 = -1;
    $28 = 0;
    while(1) {
     $111 = $28;
     $112 = ($111|0)<(10);
     if (!($112)) {
      break;
     }
     $113 = $28;
     $114 = (($26) + ($113<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)>(0);
     do {
      if ($116) {
       $117 = $29;
       $118 = ($117|0)<(0);
       if (!($118)) {
        $119 = $28;
        $120 = (($26) + ($119<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = $29;
        $123 = (($26) + ($122<<2)|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ($121|0)<($124|0);
        if (!($125)) {
         break;
        }
       }
       $126 = $28;
       $29 = $126;
      }
     } while(0);
     $127 = $28;
     $128 = (($127) + 1)|0;
     $28 = $128;
    }
    $129 = $29;
    $130 = ($129|0)<(0);
    if ($130) {
     break L5;
    }
    $131 = $29;
    $132 = (($26) + ($131<<2)|0);
    HEAP32[$132>>2] = 0;
    $133 = $23;
    $134 = $17;
    $135 = $29;
    $136 = (1 + ($135))|0;
    $137 = $29;
    $138 = HEAP32[3726]|0;
    $139 = (($138) + ($137<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $18;
    $142 = $19;
    $143 = $20;
    $144 = $21;
    $145 = $22;
    $146 = $24;
    $147 = $25;
    _insertEmphasisEnd($133,$134,$136,$140,$141,$142,$143,$144,$145,$146,$147);
    $148 = $27;
    $149 = (($148) + 1)|0;
    $27 = $149;
   }
  }
 } while(0);
 $150 = $13;
 $151 = ($150|0)!=(0);
 $152 = $16;
 $153 = ($152|0)!=(0);
 $or$cond5 = $151 & $153;
 L26: do {
  if ($or$cond5) {
   $27 = 0;
   while(1) {
    $154 = $27;
    $155 = ($154|0)<(10);
    if (!($155)) {
     break;
    }
    $156 = $23;
    $157 = $17;
    $158 = $27;
    $159 = HEAP32[3726]|0;
    $160 = (($159) + ($158<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $18;
    $163 = $20;
    $164 = (_beginCount($156,$157,$161,$162,$163)|0);
    $165 = $27;
    $166 = (($26) + ($165<<2)|0);
    HEAP32[$166>>2] = $164;
    $167 = $27;
    $168 = (($167) + 1)|0;
    $27 = $168;
   }
   $27 = 9;
   while(1) {
    $169 = $27;
    $170 = ($169|0)>=(0);
    if (!($170)) {
     break;
    }
    $30 = 9;
    $28 = 9;
    while(1) {
     $171 = $28;
     $172 = ($171|0)>=(0);
     $173 = $30;
     $174 = (($26) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     if (!($172)) {
      break;
     }
     $176 = $28;
     $177 = (($26) + ($176<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($175|0)<($178|0);
     if ($179) {
      $180 = $28;
      $30 = $180;
     }
     $181 = $28;
     $182 = (($181) + -1)|0;
     $28 = $182;
    }
    $183 = ($175|0)!=(0);
    if (!($183)) {
     break;
    }
    $184 = $30;
    $185 = (($26) + ($184<<2)|0);
    HEAP32[$185>>2] = 0;
    $186 = $23;
    $187 = $17;
    $188 = $30;
    $189 = (1 + ($188))|0;
    $190 = $30;
    $191 = HEAP32[3726]|0;
    $192 = (($191) + ($190<<2)|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $18;
    $195 = $19;
    $196 = $20;
    $197 = $21;
    $198 = $22;
    $199 = $24;
    $200 = $25;
    _insertEmphasisBegin($186,$187,$189,$193,$194,$195,$196,$197,$198,$199,$200);
    $201 = $27;
    $202 = (($201) + -1)|0;
    $27 = $202;
   }
   $27 = 9;
   while(1) {
    $203 = $27;
    $204 = ($203|0)>=(0);
    if (!($204)) {
     break L26;
    }
    $205 = $17;
    $206 = $23;
    $207 = (($206) + ($205<<3)|0);
    $208 = $207;
    $209 = $208;
    $210 = HEAP32[$209>>2]|0;
    $211 = (($208) + 4)|0;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = $210 & 65535;
    $215 = $17;
    $216 = $23;
    $217 = (($216) + ($215<<3)|0);
    $218 = $217;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = (_bitshift64Lshr(($220|0),($223|0),16)|0);
    $225 = tempRet0;
    $226 = $224 & 65535;
    $227 = $214 | $226;
    $228 = $17;
    $229 = $23;
    $230 = (($229) + ($228<<3)|0);
    $231 = $230;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & 65535;
    $238 = $227 | $237;
    $239 = $17;
    $240 = $23;
    $241 = (($240) + ($239<<3)|0);
    $242 = $241;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_bitshift64Lshr(($244|0),($247|0),48)|0);
    $249 = tempRet0;
    $250 = $238 | $248;
    $251 = $27;
    $252 = HEAP32[3726]|0;
    $253 = (($252) + ($251<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = $250 & $254;
    $256 = ($255|0)!=(0);
    if ($256) {
     $257 = $23;
     $258 = $17;
     $259 = $27;
     $260 = (1 + ($259))|0;
     $261 = $27;
     $262 = HEAP32[3726]|0;
     $263 = (($262) + ($261<<2)|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $18;
     $266 = $19;
     $267 = $20;
     $268 = $21;
     $269 = $22;
     $270 = $24;
     $271 = $25;
     _insertEmphasisSymbol($257,$258,$260,$264,$265,$266,$267,$268,$269,$270,$271);
    }
    $272 = $27;
    $273 = (($272) + -1)|0;
    $27 = $273;
   }
  }
 } while(0);
 $274 = $13;
 $275 = ($274|0)!=(0);
 $276 = $15;
 $277 = ($276|0)!=(0);
 $or$cond7 = $275 & $277;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $278 = $17;
 $279 = $23;
 $280 = (($279) + ($278<<3)|0);
 $281 = $280;
 $282 = $281;
 $283 = HEAP32[$282>>2]|0;
 $284 = (($281) + 4)|0;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = $283 & 65535;
 $288 = $17;
 $289 = $23;
 $290 = (($289) + ($288<<3)|0);
 $291 = $290;
 $292 = $291;
 $293 = HEAP32[$292>>2]|0;
 $294 = (($291) + 4)|0;
 $295 = $294;
 $296 = HEAP32[$295>>2]|0;
 $297 = (_bitshift64Lshr(($293|0),($296|0),16)|0);
 $298 = tempRet0;
 $299 = $297 & 65535;
 $300 = $287 | $299;
 $301 = $17;
 $302 = $23;
 $303 = (($302) + ($301<<3)|0);
 $304 = $303;
 $305 = $304;
 $306 = HEAP32[$305>>2]|0;
 $307 = (($304) + 4)|0;
 $308 = $307;
 $309 = HEAP32[$308>>2]|0;
 $310 = $309 & 65535;
 $311 = $300 | $310;
 $312 = $17;
 $313 = $23;
 $314 = (($313) + ($312<<3)|0);
 $315 = $314;
 $316 = $315;
 $317 = HEAP32[$316>>2]|0;
 $318 = (($315) + 4)|0;
 $319 = $318;
 $320 = HEAP32[$319>>2]|0;
 $321 = (_bitshift64Lshr(($317|0),($320|0),48)|0);
 $322 = tempRet0;
 $323 = $311 | $321;
 $324 = $323 & 1;
 $325 = ($324|0)!=(0);
 if (!($325)) {
  STACKTOP = sp;return;
 }
 $326 = $23;
 $327 = $17;
 $328 = $18;
 $329 = $19;
 $330 = $20;
 $331 = $21;
 $332 = $22;
 $333 = $24;
 $334 = $25;
 _insertEmphasisBegin($326,$327,0,1,$328,$329,$330,$331,$332,$333,$334);
 $335 = $23;
 $336 = $17;
 $337 = $18;
 $338 = $19;
 $339 = $20;
 $340 = $21;
 $341 = $22;
 $342 = $24;
 $343 = $25;
 _insertEmphasisSymbol($335,$336,0,1,$337,$338,$339,$340,$341,$342,$343);
 STACKTOP = sp;return;
}
function _brailleIndicatorDefined($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  $10 = $5;
  $11 = ((($10)) + 21088|0);
  $12 = (($11) + ($9<<3)|0);
  $13 = $6;
  HEAP32[$13>>2] = $12;
  $3 = 1;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _insertLetterSign($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $19 = sp;
 $20 = sp + 12|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $22 = $19;
 $23 = $22;
 HEAP32[$23>>2] = $8;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $9;
 $26 = $11;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $11;
 $30 = (_brailleIndicatorDefined($28,$29,$20)|0);
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $16;
   $33 = ($32|0)==(95);
   if ($33) {
    $34 = HEAP32[$20>>2]|0;
    $35 = ((($34)) + 38|0);
    $36 = HEAP32[$20>>2]|0;
    $37 = ((($36)) + 36|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38 << 16 >> 16;
    $40 = $12;
    $41 = $13;
    $42 = $14;
    $43 = $15;
    $44 = $17;
    $45 = $18;
    $46 = (_for_updatePositions($35,0,$39,0,$40,$41,$42,$43,$44,$45)|0);
    $47 = ($46|0)!=(0);
    if ($47) {
     break;
    }
    $10 = 0;
    $165 = $10;
    STACKTOP = sp;return ($165|0);
   }
   $48 = $13;
   $49 = $12;
   $50 = $11;
   $51 = (_checkAttr_safe($48,$49,2,0,0,$50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $19;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $55 & 2;
    $60 = ($59|0)!=(0);
    $61 = (0)!=(0);
    $62 = $60 | $61;
    if (!($62)) {
     $63 = $13;
     $64 = $12;
     $65 = (($64) + 1)|0;
     $66 = $11;
     $67 = (_checkAttr_safe($63,$65,2,0,0,$66)|0);
     $68 = ($67|0)!=(0);
     if ($68) {
      $69 = $19;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($69) + 4)|0;
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      $75 = $71 & 4;
      $76 = ($75|0)!=(0);
      $77 = (0)!=(0);
      $78 = $76 | $77;
      if (!($78)) {
       break;
      }
     }
     $79 = $12;
     $80 = ($79|0)>(0);
     L13: do {
      if ($80) {
       $21 = 0;
       while(1) {
        $81 = $21;
        $82 = $11;
        $83 = ((($82)) + 1204|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($81|0)<($84|0);
        if (!($85)) {
         break L13;
        }
        $86 = $12;
        $87 = (($86) - 1)|0;
        $88 = $13;
        $89 = ((($88)) + 4|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = (($90) + ($87<<1)|0);
        $92 = HEAP16[$91>>1]|0;
        $93 = $92&65535;
        $94 = $21;
        $95 = $11;
        $96 = ((($95)) + 1076|0);
        $97 = (($96) + ($94<<1)|0);
        $98 = HEAP16[$97>>1]|0;
        $99 = $98&65535;
        $100 = ($93|0)==($99|0);
        if ($100) {
         break;
        }
        $101 = $21;
        $102 = (($101) + 1)|0;
        $21 = $102;
       }
       $10 = 1;
       $165 = $10;
       STACKTOP = sp;return ($165|0);
      }
     } while(0);
     $21 = 0;
     while(1) {
      $103 = $21;
      $104 = $11;
      $105 = ((($104)) + 1720|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($103|0)<($106|0);
      $108 = $12;
      if (!($107)) {
       break;
      }
      $109 = $13;
      $110 = ((($109)) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($111) + ($108<<1)|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = $21;
      $116 = $11;
      $117 = ((($116)) + 1208|0);
      $118 = (($117) + ($115<<1)|0);
      $119 = HEAP16[$118>>1]|0;
      $120 = $119&65535;
      $121 = ($114|0)==($120|0);
      if ($121) {
       label = 18;
       break;
      }
      $122 = $21;
      $123 = (($122) + 1)|0;
      $21 = $123;
     }
     if ((label|0) == 18) {
      $10 = 1;
      $165 = $10;
      STACKTOP = sp;return ($165|0);
     }
     $124 = (($108) + 1)|0;
     $125 = $13;
     $126 = ((($125)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($124|0)<($127|0);
     L30: do {
      if ($128) {
       $21 = 0;
       while(1) {
        $129 = $21;
        $130 = $11;
        $131 = ((($130)) + 1852|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ($129|0)<($132|0);
        if (!($133)) {
         break L30;
        }
        $134 = $12;
        $135 = (($134) + 1)|0;
        $136 = $13;
        $137 = ((($136)) + 4|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($138) + ($135<<1)|0);
        $140 = HEAP16[$139>>1]|0;
        $141 = $140&65535;
        $142 = $21;
        $143 = $11;
        $144 = ((($143)) + 1724|0);
        $145 = (($144) + ($142<<1)|0);
        $146 = HEAP16[$145>>1]|0;
        $147 = $146&65535;
        $148 = ($141|0)==($147|0);
        if ($148) {
         break;
        }
        $149 = $21;
        $150 = (($149) + 1)|0;
        $21 = $150;
       }
       $10 = 1;
       $165 = $10;
       STACKTOP = sp;return ($165|0);
      }
     } while(0);
     $151 = HEAP32[$20>>2]|0;
     $152 = ((($151)) + 38|0);
     $153 = HEAP32[$20>>2]|0;
     $154 = ((($153)) + 36|0);
     $155 = HEAP16[$154>>1]|0;
     $156 = $155 << 16 >> 16;
     $157 = $12;
     $158 = $13;
     $159 = $14;
     $160 = $15;
     $161 = $17;
     $162 = $18;
     $163 = (_for_updatePositions($152,0,$156,0,$157,$158,$159,$160,$161,$162)|0);
     $164 = ($163|0)!=(0);
     if (!($164)) {
      $10 = 0;
      $165 = $10;
      STACKTOP = sp;return ($165|0);
     }
    }
   }
  }
 } while(0);
 $10 = 1;
 $165 = $10;
 STACKTOP = sp;return ($165|0);
}
function _insertNumberSign($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp;
 $20 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $21 = $19;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $9;
 $25 = $11;
 $26 = ((($25)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $11;
 $29 = (_brailleIndicatorDefined($27,$28,$20)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $13;
   $32 = $12;
   $33 = $11;
   $34 = (_checkAttr_safe($31,$32,4,0,0,$33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $16;
    $37 = ($36|0)==(83);
    if (!($37)) {
     $38 = $19;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $40 & 4;
     $45 = ($44|0)==(0);
     $46 = (0)==(0);
     $47 = $45 & $46;
     $48 = $16;
     $49 = ($48|0)!=(106);
     $or$cond = $47 & $49;
     if (!($or$cond)) {
      break;
     }
    }
    $50 = HEAP32[$20>>2]|0;
    $51 = ((($50)) + 38|0);
    $52 = HEAP32[$20>>2]|0;
    $53 = ((($52)) + 36|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = $12;
    $57 = $13;
    $58 = $14;
    $59 = $15;
    $60 = $17;
    $61 = $18;
    $62 = (_for_updatePositions($51,0,$55,0,$56,$57,$58,$59,$60,$61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     $10 = 0;
     $64 = $10;
     STACKTOP = sp;return ($64|0);
    }
   }
  }
 } while(0);
 $10 = 1;
 $64 = $10;
 STACKTOP = sp;return ($64|0);
}
function _checkNumericMode($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $20 = $9;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $9;
 $24 = (_brailleIndicatorDefined($22,$23,$19)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = $10;
 $30 = $11;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29<<1)|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $9;
 if ($28) {
  $101 = (_checkAttr($34,1140850948,0,0,$35)|0);
  $102 = ($101|0)!=(0);
  if ($102) {
   STACKTOP = sp;return;
  }
  $103 = $17;
  HEAP32[$103>>2] = 0;
  $104 = $9;
  $105 = ((($104)) + 48|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $9;
  $108 = (_brailleIndicatorDefined($106,$107,$19)|0);
  $109 = ($108|0)!=(0);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $10;
  $111 = $11;
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + ($110<<1)|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $9;
  $117 = (_checkAttr($115,134217728,0,0,$116)|0);
  $118 = ($117|0)!=(0);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = HEAP32[$19>>2]|0;
  $120 = ((($119)) + 38|0);
  $121 = HEAP32[$19>>2]|0;
  $122 = ((($121)) + 36|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123 << 16 >> 16;
  $125 = $10;
  $126 = $11;
  $127 = $12;
  $128 = $13;
  $129 = $14;
  $130 = $15;
  (_for_updatePositions($120,0,$124,0,$125,$126,$127,$128,$129,$130)|0);
  STACKTOP = sp;return;
 }
 $36 = (_checkAttr($34,260,0,0,$35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $17;
  HEAP32[$38>>2] = 1;
  $39 = $16;
  HEAP32[$39>>2] = 1;
  $40 = HEAP32[$19>>2]|0;
  $41 = ((($40)) + 38|0);
  $42 = HEAP32[$19>>2]|0;
  $43 = ((($42)) + 36|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $10;
  $47 = $11;
  $48 = $12;
  $49 = $13;
  $50 = $14;
  $51 = $15;
  (_for_updatePositions($41,0,$45,0,$46,$47,$48,$49,$50,$51)|0);
  STACKTOP = sp;return;
 }
 $52 = $10;
 $53 = $11;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($52<<1)|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $9;
 $59 = (_checkAttr($57,67108864,0,0,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $10;
 $62 = (($61) + 1)|0;
 $18 = $62;
 while(1) {
  $63 = $18;
  $64 = $11;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)<($66|0);
  if (!($67)) {
   label = 16;
   break;
  }
  $68 = $18;
  $69 = $11;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($68<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $9;
  $75 = (_checkAttr($73,260,0,0,$74)|0);
  $76 = ($75|0)!=(0);
  if ($76) {
   label = 9;
   break;
  }
  $90 = $18;
  $91 = $11;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($90<<1)|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $9;
  $97 = (_checkAttr($95,67108864,0,0,$96)|0);
  $98 = ($97|0)!=(0);
  if (!($98)) {
   label = 16;
   break;
  }
  $99 = $18;
  $100 = (($99) + 1)|0;
  $18 = $100;
 }
 if ((label|0) == 9) {
  $77 = $17;
  HEAP32[$77>>2] = 1;
  $78 = HEAP32[$19>>2]|0;
  $79 = ((($78)) + 38|0);
  $80 = HEAP32[$19>>2]|0;
  $81 = ((($80)) + 36|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $10;
  $85 = $11;
  $86 = $12;
  $87 = $13;
  $88 = $14;
  $89 = $15;
  (_for_updatePositions($79,0,$83,0,$84,$85,$86,$87,$88,$89)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _doNocont($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $10;
 $18 = HEAP32[$17>>2]|0;
 $19 = $13;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $9;
 $25 = (_checkAttr($23,1,0,0,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $15;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $12;
   $31 = $30 & 1;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $33 = $14;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $14;
     $38 = HEAP32[$37>>2]|0;
     $39 = $10;
     HEAP32[$39>>2] = $38;
     $40 = $14;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $11;
     $44 = ((($43)) + 12|0);
     HEAP32[$44>>2] = $42;
    } else {
     $45 = $10;
     HEAP32[$45>>2] = 0;
     $46 = $11;
     $47 = ((($46)) + 12|0);
     HEAP32[$47>>2] = 0;
    }
    $48 = $14;
    $49 = ((($48)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $16;
    HEAP32[$51>>2] = $50;
    $52 = $15;
    HEAP32[$52>>2] = 1;
    $8 = 1;
    $53 = $8;
    STACKTOP = sp;return ($53|0);
   }
  }
 }
 $8 = 1;
 $53 = $8;
 STACKTOP = sp;return ($53|0);
}
function _putCharacters($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0;
 while(1) {
  $24 = $23;
  $25 = $13;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   label = 6;
   break;
  }
  $27 = $23;
  $28 = $12;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $14;
  $32 = $15;
  $33 = $16;
  $34 = $17;
  $35 = $18;
  $36 = $19;
  $37 = $20;
  $38 = $21;
  $39 = $22;
  $40 = (_putCharacter($30,$31,$32,$33,$34,$35,$36,$37,$38,$39)|0);
  $41 = ($40|0)!=(0);
  if (!($41)) {
   label = 4;
   break;
  }
  $42 = $23;
  $43 = (($42) + 1)|0;
  $23 = $43;
 }
 if ((label|0) == 4) {
  $11 = 0;
  $44 = $11;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 6) {
  $11 = 1;
  $44 = $11;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _compareChars($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $8;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 $11 = 0;
 while(1) {
  $14 = $11;
  $15 = $8;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $11;
  $18 = $6;
  $19 = (($18) + ($17<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $9;
  $22 = $10;
  $23 = (_findCharOrDots($20,$21,$22)|0);
  $24 = ((($23)) + 28|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $11;
  $28 = $7;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $9;
  $32 = $10;
  $33 = (_findCharOrDots($30,$31,$32)|0);
  $34 = ((($33)) + 28|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($26|0)!=($36|0);
  if ($37) {
   label = 6;
   break;
  }
  $38 = $11;
  $39 = (($38) + 1)|0;
  $11 = $39;
 }
 if ((label|0) == 6) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 8) {
  $5 = 1;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _checkAttr_safe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $6 = $0;
 $7 = $1;
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $3;
 $9 = $4;
 $10 = $5;
 $15 = $7;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)<($18|0);
 if (!($19)) {
  $35 = 0;
  STACKTOP = sp;return ($35|0);
 }
 $20 = $7;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $8;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $9;
 $33 = $10;
 $34 = (_checkAttr($25,$28,$31,$32,$33)|0);
 $35 = $34;
 STACKTOP = sp;return ($35|0);
}
function _insertEmphasisEnd($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $22 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $23 = $12;
 $24 = $11;
 $25 = (($24) + ($23<<3)|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (_bitshift64Lshr(($28|0),($31|0),16)|0);
 $33 = tempRet0;
 $34 = $32 & 65535;
 $35 = $14;
 $36 = $34 & $35;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $12;
 $39 = $11;
 $40 = (($39) + ($38<<3)|0);
 $41 = $40;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & 65535;
 $48 = $14;
 $49 = $47 & $48;
 $50 = ($49|0)!=(0);
 $51 = $13;
 $52 = $15;
 $53 = ((($52)) + 616|0);
 $54 = (($53) + (($51*36)|0)|0);
 if ($50) {
  $55 = ((($54)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $15;
  $58 = (_brailleIndicatorDefined($56,$57,$22)|0);
  $59 = ($58|0)!=(0);
  if (!($59)) {
   STACKTOP = sp;return;
  }
  $60 = HEAP32[$22>>2]|0;
  $61 = ((($60)) + 38|0);
  $62 = HEAP32[$22>>2]|0;
  $63 = ((($62)) + 36|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $16;
  $67 = $17;
  $68 = $18;
  $69 = $19;
  $70 = $20;
  $71 = $21;
  (_for_updatePositions($61,0,$65,-1,$66,$67,$68,$69,$70,$71)|0);
  STACKTOP = sp;return;
 }
 $72 = ((($54)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $15;
 $75 = (_brailleIndicatorDefined($73,$74,$22)|0);
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = HEAP32[$22>>2]|0;
  $78 = ((($77)) + 38|0);
  $79 = HEAP32[$22>>2]|0;
  $80 = ((($79)) + 36|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = $16;
  $84 = $17;
  $85 = $18;
  $86 = $19;
  $87 = $20;
  $88 = $21;
  (_for_updatePositions($78,0,$82,-1,$83,$84,$85,$86,$87,$88)|0);
  STACKTOP = sp;return;
 }
 $89 = $13;
 $90 = $15;
 $91 = ((($90)) + 616|0);
 $92 = (($91) + (($89*36)|0)|0);
 $93 = ((($92)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $15;
 $96 = (_brailleIndicatorDefined($94,$95,$22)|0);
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = HEAP32[$22>>2]|0;
  $99 = ((($98)) + 38|0);
  $100 = HEAP32[$22>>2]|0;
  $101 = ((($100)) + 36|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = $16;
  $105 = $17;
  $106 = $18;
  $107 = $19;
  $108 = $20;
  $109 = $21;
  (_for_updatePositions($99,0,$103,-1,$104,$105,$106,$107,$108,$109)|0);
  STACKTOP = sp;return;
 }
 $110 = $13;
 $111 = $15;
 $112 = ((($111)) + 616|0);
 $113 = (($112) + (($110*36)|0)|0);
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $15;
 $117 = (_brailleIndicatorDefined($115,$116,$22)|0);
 $118 = ($117|0)!=(0);
 if (!($118)) {
  STACKTOP = sp;return;
 }
 $119 = HEAP32[$22>>2]|0;
 $120 = ((($119)) + 38|0);
 $121 = HEAP32[$22>>2]|0;
 $122 = ((($121)) + 36|0);
 $123 = HEAP16[$122>>1]|0;
 $124 = $123 << 16 >> 16;
 $125 = $16;
 $126 = $17;
 $127 = $18;
 $128 = $19;
 $129 = $20;
 $130 = $21;
 (_for_updatePositions($120,0,$124,0,$125,$126,$127,$128,$129,$130)|0);
 STACKTOP = sp;return;
}
function _endCount($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 1;
 $9 = $5;
 $10 = $4;
 $11 = (($10) + ($9<<3)|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bitshift64Lshr(($14|0),($17|0),16)|0);
 $19 = tempRet0;
 $20 = $18 & 65535;
 $21 = $6;
 $22 = $20 & $21;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $24 = $5;
 $25 = (($24) - 1)|0;
 $7 = $25;
 while(1) {
  $26 = $7;
  $27 = ($26|0)>=(0);
  if (!($27)) {
   break;
  }
  $28 = $7;
  $29 = $4;
  $30 = (($29) + ($28<<3)|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $33 & 65535;
  $38 = $6;
  $39 = $37 & $38;
  $40 = ($39|0)!=(0);
  if ($40) {
   break;
  }
  $41 = $7;
  $42 = $4;
  $43 = (($42) + ($41<<3)|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 & 65535;
  $51 = $6;
  $52 = $50 & $51;
  $53 = ($52|0)!=(0);
  if ($53) {
   break;
  }
  $54 = $8;
  $55 = (($54) + 1)|0;
  $8 = $55;
  $56 = $7;
  $57 = (($56) + -1)|0;
  $7 = $57;
 }
 $58 = $8;
 $3 = $58;
 $59 = $3;
 STACKTOP = sp;return ($59|0);
}
function _beginCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = $6;
 $17 = (($16) + ($15<<3)|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 & 65535;
 $25 = $8;
 $26 = $24 & $25;
 $27 = ($26|0)!=(0);
 if ($27) {
  $12 = 1;
  $28 = $7;
  $29 = (($28) + 1)|0;
  $11 = $29;
  while(1) {
   $30 = $11;
   $31 = $10;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30|0)<($33|0);
   if (!($34)) {
    break;
   }
   $35 = $11;
   $36 = $6;
   $37 = (($36) + ($35<<3)|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (_bitshift64Lshr(($40|0),($43|0),16)|0);
   $45 = tempRet0;
   $46 = $44 & 65535;
   $47 = $8;
   $48 = $46 & $47;
   $49 = ($48|0)!=(0);
   if ($49) {
    break;
   }
   $50 = $12;
   $51 = (($50) + 1)|0;
   $12 = $51;
   $52 = $11;
   $53 = (($52) + 1)|0;
   $11 = $53;
  }
  $54 = $12;
  $5 = $54;
  $104 = $5;
  STACKTOP = sp;return ($104|0);
 }
 $55 = $7;
 $56 = $6;
 $57 = (($56) + ($55<<3)|0);
 $58 = $57;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & 65535;
 $65 = $8;
 $66 = $64 & $65;
 $67 = ($66|0)!=(0);
 if (!($67)) {
  $5 = 0;
  $104 = $5;
  STACKTOP = sp;return ($104|0);
 }
 $14 = 1;
 $68 = $7;
 $69 = (($68) + 1)|0;
 $13 = $69;
 while(1) {
  $70 = $13;
  $71 = $10;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)<($73|0);
  if (!($74)) {
   break;
  }
  $75 = $13;
  $76 = $6;
  $77 = (($76) + ($75<<3)|0);
  $78 = $77;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (_bitshift64Lshr(($80|0),($83|0),16)|0);
  $85 = tempRet0;
  $86 = $84 & 65535;
  $87 = $8;
  $88 = $86 & $87;
  $89 = ($88|0)!=(0);
  if ($89) {
   break;
  }
  $90 = $13;
  $91 = $10;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($90<<1)|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $9;
  $97 = (_checkAttr($95,8193,0,0,$96)|0);
  $98 = ($97|0)!=(0);
  if ($98) {
   break;
  }
  $99 = $14;
  $100 = (($99) + 1)|0;
  $14 = $100;
  $101 = $13;
  $102 = (($101) + 1)|0;
  $13 = $102;
 }
 $103 = $14;
 $5 = $103;
 $104 = $5;
 STACKTOP = sp;return ($104|0);
}
function _insertEmphasisBegin($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $22 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $23 = $12;
 $24 = $11;
 $25 = (($24) + ($23<<3)|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $28 & 65535;
 $33 = $14;
 $34 = $32 & $33;
 $35 = ($34|0)!=(0);
 do {
  if ($35) {
   $36 = $13;
   $37 = $15;
   $38 = ((($37)) + 616|0);
   $39 = (($38) + (($36*36)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $15;
   $42 = (_brailleIndicatorDefined($40,$41,$22)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = HEAP32[$22>>2]|0;
    $45 = ((($44)) + 38|0);
    $46 = HEAP32[$22>>2]|0;
    $47 = ((($46)) + 36|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48 << 16 >> 16;
    $50 = $16;
    $51 = $17;
    $52 = $18;
    $53 = $19;
    $54 = $20;
    $55 = $21;
    (_for_updatePositions($45,0,$49,0,$50,$51,$52,$53,$54,$55)|0);
    break;
   }
   $56 = $13;
   $57 = $15;
   $58 = ((($57)) + 616|0);
   $59 = (($58) + (($56*36)|0)|0);
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $15;
   $63 = (_brailleIndicatorDefined($61,$62,$22)|0);
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = HEAP32[$22>>2]|0;
    $66 = ((($65)) + 38|0);
    $67 = HEAP32[$22>>2]|0;
    $68 = ((($67)) + 36|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69 << 16 >> 16;
    $71 = $16;
    $72 = $17;
    $73 = $18;
    $74 = $19;
    $75 = $20;
    $76 = $21;
    (_for_updatePositions($66,0,$70,0,$71,$72,$73,$74,$75,$76)|0);
   }
  }
 } while(0);
 $77 = $12;
 $78 = $11;
 $79 = (($78) + ($77<<3)|0);
 $80 = $79;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 & 65535;
 $87 = $14;
 $88 = $86 & $87;
 $89 = ($88|0)!=(0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $12;
 $91 = $11;
 $92 = (($91) + ($90<<3)|0);
 $93 = $92;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (_bitshift64Lshr(($95|0),($98|0),16)|0);
 $100 = tempRet0;
 $101 = $99 & 65535;
 $102 = $14;
 $103 = $101 & $102;
 $104 = ($103|0)!=(0);
 if ($104) {
  STACKTOP = sp;return;
 }
 $105 = $13;
 $106 = $15;
 $107 = ((($106)) + 616|0);
 $108 = (($107) + (($105*36)|0)|0);
 $109 = ((($108)) + 24|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $15;
 $112 = (_brailleIndicatorDefined($110,$111,$22)|0);
 $113 = ($112|0)!=(0);
 if (!($113)) {
  STACKTOP = sp;return;
 }
 $114 = HEAP32[$22>>2]|0;
 $115 = ((($114)) + 38|0);
 $116 = HEAP32[$22>>2]|0;
 $117 = ((($116)) + 36|0);
 $118 = HEAP16[$117>>1]|0;
 $119 = $118 << 16 >> 16;
 $120 = $16;
 $121 = $17;
 $122 = $18;
 $123 = $19;
 $124 = $20;
 $125 = $21;
 (_for_updatePositions($115,0,$119,0,$120,$121,$122,$123,$124,$125)|0);
 STACKTOP = sp;return;
}
function _insertEmphasisSymbol($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $22 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $23 = $12;
 $24 = $11;
 $25 = (($24) + ($23<<3)|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (_bitshift64Lshr(($28|0),($31|0),48)|0);
 $33 = tempRet0;
 $34 = $14;
 $35 = $32 & $34;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $13;
 $38 = $15;
 $39 = ((($38)) + 616|0);
 $40 = (($39) + (($37*36)|0)|0);
 $41 = ((($40)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $15;
 $44 = (_brailleIndicatorDefined($42,$43,$22)|0);
 $45 = ($44|0)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$22>>2]|0;
 $47 = ((($46)) + 38|0);
 $48 = HEAP32[$22>>2]|0;
 $49 = ((($48)) + 36|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50 << 16 >> 16;
 $52 = $16;
 $53 = $17;
 $54 = $18;
 $55 = $19;
 $56 = $20;
 $57 = $21;
 (_for_updatePositions($47,0,$51,0,$52,$53,$54,$55,$56,$57)|0);
 STACKTOP = sp;return;
}
function _validMatch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = $15;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $17 = 0;
 $22 = $12;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 $24 = $8;
 $16 = $24;
 while(1) {
  $25 = $16;
  $26 = $8;
  $27 = $12;
  $28 = (($26) + ($27))|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   label = 24;
   break;
  }
  $30 = $16;
  $31 = $9;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($36|0)==(65535);
  $38 = $16;
  if ($37) {
   label = 6;
   break;
  }
  $43 = $9;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($38<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $7;
  $49 = (_findCharOrDots($47,0,$48)|0);
  $13 = $49;
  $50 = $16;
  $51 = $8;
  $52 = ($50|0)==($51|0);
  if ($52) {
   $53 = $13;
   $54 = ((($53)) + 16|0);
   $55 = $54;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = $15;
   $62 = $61;
   HEAP32[$62>>2] = $57;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = $60;
  }
  $65 = $17;
  $66 = (($65) + 1)|0;
  $17 = $66;
  $67 = $11;
  $68 = ((($67)) + 38|0);
  $69 = (($68) + ($65<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $7;
  $72 = (_findCharOrDots($70,0,$71)|0);
  $14 = $72;
  $73 = $13;
  $74 = ((($73)) + 28|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = $75&65535;
  $77 = $14;
  $78 = ((($77)) + 28|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = ($76|0)!=($80|0);
  if ($81) {
   label = 12;
   break;
  }
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = $8;
   $85 = $10;
   $86 = (($85) + ($84<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   $89 = $88 & 32768;
   $90 = ($89|0)==(0);
   if ($90) {
    $91 = $16;
    $92 = $10;
    $93 = (($92) + ($91<<1)|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $8;
    $97 = $10;
    $98 = (($97) + ($96<<1)|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99&65535;
    $101 = $95 | $100;
    $102 = $8;
    $103 = $10;
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&65535;
    $107 = ($101|0)!=($106|0);
    if ($107) {
     label = 16;
     break;
    }
   }
  }
  $108 = $13;
  $109 = ((($108)) + 16|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)!=(2);
  $117 = ($115|0)!=(0);
  $118 = $116 | $117;
  if ($118) {
   $119 = $16;
   $120 = $8;
   $121 = (($120) + 1)|0;
   $122 = ($119|0)!=($121|0);
   if ($122) {
    $123 = $15;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($123) + 4)|0;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = $125 & 2;
    $130 = ($129|0)!=(0);
    $131 = (0)!=(0);
    $132 = $130 | $131;
    if ($132) {
     $133 = $13;
     $134 = ((($133)) + 16|0);
     $135 = $134;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($135) + 4)|0;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = $137 & 2;
     $142 = ($141|0)!=(0);
     $143 = (0)!=(0);
     $144 = $142 | $143;
     if ($144) {
      $145 = $13;
      $146 = ((($145)) + 16|0);
      $147 = $146;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149 & 50;
      $154 = $15;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = (($154) + 4)|0;
      $158 = $157;
      $159 = HEAP32[$158>>2]|0;
      $160 = $156 & 50;
      $161 = ($153|0)!=($160|0);
      $162 = (0)!=(0);
      $163 = $161 | $162;
      if ($163) {
       label = 22;
       break;
      }
     }
    }
   }
  }
  $164 = $13;
  $165 = ((($164)) + 16|0);
  $166 = $165;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $15;
  $173 = $172;
  HEAP32[$173>>2] = $168;
  $174 = (($172) + 4)|0;
  $175 = $174;
  HEAP32[$175>>2] = $171;
  $176 = $16;
  $177 = (($176) + 1)|0;
  $16 = $177;
 }
 if ((label|0) == 6) {
  $39 = $8;
  $40 = ($38|0)==($39|0);
  $41 = $12;
  $42 = ($41|0)==(1);
  $or$cond = $40 & $42;
  if ($or$cond) {
   $6 = 1;
   $178 = $6;
   STACKTOP = sp;return ($178|0);
  } else {
   $6 = 0;
   $178 = $6;
   STACKTOP = sp;return ($178|0);
  }
 }
 else if ((label|0) == 12) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 16) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 22) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 24) {
  $6 = 1;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 return (0)|0;
}
function _setAfter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = (($13) + 2)|0;
 $15 = $8;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)<($17|0);
 if ($18) {
  $19 = $7;
  $20 = (($19) + 1)|0;
  $21 = $8;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)==(65535);
  if ($27) {
   $28 = $7;
   $29 = (($28) + 2)|0;
   $30 = $8;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $10 = $34;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $35 = $7;
  $36 = $5;
  $37 = (($35) + ($36))|0;
  $38 = $8;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $42 = $7;
   $43 = $5;
   $44 = (($42) + ($43))|0;
   $45 = $8;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $52 = $50;
  } else {
   $52 = 32;
  }
  $51 = $52&65535;
  $10 = $51;
 }
 $53 = $10;
 $54 = $6;
 $55 = (_findCharOrDots($53,0,$54)|0);
 $56 = ((($55)) + 16|0);
 $57 = $56;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $9;
 $64 = $63;
 $65 = $64;
 HEAP32[$65>>2] = $59;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 STACKTOP = sp;return;
}
function _syllableBreak($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = $6;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $9;
  $18 = $7;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $5;
  $24 = (_findCharOrDots($22,0,$23)|0);
  $25 = ((($24)) + 16|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $28 & 2;
  $33 = ($32|0)!=(0);
  $34 = (0)!=(0);
  $35 = $33 | $34;
  $36 = $9;
  if (!($35)) {
   label = 4;
   break;
  }
  $38 = (($36) + -1)|0;
  $9 = $38;
 }
 if ((label|0) == 4) {
  $37 = (($36) + 1)|0;
  $9 = $37;
 }
 $39 = $9;
 $40 = ($39|0)<(0);
 if ($40) {
  $9 = 0;
 }
 $41 = $6;
 $10 = $41;
 while(1) {
  $42 = $10;
  $43 = $7;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $10;
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $5;
  $54 = (_findCharOrDots($52,0,$53)|0);
  $55 = ((($54)) + 16|0);
  $56 = $55;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $58 & 2;
  $63 = ($62|0)!=(0);
  $64 = (0)!=(0);
  $65 = $63 | $64;
  $66 = $10;
  if (!($65)) {
   label = 11;
   break;
  }
  $68 = (($66) + 1)|0;
  $10 = $68;
 }
 if ((label|0) == 11) {
  $67 = (($66) + -1)|0;
  $10 = $67;
 }
 $69 = $10;
 $70 = $7;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69|0)==($72|0);
 if ($73) {
  $74 = $10;
  $75 = (($74) + -1)|0;
  $10 = $75;
 }
 $76 = $10;
 $77 = $9;
 $78 = (($76) - ($77))|0;
 $79 = (($78) + 1)|0;
 $11 = $79;
 $80 = $11;
 $81 = (($80) + 1)|0;
 $82 = (_calloc($81,1)|0);
 $13 = $82;
 $83 = $9;
 $84 = $7;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($83<<1)|0);
 $88 = $11;
 $89 = $13;
 $90 = $5;
 $91 = (_hyphenateWord($87,$88,$89,$90)|0);
 $92 = ($91|0)!=(0);
 if (!($92)) {
  $93 = $13;
  _free($93);
  $4 = 0;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 $94 = $6;
 $95 = $9;
 $96 = (($94) - ($95))|0;
 $97 = (($96) + 1)|0;
 $12 = $97;
 while(1) {
  $98 = $12;
  $99 = $6;
  $100 = $9;
  $101 = (($99) - ($100))|0;
  $102 = $8;
  $103 = (($101) + ($102))|0;
  $104 = ($98|0)<($103|0);
  if (!($104)) {
   label = 22;
   break;
  }
  $105 = $12;
  $106 = $13;
  $107 = (($106) + ($105)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108 << 24 >> 24;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   label = 20;
   break;
  }
  $113 = $12;
  $114 = (($113) + 1)|0;
  $12 = $114;
 }
 if ((label|0) == 20) {
  $112 = $13;
  _free($112);
  $4 = 1;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 22) {
  $115 = $13;
  _free($115);
  $4 = 0;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _isRepeatedWord($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = 1;
 while(1) {
  $18 = $9;
  $19 = $15;
  $20 = (($18) - ($19))|0;
  $21 = ($20|0)>=(0);
  if (!($21)) {
   break;
  }
  $22 = $9;
  $23 = $13;
  $24 = (($22) + ($23))|0;
  $25 = $15;
  $26 = (($24) + ($25))|0;
  $27 = (($26) - 1)|0;
  $28 = $10;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $9;
  $33 = $15;
  $34 = (($32) - ($33))|0;
  $35 = $10;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $8;
  $41 = (_checkAttr($39,2,0,0,$40)|0);
  $42 = ($41|0)!=(0);
  if (!($42)) {
   break;
  }
  $43 = $9;
  $44 = $13;
  $45 = (($43) + ($44))|0;
  $46 = $15;
  $47 = (($45) + ($46))|0;
  $48 = (($47) - 1)|0;
  $49 = $10;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $8;
  $55 = (_checkAttr($53,2,0,0,$54)|0);
  $56 = ($55|0)!=(0);
  if (!($56)) {
   break;
  }
  $57 = $15;
  $58 = (($57) + 1)|0;
  $15 = $58;
 }
 $59 = $15;
 $60 = (($59) + -1)|0;
 $15 = $60;
 while(1) {
  $61 = $15;
  $62 = ($61|0)>(0);
  if (!($62)) {
   label = 18;
   break;
  }
  $63 = $9;
  $64 = $15;
  $65 = (($63) - ($64))|0;
  $16 = $65;
  $66 = $16;
  $67 = $10;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($66<<1)|0);
  $71 = $9;
  $72 = $13;
  $73 = (($71) + ($72))|0;
  $74 = $10;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($73<<1)|0);
  $78 = $15;
  $79 = $8;
  $80 = (_compareChars($70,$77,$78,0,$79)|0);
  $81 = ($80|0)!=(0);
  if ($81) {
   break;
  }
  $102 = $15;
  $103 = (($102) + -1)|0;
  $15 = $103;
 }
 if ((label|0) == 18) {
  $7 = 0;
  $104 = $7;
  STACKTOP = sp;return ($104|0);
 }
 $82 = $11;
 $83 = (($82) - 1)|0;
 $17 = $83;
 while(1) {
  $84 = $17;
  $85 = ($84|0)>=(0);
  if (!($85)) {
   label = 16;
   break;
  }
  $86 = $17;
  $87 = $12;
  $88 = (($87) + ($86<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $16;
  $91 = ($89|0)==($90|0);
  if ($91) {
   label = 16;
   break;
  }
  $92 = $17;
  $93 = $12;
  $94 = (($93) + ($92<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $16;
  $97 = ($95|0)<($96|0);
  if ($97) {
   label = 14;
   break;
  }
  $98 = $17;
  $99 = (($98) + -1)|0;
  $17 = $99;
 }
 if ((label|0) == 14) {
  $7 = 0;
  $104 = $7;
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 16) {
  $100 = $15;
  $101 = $14;
  HEAP32[$101>>2] = $100;
  $7 = 1;
  $104 = $7;
  STACKTOP = sp;return ($104|0);
 }
 return (0)|0;
}
function _checkEmphasisChange($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $6;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12))|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = $6;
  $16 = $8;
  $17 = ((($16)) + 34|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = (($15) + ($19))|0;
  $21 = ($14|0)<($20|0);
  if (!($21)) {
   label = 9;
   break;
  }
  $22 = $9;
  $23 = $7;
  $24 = (($23) + ($22<<3)|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $27 & 65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   label = 7;
   break;
  }
  $33 = $9;
  $34 = $7;
  $35 = (($34) + ($33<<3)|0);
  $36 = $35;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (_bitshift64Lshr(($38|0),($41|0),16)|0);
  $43 = tempRet0;
  $44 = $42 & 65535;
  $45 = ($44|0)!=(0);
  if ($45) {
   label = 7;
   break;
  }
  $46 = $9;
  $47 = $7;
  $48 = (($47) + ($46<<3)|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & 65535;
  $56 = ($55|0)!=(0);
  if ($56) {
   label = 7;
   break;
  }
  $57 = $9;
  $58 = $7;
  $59 = (($58) + ($57<<3)|0);
  $60 = $59;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (_bitshift64Lshr(($62|0),($65|0),48)|0);
  $67 = tempRet0;
  $68 = ($66|0)!=(0);
  if ($68) {
   label = 7;
   break;
  }
  $69 = $9;
  $70 = (($69) + 1)|0;
  $9 = $70;
 }
 if ((label|0) == 7) {
  $4 = 1;
  $71 = $4;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 9) {
  $4 = 0;
  $71 = $4;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _onlyLettersBehind($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 8|0;
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $12 = $9;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $4;
 $16 = $9;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 & 1;
 $23 = ($22|0)!=(0);
 $24 = (0)!=(0);
 $25 = $23 | $24;
 if (!($25)) {
  $5 = 0;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 $26 = $7;
 $27 = (($26) - 2)|0;
 $10 = $27;
 while(1) {
  $28 = $10;
  $29 = ($28|0)>=(0);
  if (!($29)) {
   label = 10;
   break;
  }
  $30 = $10;
  $31 = $8;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $6;
  $37 = (_findCharOrDots($35,0,$36)|0);
  $38 = ((($37)) + 16|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = $11;
  $46 = $45;
  HEAP32[$46>>2] = $41;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $44;
  $49 = $11;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $51 & 1;
  $56 = ($55|0)!=(0);
  $57 = (0)!=(0);
  $58 = $56 | $57;
  if (!($58)) {
   break;
  }
  $69 = $10;
  $70 = (($69) + -1)|0;
  $10 = $70;
 }
 if ((label|0) == 10) {
  $5 = 1;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 $59 = $11;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & 2;
 $66 = ($65|0)!=(0);
 $67 = (0)!=(0);
 $68 = $66 | $67;
 if ($68) {
  $5 = 1;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 } else {
  $5 = 0;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _noCompbrlAhead($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $9;
 $26 = $13;
 $27 = (($25) + ($26))|0;
 $15 = $27;
 $28 = $15;
 $29 = $11;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>=($31|0);
 if ($32) {
  $7 = 1;
  $200 = $7;
  STACKTOP = sp;return ($200|0);
 }
 while(1) {
  $33 = $15;
  $34 = $11;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if ($37) {
   $38 = $15;
   $39 = $11;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $8;
   $45 = (_checkAttr($43,1,0,0,$44)|0);
   $46 = ($45|0)!=(0);
   $201 = $46;
  } else {
   $201 = 0;
  }
  $47 = $15;
  if (!($201)) {
   break;
  }
  $48 = (($47) + 1)|0;
  $15 = $48;
 }
 $49 = $11;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($47|0)==($51|0);
 do {
  if (!($52)) {
   $53 = $12;
   $54 = ($53|0)==(93);
   if ($54) {
    $55 = $15;
    $56 = $11;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + ($55<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $8;
    $62 = (_checkAttr($60,6,0,0,$61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
    $64 = $15;
    $65 = (($64) - 1)|0;
    $66 = $11;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + ($65<<1)|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $8;
    $72 = (_checkAttr($70,1,0,0,$71)|0);
    $73 = ($72|0)!=(0);
    if (!($73)) {
     break;
    }
   }
   $74 = $15;
   $16 = $74;
   while(1) {
    $75 = $16;
    $76 = $11;
    $77 = ((($76)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $16;
    $81 = $11;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($80<<1)|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $8;
    $87 = (_checkAttr($85,1,0,0,$86)|0);
    $88 = ($87|0)!=(0);
    $89 = $88 ^ 1;
    if (!($89)) {
     break;
    }
    $90 = $16;
    $91 = (($90) + 1)|0;
    $16 = $91;
   }
   $92 = $10;
   $93 = $92 & 34;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $14;
    $96 = $15;
    $97 = ($95|0)>=($96|0);
    if ($97) {
     $98 = $14;
     $99 = $16;
     $100 = ($98|0)<($99|0);
     if ($100) {
      $7 = 0;
      $200 = $7;
      STACKTOP = sp;return ($200|0);
     }
    }
   }
   $101 = $15;
   $17 = $101;
   L28: while(1) {
    $102 = $17;
    $103 = $16;
    $104 = ($102|0)<($103|0);
    if (!($104)) {
     label = 42;
     break;
    }
    $105 = $11;
    $106 = ((($105)) + 8|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $17;
    $109 = (($107) - ($108))|0;
    $18 = $109;
    $19 = 0;
    while(1) {
     $110 = $19;
     $111 = ($110|0)<(2);
     if (!($111)) {
      break;
     }
     $21 = 0;
     $112 = $19;
     switch ($112|0) {
     case 0:  {
      $113 = $18;
      $114 = ($113|0)>=(2);
      if ($114) {
       $115 = $17;
       $116 = $11;
       $117 = ((($116)) + 4|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($118) + ($115<<1)|0);
       $120 = $8;
       $121 = (__lou_stringHash($119,1,$120)|0);
       $122 = $8;
       $123 = ((($122)) + 12104|0);
       $124 = (($123) + ($121<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $21 = $125;
      }
      break;
     }
     case 1:  {
      $126 = $18;
      $127 = ($126|0)>=(1);
      if ($127) {
       $18 = 1;
       $128 = $17;
       $129 = $11;
       $130 = ((($129)) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (($131) + ($128<<1)|0);
       $133 = HEAP16[$132>>1]|0;
       $134 = $8;
       $135 = (_findCharOrDots($133,0,$134)|0);
       $136 = ((($135)) + 8|0);
       $137 = HEAP32[$136>>2]|0;
       $21 = $137;
      }
      break;
     }
     default: {
     }
     }
     while(1) {
      $138 = $21;
      $139 = ($138|0)!=(0);
      if (!($139)) {
       break;
      }
      $140 = $21;
      $141 = $8;
      $142 = ((($141)) + 21088|0);
      $143 = (($142) + ($140<<3)|0);
      $22 = $143;
      $20 = 0;
      while(1) {
       $144 = $20;
       $145 = $22;
       $146 = ((($145)) + 34|0);
       $147 = HEAP16[$146>>1]|0;
       $148 = $147 << 16 >> 16;
       $149 = ($144|0)<($148|0);
       if (!($149)) {
        break;
       }
       $150 = $20;
       $151 = $22;
       $152 = ((($151)) + 38|0);
       $153 = (($152) + ($150<<1)|0);
       $154 = HEAP16[$153>>1]|0;
       $155 = $8;
       $156 = (_findCharOrDots($154,0,$155)|0);
       $23 = $156;
       $157 = $17;
       $158 = $20;
       $159 = (($157) + ($158))|0;
       $160 = $11;
       $161 = ((($160)) + 4|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($162) + ($159<<1)|0);
       $164 = HEAP16[$163>>1]|0;
       $165 = $8;
       $166 = (_findCharOrDots($164,0,$165)|0);
       $24 = $166;
       $167 = $23;
       $168 = ((($167)) + 28|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169&65535;
       $171 = $24;
       $172 = ((($171)) + 28|0);
       $173 = HEAP16[$172>>1]|0;
       $174 = $173&65535;
       $175 = ($170|0)!=($174|0);
       if ($175) {
        break;
       }
       $176 = $20;
       $177 = (($176) + 1)|0;
       $20 = $177;
      }
      $178 = $19;
      $179 = ($178|0)==(1);
      if ($179) {
       label = 36;
      } else {
       $180 = $20;
       $181 = $22;
       $182 = ((($181)) + 34|0);
       $183 = HEAP16[$182>>1]|0;
       $184 = $183 << 16 >> 16;
       $185 = ($180|0)==($184|0);
       if ($185) {
        label = 36;
       }
      }
      if ((label|0) == 36) {
       label = 0;
       $186 = $22;
       $187 = ((($186)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(87);
       if ($189) {
        label = 38;
        break L28;
       }
       $190 = $22;
       $191 = ((($190)) + 28|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($192|0)==(88);
       if ($193) {
        label = 38;
        break L28;
       }
      }
      $194 = $22;
      $195 = HEAP32[$194>>2]|0;
      $21 = $195;
     }
     $196 = $19;
     $197 = (($196) + 1)|0;
     $19 = $197;
    }
    $198 = $17;
    $199 = (($198) + 1)|0;
    $17 = $199;
   }
   if ((label|0) == 38) {
    $7 = 0;
    $200 = $7;
    STACKTOP = sp;return ($200|0);
   }
   else if ((label|0) == 42) {
    $7 = 1;
    $200 = $7;
    STACKTOP = sp;return ($200|0);
   }
  }
 } while(0);
 $7 = 1;
 $200 = $7;
 STACKTOP = sp;return ($200|0);
}
function _inSequence($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $6;
 $14 = (($13) - 1)|0;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $9;
  $18 = $7;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $5;
  $24 = (_checkAttr($22,16384,0,0,$23)|0);
  $25 = ($24|0)!=(0);
  $26 = $9;
  if (!($25)) {
   label = 4;
   break;
  }
  $35 = (($26) + -1)|0;
  $9 = $35;
 }
 if ((label|0) == 4) {
  $27 = $7;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $5;
  $33 = (_checkAttr($31,8193,0,0,$32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $4 = 0;
   $147 = $4;
   STACKTOP = sp;return ($147|0);
  }
 }
 $36 = $6;
 $37 = $8;
 $38 = ((($37)) + 34|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = (($36) + ($40))|0;
 $9 = $41;
 L10: while(1) {
  $42 = $9;
  $43 = $7;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $5;
  $48 = ((($47)) + 352|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  L13: do {
   if ($50) {
    $12 = 0;
    $51 = $9;
    $10 = $51;
    $11 = 0;
    L15: while(1) {
     $52 = $10;
     $53 = $7;
     $54 = ((($53)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($52|0)<=($55|0);
     if (!($56)) {
      break L13;
     }
     $57 = $11;
     $58 = $5;
     $59 = ((($58)) + 352|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($57|0)<($60|0);
     if (!($61)) {
      break L13;
     }
     $62 = $12;
     $63 = ($62|0)==(1);
     do {
      if ($63) {
       $64 = $11;
       $65 = $5;
       $66 = ((($65)) + 52|0);
       $67 = (($66) + ($64<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = ($68<<16>>16)!=(0);
       $70 = $10;
       $71 = $7;
       if (!($69)) {
        break L15;
       }
       $72 = ((($71)) + 4|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + ($70<<1)|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75&65535;
       $77 = $11;
       $78 = $5;
       $79 = ((($78)) + 52|0);
       $80 = (($79) + ($77<<1)|0);
       $81 = HEAP16[$80>>1]|0;
       $82 = $81&65535;
       $83 = ($76|0)==($82|0);
       if ($83) {
        $12 = 1;
        break;
       } else {
        $12 = -1;
        $84 = $9;
        $85 = (($84) - 1)|0;
        $10 = $85;
        break;
       }
      } else {
       $90 = $12;
       $91 = ($90|0)==(0);
       if (!($91)) {
        $114 = $12;
        $115 = ($114|0)==(-1);
        if (!($115)) {
         break;
        }
        $116 = $11;
        $117 = $5;
        $118 = ((($117)) + 52|0);
        $119 = (($118) + ($116<<1)|0);
        $120 = HEAP16[$119>>1]|0;
        $121 = ($120<<16>>16)!=(0);
        if ($121) {
         break;
        }
        $12 = 0;
        $122 = $9;
        $123 = (($122) - 1)|0;
        $10 = $123;
        break;
       }
       $92 = $11;
       $93 = $5;
       $94 = ((($93)) + 52|0);
       $95 = (($94) + ($92<<1)|0);
       $96 = HEAP16[$95>>1]|0;
       $97 = ($96<<16>>16)!=(0);
       if ($97) {
        $98 = $10;
        $99 = $7;
        $100 = ((($99)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (($101) + ($98<<1)|0);
        $103 = HEAP16[$102>>1]|0;
        $104 = $103&65535;
        $105 = $11;
        $106 = $5;
        $107 = ((($106)) + 52|0);
        $108 = (($107) + ($105<<1)|0);
        $109 = HEAP16[$108>>1]|0;
        $110 = $109&65535;
        $111 = ($104|0)==($110|0);
        if ($111) {
         $12 = 1;
         break;
        } else {
         $12 = -1;
         $112 = $9;
         $113 = (($112) - 1)|0;
         $10 = $113;
         break;
        }
       }
      }
     } while(0);
     $124 = $10;
     $125 = (($124) + 1)|0;
     $10 = $125;
     $126 = $11;
     $127 = (($126) + 1)|0;
     $11 = $127;
    }
    $86 = ((($71)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($70|0)>=($87|0);
    if ($88) {
     label = 19;
     break L10;
    }
    $89 = $10;
    $9 = $89;
   }
  } while(0);
  $128 = $9;
  $129 = $7;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + ($128<<1)|0);
  $133 = HEAP16[$132>>1]|0;
  $134 = $5;
  $135 = (_checkAttr($133,32768,0,0,$134)|0);
  $136 = ($135|0)!=(0);
  $137 = $9;
  if (!($136)) {
   label = 31;
   break;
  }
  $146 = (($137) + 1)|0;
  $9 = $146;
 }
 if ((label|0) == 19) {
  $4 = 1;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 if ((label|0) == 31) {
  $138 = $7;
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + ($137<<1)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $5;
  $144 = (_checkAttr($142,8193,0,0,$143)|0);
  $145 = ($144|0)!=(0);
  if (!($145)) {
   $4 = 0;
   $147 = $4;
   STACKTOP = sp;return ($147|0);
  }
 }
 $4 = 1;
 $147 = $4;
 STACKTOP = sp;return ($147|0);
}
function _onlyLettersAhead($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $13 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $14 = $11;
 $15 = $14;
 HEAP32[$15>>2] = $4;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $5;
 $18 = $11;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 & 1;
 $25 = ($24|0)!=(0);
 $26 = (0)!=(0);
 $27 = $25 | $26;
 if (!($27)) {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $28 = $8;
 $29 = $10;
 $30 = (($28) + ($29))|0;
 $31 = (($30) + 1)|0;
 $12 = $31;
 while(1) {
  $32 = $12;
  $33 = $9;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if (!($36)) {
   label = 10;
   break;
  }
  $37 = $12;
  $38 = $9;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $7;
  $44 = (_findCharOrDots($42,0,$43)|0);
  $45 = ((($44)) + 16|0);
  $46 = $45;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $13;
  $53 = $52;
  HEAP32[$53>>2] = $48;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $51;
  $56 = $13;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $58 & 1;
  $63 = ($62|0)!=(0);
  $64 = (0)!=(0);
  $65 = $63 | $64;
  if (!($65)) {
   break;
  }
  $76 = $12;
  $77 = (($76) + 1)|0;
  $12 = $77;
 }
 if ((label|0) == 10) {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $66 = $13;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $68 & 258;
 $73 = ($72|0)!=(0);
 $74 = (0)!=(0);
 $75 = $73 | $74;
 if ($75) {
  $6 = 1;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 } else {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function _putCompChar($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $21 = sp + 48|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $24 = $11;
 $25 = $12;
 $26 = (_findCharOrDots($24,0,$25)|0);
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $22 = $28;
 $29 = $22;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $63 = $11;
  $64 = $12;
  $65 = $13;
  $66 = $14;
  $67 = $15;
  $68 = $16;
  $69 = $17;
  $70 = $18;
  $71 = $19;
  $72 = $20;
  $73 = (_undefinedCharacter($63,$64,$65,$66,$67,$68,$69,$70,$71,$72)|0);
  $10 = $73;
  $74 = $10;
  STACKTOP = sp;return ($74|0);
 }
 $31 = $22;
 $32 = $12;
 $33 = ((($32)) + 21088|0);
 $34 = (($33) + ($31<<3)|0);
 $23 = $34;
 $35 = $23;
 $36 = ((($35)) + 36|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($37<<16>>16)!=(0);
 if ($38) {
  $39 = $23;
  $40 = ((($39)) + 38|0);
  $41 = ((($40)) + 2|0);
  $42 = $23;
  $43 = ((($42)) + 36|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $14;
  $47 = $15;
  $48 = $16;
  $49 = $17;
  $50 = $18;
  $51 = $19;
  $52 = (_for_updatePositions($41,1,$45,0,$46,$47,$48,$49,$50,$51)|0);
  $10 = $52;
  $74 = $10;
  STACKTOP = sp;return ($74|0);
 } else {
  $53 = $11;
  $54 = $13;
  $55 = (__lou_getDotsForChar($53,$54)|0);
  HEAP16[$21>>1] = $55;
  $56 = $14;
  $57 = $15;
  $58 = $16;
  $59 = $17;
  $60 = $18;
  $61 = $19;
  $62 = (_for_updatePositions($21,1,1,0,$56,$57,$58,$59,$60,$61)|0);
  $10 = $62;
  $74 = $10;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function _initEmphClasses() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_malloc(40)|0);
 $0 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  __lou_outOfMemory();
 }
 $1 = 0;
 while(1) {
  $5 = $1;
  $6 = ($5|0)<(10);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = (($7) + 1)|0;
  $9 = 1 << $8;
  $10 = $1;
  $11 = $0;
  $12 = (($11) + ($10<<2)|0);
  HEAP32[$12>>2] = $9;
  $13 = $1;
  $14 = (($13) + 1)|0;
  $1 = $14;
 }
 $15 = $0;
 HEAP32[3726] = $15;
 STACKTOP = sp;return;
}
function _resolveEmphasisWords($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = 0;
 $15 = -1;
 $16 = 0;
 $19 = $7;
 $20 = $9;
 $21 = ((($20)) + 616|0);
 $22 = (($21) + (($19*36)|0)|0);
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $17 = 0;
 while(1) {
  $25 = $17;
  $26 = $10;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $17;
  $31 = $11;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & -9;
  HEAP32[$32>>2] = $34;
  $35 = $13;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $37 = $17;
   $38 = $6;
   $39 = (($38) + ($37<<3)|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $42 & 65535;
   $47 = $8;
   $48 = $46 & $47;
   $49 = ($48|0)!=(0);
   if ($49) {
    $13 = 1;
    $50 = $8;
    $51 = $50 ^ -1;
    $52 = $17;
    $53 = $6;
    $54 = (($53) + ($52<<3)|0);
    $55 = $54;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = $57 & 65535;
    $62 = $61 & $51;
    $63 = $54;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($63) + 4)|0;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = $65 & -65536;
    $70 = $69 | $62;
    $71 = $54;
    $72 = $71;
    HEAP32[$72>>2] = $70;
    $73 = (($71) + 4)|0;
    $74 = $73;
    HEAP32[$74>>2] = $68;
    $75 = $12;
    $76 = ($75|0)!=(0);
    if ($76) {
     $77 = $17;
     $15 = $77;
     $16 = 0;
    }
    $78 = $17;
    $79 = $11;
    $80 = (($79) + ($78<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81 & 1;
    $83 = ($82|0)!=(0);
    if (!($83)) {
     $15 = -1;
    }
   }
  }
  $84 = $13;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $17;
   $87 = $6;
   $88 = (($87) + ($86<<3)|0);
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (_bitshift64Lshr(($91|0),($94|0),16)|0);
   $96 = tempRet0;
   $97 = $95 & 65535;
   $98 = $8;
   $99 = $97 & $98;
   $100 = ($99|0)!=(0);
   if ($100) {
    $13 = 0;
    $101 = $8;
    $102 = $101 ^ -1;
    $103 = $17;
    $104 = $6;
    $105 = (($104) + ($103<<3)|0);
    $106 = $105;
    $107 = $106;
    $108 = HEAP32[$107>>2]|0;
    $109 = (($106) + 4)|0;
    $110 = $109;
    $111 = HEAP32[$110>>2]|0;
    $112 = (_bitshift64Lshr(($108|0),($111|0),16)|0);
    $113 = tempRet0;
    $114 = $112 & 65535;
    $115 = $114 & $102;
    $116 = $105;
    $117 = $116;
    $118 = HEAP32[$117>>2]|0;
    $119 = (($116) + 4)|0;
    $120 = $119;
    $121 = HEAP32[$120>>2]|0;
    $122 = (_bitshift64Shl(($115|0),0,16)|0);
    $123 = tempRet0;
    $124 = $118 & 65535;
    $125 = $124 | $122;
    $126 = $121 | $123;
    $127 = $105;
    $128 = $127;
    HEAP32[$128>>2] = $125;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = $126;
    $131 = $12;
    $132 = ($131|0)!=(0);
    $133 = $15;
    $134 = ($133|0)>=(0);
    $or$cond = $132 & $134;
    if ($or$cond) {
     $14 = 1;
     $135 = $17;
     $136 = $11;
     $137 = (($136) + ($135<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 & 1;
     $140 = ($139|0)!=(0);
     if ($140) {
      $16 = 0;
     } else {
      $14 = 0;
     }
     $141 = $18;
     $142 = ($141|0)!=(0);
     if ($142) {
      $143 = $15;
      $144 = (($143) + 1)|0;
      $145 = $17;
      $146 = ($144|0)==($145|0);
      if ($146) {
       $147 = $8;
       $148 = $15;
       $149 = $6;
       $150 = (($149) + ($148<<3)|0);
       $151 = $150;
       $152 = $151;
       $153 = HEAP32[$152>>2]|0;
       $154 = (($151) + 4)|0;
       $155 = $154;
       $156 = HEAP32[$155>>2]|0;
       $157 = (_bitshift64Lshr(($153|0),($156|0),48)|0);
       $158 = tempRet0;
       $159 = $157 | $147;
       $160 = $150;
       $161 = $160;
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 4)|0;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $166 = $159 & 65535;
       $167 = (_bitshift64Shl(($166|0),0,48)|0);
       $168 = tempRet0;
       $169 = $165 & 65535;
       $170 = $162 | $167;
       $171 = $169 | $168;
       $172 = $150;
       $173 = $172;
       HEAP32[$173>>2] = $170;
       $174 = (($172) + 4)|0;
       $175 = $174;
       HEAP32[$175>>2] = $171;
      } else {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      label = 0;
      $176 = $8;
      $177 = $15;
      $178 = $6;
      $179 = (($178) + ($177<<3)|0);
      $180 = $179;
      $181 = $180;
      $182 = HEAP32[$181>>2]|0;
      $183 = (($180) + 4)|0;
      $184 = $183;
      $185 = HEAP32[$184>>2]|0;
      $186 = $185 & 65535;
      $187 = $186 | $176;
      $188 = $179;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (($188) + 4)|0;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = $187 & 65535;
      $195 = $193 & -65536;
      $196 = $195 | $194;
      $197 = $179;
      $198 = $197;
      HEAP32[$198>>2] = $190;
      $199 = (($197) + 4)|0;
      $200 = $199;
      HEAP32[$200>>2] = $196;
      $201 = $14;
      $202 = ($201|0)!=(0);
      if ($202) {
       $203 = $8;
       $204 = $17;
       $205 = $6;
       $206 = (($205) + ($204<<3)|0);
       $207 = $206;
       $208 = $207;
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 4)|0;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $213 = (_bitshift64Lshr(($209|0),($212|0),16)|0);
       $214 = tempRet0;
       $215 = $213 & 65535;
       $216 = $215 | $203;
       $217 = $206;
       $218 = $217;
       $219 = HEAP32[$218>>2]|0;
       $220 = (($217) + 4)|0;
       $221 = $220;
       $222 = HEAP32[$221>>2]|0;
       $223 = $216 & 65535;
       $224 = (_bitshift64Shl(($223|0),0,16)|0);
       $225 = tempRet0;
       $226 = $219 & 65535;
       $227 = $226 | $224;
       $228 = $222 | $225;
       $229 = $206;
       $230 = $229;
       HEAP32[$230>>2] = $227;
       $231 = (($229) + 4)|0;
       $232 = $231;
       HEAP32[$232>>2] = $228;
       $233 = $8;
       $234 = $17;
       $235 = $6;
       $236 = (($235) + ($234<<3)|0);
       $237 = $236;
       $238 = $237;
       $239 = HEAP32[$238>>2]|0;
       $240 = (($237) + 4)|0;
       $241 = $240;
       $242 = HEAP32[$241>>2]|0;
       $243 = $242 & 65535;
       $244 = $243 | $233;
       $245 = $236;
       $246 = $245;
       $247 = HEAP32[$246>>2]|0;
       $248 = (($245) + 4)|0;
       $249 = $248;
       $250 = HEAP32[$249>>2]|0;
       $251 = $244 & 65535;
       $252 = $250 & -65536;
       $253 = $252 | $251;
       $254 = $236;
       $255 = $254;
       HEAP32[$255>>2] = $247;
       $256 = (($254) + 4)|0;
       $257 = $256;
       HEAP32[$257>>2] = $253;
      }
     }
     $258 = $16;
     $259 = $15;
     $260 = $11;
     $261 = (($260) + ($259<<2)|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = $262 | $258;
     HEAP32[$261>>2] = $263;
    }
   }
  }
  $264 = $12;
  $265 = ($264|0)!=(0);
  if (!($265)) {
   $266 = $17;
   $267 = $11;
   $268 = (($267) + ($266<<2)|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $269 & 1;
   $271 = ($270|0)!=(0);
   if ($271) {
    $12 = 1;
    $272 = $13;
    $273 = ($272|0)!=(0);
    if ($273) {
     $16 = 8;
     $274 = $17;
     $15 = $274;
    }
   }
  }
  $275 = $12;
  $276 = ($275|0)!=(0);
  if ($276) {
   $277 = $17;
   $278 = $11;
   $279 = (($278) + ($277<<2)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $280 & 1;
   $282 = ($281|0)!=(0);
   if (!($282)) {
    $283 = $13;
    $284 = ($283|0)!=(0);
    $285 = $15;
    $286 = ($285|0)>=(0);
    $or$cond3 = $284 & $286;
    if ($or$cond3) {
     $287 = $18;
     $288 = ($287|0)!=(0);
     if ($288) {
      $289 = $15;
      $290 = (($289) + 1)|0;
      $291 = $17;
      $292 = ($290|0)==($291|0);
      if ($292) {
       $293 = $8;
       $294 = $15;
       $295 = $6;
       $296 = (($295) + ($294<<3)|0);
       $297 = $296;
       $298 = $297;
       $299 = HEAP32[$298>>2]|0;
       $300 = (($297) + 4)|0;
       $301 = $300;
       $302 = HEAP32[$301>>2]|0;
       $303 = (_bitshift64Lshr(($299|0),($302|0),48)|0);
       $304 = tempRet0;
       $305 = $303 | $293;
       $306 = $296;
       $307 = $306;
       $308 = HEAP32[$307>>2]|0;
       $309 = (($306) + 4)|0;
       $310 = $309;
       $311 = HEAP32[$310>>2]|0;
       $312 = $305 & 65535;
       $313 = (_bitshift64Shl(($312|0),0,48)|0);
       $314 = tempRet0;
       $315 = $311 & 65535;
       $316 = $308 | $313;
       $317 = $315 | $314;
       $318 = $296;
       $319 = $318;
       HEAP32[$319>>2] = $316;
       $320 = (($318) + 4)|0;
       $321 = $320;
       HEAP32[$321>>2] = $317;
      } else {
       label = 31;
      }
     } else {
      label = 31;
     }
     if ((label|0) == 31) {
      label = 0;
      $322 = $8;
      $323 = $15;
      $324 = $6;
      $325 = (($324) + ($323<<3)|0);
      $326 = $325;
      $327 = $326;
      $328 = HEAP32[$327>>2]|0;
      $329 = (($326) + 4)|0;
      $330 = $329;
      $331 = HEAP32[$330>>2]|0;
      $332 = $331 & 65535;
      $333 = $332 | $322;
      $334 = $325;
      $335 = $334;
      $336 = HEAP32[$335>>2]|0;
      $337 = (($334) + 4)|0;
      $338 = $337;
      $339 = HEAP32[$338>>2]|0;
      $340 = $333 & 65535;
      $341 = $339 & -65536;
      $342 = $341 | $340;
      $343 = $325;
      $344 = $343;
      HEAP32[$344>>2] = $336;
      $345 = (($343) + 4)|0;
      $346 = $345;
      HEAP32[$346>>2] = $342;
     }
     $347 = $16;
     $348 = $15;
     $349 = $11;
     $350 = (($349) + ($348<<2)|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = $351 | $347;
     HEAP32[$350>>2] = $352;
    }
    $12 = 0;
    $16 = 0;
    $15 = -1;
   }
  }
  $353 = $17;
  $354 = (($353) + 1)|0;
  $17 = $354;
 }
 $355 = $13;
 $356 = ($355|0)!=(0);
 if (!($356)) {
  STACKTOP = sp;return;
 }
 $357 = $8;
 $358 = $357 ^ -1;
 $359 = $17;
 $360 = $6;
 $361 = (($360) + ($359<<3)|0);
 $362 = $361;
 $363 = $362;
 $364 = HEAP32[$363>>2]|0;
 $365 = (($362) + 4)|0;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = (_bitshift64Lshr(($364|0),($367|0),16)|0);
 $369 = tempRet0;
 $370 = $368 & 65535;
 $371 = $370 & $358;
 $372 = $361;
 $373 = $372;
 $374 = HEAP32[$373>>2]|0;
 $375 = (($372) + 4)|0;
 $376 = $375;
 $377 = HEAP32[$376>>2]|0;
 $378 = (_bitshift64Shl(($371|0),0,16)|0);
 $379 = tempRet0;
 $380 = $374 & 65535;
 $381 = $380 | $378;
 $382 = $377 | $379;
 $383 = $361;
 $384 = $383;
 HEAP32[$384>>2] = $381;
 $385 = (($383) + 4)|0;
 $386 = $385;
 HEAP32[$386>>2] = $382;
 $387 = $12;
 $388 = ($387|0)!=(0);
 $389 = $15;
 $390 = ($389|0)>=(0);
 $or$cond5 = $388 & $390;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $391 = $18;
 $392 = ($391|0)!=(0);
 if ($392) {
  $393 = $15;
  $394 = (($393) + 1)|0;
  $395 = $17;
  $396 = ($394|0)==($395|0);
  if ($396) {
   $397 = $8;
   $398 = $15;
   $399 = $6;
   $400 = (($399) + ($398<<3)|0);
   $401 = $400;
   $402 = $401;
   $403 = HEAP32[$402>>2]|0;
   $404 = (($401) + 4)|0;
   $405 = $404;
   $406 = HEAP32[$405>>2]|0;
   $407 = (_bitshift64Lshr(($403|0),($406|0),48)|0);
   $408 = tempRet0;
   $409 = $407 | $397;
   $410 = $400;
   $411 = $410;
   $412 = HEAP32[$411>>2]|0;
   $413 = (($410) + 4)|0;
   $414 = $413;
   $415 = HEAP32[$414>>2]|0;
   $416 = $409 & 65535;
   $417 = (_bitshift64Shl(($416|0),0,48)|0);
   $418 = tempRet0;
   $419 = $415 & 65535;
   $420 = $412 | $417;
   $421 = $419 | $418;
   $422 = $400;
   $423 = $422;
   HEAP32[$423>>2] = $420;
   $424 = (($422) + 4)|0;
   $425 = $424;
   HEAP32[$425>>2] = $421;
  } else {
   label = 40;
  }
 } else {
  label = 40;
 }
 if ((label|0) == 40) {
  $426 = $8;
  $427 = $15;
  $428 = $6;
  $429 = (($428) + ($427<<3)|0);
  $430 = $429;
  $431 = $430;
  $432 = HEAP32[$431>>2]|0;
  $433 = (($430) + 4)|0;
  $434 = $433;
  $435 = HEAP32[$434>>2]|0;
  $436 = $435 & 65535;
  $437 = $436 | $426;
  $438 = $429;
  $439 = $438;
  $440 = HEAP32[$439>>2]|0;
  $441 = (($438) + 4)|0;
  $442 = $441;
  $443 = HEAP32[$442>>2]|0;
  $444 = $437 & 65535;
  $445 = $443 & -65536;
  $446 = $445 | $444;
  $447 = $429;
  $448 = $447;
  HEAP32[$448>>2] = $440;
  $449 = (($447) + 4)|0;
  $450 = $449;
  HEAP32[$450>>2] = $446;
 }
 $451 = $16;
 $452 = $15;
 $453 = $11;
 $454 = (($453) + ($452<<2)|0);
 $455 = HEAP32[$454>>2]|0;
 $456 = $455 | $451;
 HEAP32[$454>>2] = $456;
 STACKTOP = sp;return;
}
function _resolveEmphasisPassages($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = -1;
 $14 = -1;
 $15 = -1;
 $16 = 0;
 $17 = 0;
 $18 = 0;
 while(1) {
  $19 = $18;
  $20 = $10;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $16;
  $25 = ($24|0)!=(0);
  do {
   if ($25) {
    label = 14;
   } else {
    $26 = $18;
    $27 = $11;
    $28 = (($27) + ($26<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 1;
    $31 = ($30|0)!=(0);
    if ($31) {
     $16 = 1;
     $32 = $18;
     $33 = $11;
     $34 = (($33) + ($32<<2)|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $35 & 8;
     $37 = ($36|0)!=(0);
     $38 = $17;
     $39 = ($38|0)!=(0);
     if ($37) {
      if ($39) {
       $41 = $12;
       $42 = (($41) + 1)|0;
       $12 = $42;
      } else {
       $17 = 1;
       $40 = $18;
       $13 = $40;
       $14 = -1;
       $12 = 1;
      }
      $43 = $18;
      $15 = $43;
      break;
     } else {
      if (!($39)) {
       label = 14;
       break;
      }
      $44 = $12;
      $45 = $7;
      $46 = $9;
      $47 = ((($46)) + 616|0);
      $48 = (($47) + (($45*36)|0)|0);
      $49 = ((($48)) + 32|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($44>>>0)>=($50>>>0);
      $52 = $14;
      $53 = ($52|0)>=(0);
      $or$cond = $51 & $53;
      if ($or$cond) {
       $54 = $13;
       $55 = $14;
       $56 = $15;
       $57 = $6;
       $58 = $7;
       $59 = $8;
       $60 = $9;
       $61 = $11;
       _convertToPassage($54,$55,$56,$57,$58,$59,$60,$61);
      }
      $17 = 0;
      label = 14;
      break;
     }
    } else {
     label = 14;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   $62 = $16;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $18;
    $65 = $11;
    $66 = (($65) + ($64<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $67 & 1;
    $69 = ($68|0)!=(0);
    if (!($69)) {
     $16 = 0;
     $70 = $17;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $18;
      $14 = $72;
     }
    }
   }
   $73 = $17;
   $74 = ($73|0)!=(0);
   if ($74) {
    $75 = $18;
    $76 = $6;
    $77 = (($76) + ($75<<3)|0);
    $78 = $77;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = $80 & 65535;
    $85 = $18;
    $86 = $6;
    $87 = (($86) + ($85<<3)|0);
    $88 = $87;
    $89 = $88;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($88) + 4)|0;
    $92 = $91;
    $93 = HEAP32[$92>>2]|0;
    $94 = (_bitshift64Lshr(($90|0),($93|0),16)|0);
    $95 = tempRet0;
    $96 = $94 & 65535;
    $97 = $84 | $96;
    $98 = $18;
    $99 = $6;
    $100 = (($99) + ($98<<3)|0);
    $101 = $100;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($101) + 4)|0;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 65535;
    $108 = $97 | $107;
    $109 = $18;
    $110 = $6;
    $111 = (($110) + ($109<<3)|0);
    $112 = $111;
    $113 = $112;
    $114 = HEAP32[$113>>2]|0;
    $115 = (($112) + 4)|0;
    $116 = $115;
    $117 = HEAP32[$116>>2]|0;
    $118 = (_bitshift64Lshr(($114|0),($117|0),48)|0);
    $119 = tempRet0;
    $120 = $108 | $118;
    $121 = $8;
    $122 = $120 & $121;
    $123 = ($122|0)!=(0);
    if ($123) {
     $124 = $12;
     $125 = $7;
     $126 = $9;
     $127 = ((($126)) + 616|0);
     $128 = (($127) + (($125*36)|0)|0);
     $129 = ((($128)) + 32|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($124>>>0)>=($130>>>0);
     $132 = $14;
     $133 = ($132|0)>=(0);
     $or$cond3 = $131 & $133;
     if ($or$cond3) {
      $134 = $13;
      $135 = $14;
      $136 = $15;
      $137 = $6;
      $138 = $7;
      $139 = $8;
      $140 = $9;
      $141 = $11;
      _convertToPassage($134,$135,$136,$137,$138,$139,$140,$141);
     }
     $17 = 0;
    }
   }
  }
  $142 = $18;
  $143 = (($142) + 1)|0;
  $18 = $143;
 }
 $144 = $17;
 $145 = ($144|0)!=(0);
 if (!($145)) {
  STACKTOP = sp;return;
 }
 $146 = $12;
 $147 = $7;
 $148 = $9;
 $149 = ((($148)) + 616|0);
 $150 = (($149) + (($147*36)|0)|0);
 $151 = ((($150)) + 32|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($146>>>0)>=($152>>>0);
 $154 = $14;
 $155 = ($154|0)>=(0);
 $or$cond5 = $153 & $155;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $156 = $16;
 $157 = ($156|0)!=(0);
 $158 = $13;
 if ($157) {
  $159 = $18;
  $160 = $15;
  $161 = $6;
  $162 = $7;
  $163 = $8;
  $164 = $9;
  $165 = $11;
  _convertToPassage($158,$159,$160,$161,$162,$163,$164,$165);
  STACKTOP = sp;return;
 } else {
  $166 = $14;
  $167 = $15;
  $168 = $6;
  $169 = $7;
  $170 = $8;
  $171 = $9;
  $172 = $11;
  _convertToPassage($158,$166,$167,$168,$169,$170,$171,$172);
  STACKTOP = sp;return;
 }
}
function _resolveEmphasisResets($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 $15 = 0;
 $16 = -1;
 $17 = 0;
 $18 = 0;
 $19 = -1;
 $22 = $8;
 $23 = $11;
 $24 = ((($23)) + 616|0);
 $25 = (($24) + (($22*36)|0)|0);
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $21 = $27;
 $20 = 0;
 while(1) {
  $28 = $20;
  $29 = $12;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $15;
  $34 = ($33|0)!=(0);
  do {
   if ($34) {
    $35 = $20;
    $36 = $7;
    $37 = (($36) + ($35<<3)|0);
    $38 = $37;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) + 4)|0;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (_bitshift64Lshr(($40|0),($43|0),16)|0);
    $45 = tempRet0;
    $46 = $44 & 65535;
    $47 = $9;
    $48 = $46 & $47;
    $49 = ($48|0)!=(0);
    if ($49) {
     $15 = 0;
     break;
    }
    $50 = $20;
    $51 = $7;
    $52 = (($51) + ($50<<3)|0);
    $53 = $52;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 & 65535;
    $60 = $9;
    $61 = $59 & $60;
    $62 = ($61|0)!=(0);
    if ($62) {
     $15 = 0;
     $63 = $20;
     $19 = $63;
    }
   }
  } while(0);
  $64 = $15;
  $65 = ($64|0)!=(0);
  L11: do {
   if (!($65)) {
    $66 = $20;
    $67 = $7;
    $68 = (($67) + ($66<<3)|0);
    $69 = $68;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = $71 & 65535;
    $76 = $9;
    $77 = $75 & $76;
    $78 = ($77|0)!=(0);
    if ($78) {
     $15 = 1;
     break;
    }
    $79 = $14;
    $80 = ($79|0)!=(0);
    do {
     if (!($80)) {
      $81 = $20;
      $82 = $7;
      $83 = (($82) + ($81<<3)|0);
      $84 = $83;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = (($84) + 4)|0;
      $88 = $87;
      $89 = HEAP32[$88>>2]|0;
      $90 = $89 & 65535;
      $91 = $9;
      $92 = $90 & $91;
      $93 = ($92|0)!=(0);
      $94 = $20;
      if (!($93)) {
       $242 = $7;
       $243 = (($242) + ($94<<3)|0);
       $244 = $243;
       $245 = $244;
       $246 = HEAP32[$245>>2]|0;
       $247 = (($244) + 4)|0;
       $248 = $247;
       $249 = HEAP32[$248>>2]|0;
       $250 = (_bitshift64Lshr(($246|0),($249|0),48)|0);
       $251 = tempRet0;
       $252 = $9;
       $253 = $250 & $252;
       $254 = ($253|0)!=(0);
       if (!($254)) {
        break;
       }
       $255 = $20;
       $256 = $13;
       $257 = (($256) + ($255<<2)|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $258 & 2;
       $260 = ($259|0)!=(0);
       if (!($260)) {
        $261 = $20;
        $262 = $12;
        $263 = ((($262)) + 4|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($264) + ($261<<1)|0);
        $266 = HEAP16[$265>>1]|0;
        $267 = $11;
        $268 = (_checkAttr($266,2,0,0,$267)|0);
        $269 = ($268|0)!=(0);
        if ($269) {
         break;
        }
       }
       $270 = $9;
       $271 = $270 ^ -1;
       $272 = $20;
       $273 = $7;
       $274 = (($273) + ($272<<3)|0);
       $275 = $274;
       $276 = $275;
       $277 = HEAP32[$276>>2]|0;
       $278 = (($275) + 4)|0;
       $279 = $278;
       $280 = HEAP32[$279>>2]|0;
       $281 = (_bitshift64Lshr(($277|0),($280|0),48)|0);
       $282 = tempRet0;
       $283 = $281 & $271;
       $284 = $274;
       $285 = $284;
       $286 = HEAP32[$285>>2]|0;
       $287 = (($284) + 4)|0;
       $288 = $287;
       $289 = HEAP32[$288>>2]|0;
       $290 = $283 & 65535;
       $291 = (_bitshift64Shl(($290|0),0,48)|0);
       $292 = tempRet0;
       $293 = $289 & 65535;
       $294 = $286 | $291;
       $295 = $293 | $292;
       $296 = $274;
       $297 = $296;
       HEAP32[$297>>2] = $294;
       $298 = (($296) + 4)|0;
       $299 = $298;
       HEAP32[$299>>2] = $295;
       break;
      }
      $95 = $13;
      $96 = (($95) + ($94<<2)|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 2;
      $99 = ($98|0)!=(0);
      if ($99) {
       label = 15;
      } else {
       $100 = $20;
       $101 = $12;
       $102 = ((($101)) + 4|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + ($100<<1)|0);
       $105 = HEAP16[$104>>1]|0;
       $106 = $11;
       $107 = (_checkAttr($105,2,0,0,$106)|0);
       $108 = ($107|0)!=(0);
       if (!($108)) {
        label = 15;
       }
      }
      do {
       if ((label|0) == 15) {
        label = 0;
        $109 = $21;
        $110 = ($109|0)!=(0);
        if ($110) {
         $111 = $19;
         $112 = $20;
         $113 = ($111|0)==($112|0);
         if ($113) {
          label = 17;
         }
        } else {
         label = 17;
        }
        if ((label|0) == 17) {
         label = 0;
         $114 = $20;
         $115 = $12;
         $116 = ((($115)) + 4|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = (($117) + ($114<<1)|0);
         $119 = HEAP16[$118>>1]|0;
         $120 = $11;
         $121 = (_checkAttr($119,2,0,0,$120)|0);
         $122 = ($121|0)!=(0);
         if ($122) {
          break;
         }
        }
        $123 = $20;
        $124 = (($123) + 1)|0;
        $125 = $13;
        $126 = (($125) + ($124<<2)|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $127 & 1;
        $129 = ($128|0)!=(0);
        if ($129) {
         $130 = $9;
         $131 = $20;
         $132 = (($131) + 1)|0;
         $133 = $7;
         $134 = (($133) + ($132<<3)|0);
         $135 = $134;
         $136 = $135;
         $137 = HEAP32[$136>>2]|0;
         $138 = (($135) + 4)|0;
         $139 = $138;
         $140 = HEAP32[$139>>2]|0;
         $141 = $140 & 65535;
         $142 = $141 | $130;
         $143 = $134;
         $144 = $143;
         $145 = HEAP32[$144>>2]|0;
         $146 = (($143) + 4)|0;
         $147 = $146;
         $148 = HEAP32[$147>>2]|0;
         $149 = $142 & 65535;
         $150 = $148 & -65536;
         $151 = $150 | $149;
         $152 = $134;
         $153 = $152;
         HEAP32[$153>>2] = $145;
         $154 = (($152) + 4)|0;
         $155 = $154;
         HEAP32[$155>>2] = $151;
         $156 = $20;
         $157 = $13;
         $158 = (($157) + ($156<<2)|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = $159 & 8;
         $161 = ($160|0)!=(0);
         if ($161) {
          $162 = $20;
          $163 = (($162) + 1)|0;
          $164 = $13;
          $165 = (($164) + ($163<<2)|0);
          $166 = HEAP32[$165>>2]|0;
          $167 = $166 | 8;
          HEAP32[$165>>2] = $167;
         }
         $168 = $19;
         $169 = $20;
         $170 = ($168|0)==($169|0);
         if ($170) {
          $171 = $19;
          $172 = (($171) + 1)|0;
          $19 = $172;
         }
        }
        $173 = $9;
        $174 = $173 ^ -1;
        $175 = $20;
        $176 = $7;
        $177 = (($176) + ($175<<3)|0);
        $178 = $177;
        $179 = $178;
        $180 = HEAP32[$179>>2]|0;
        $181 = (($178) + 4)|0;
        $182 = $181;
        $183 = HEAP32[$182>>2]|0;
        $184 = $183 & 65535;
        $185 = $184 & $174;
        $186 = $177;
        $187 = $186;
        $188 = HEAP32[$187>>2]|0;
        $189 = (($186) + 4)|0;
        $190 = $189;
        $191 = HEAP32[$190>>2]|0;
        $192 = $191 & -65536;
        $193 = $192 | $185;
        $194 = $177;
        $195 = $194;
        HEAP32[$195>>2] = $188;
        $196 = (($194) + 4)|0;
        $197 = $196;
        HEAP32[$197>>2] = $193;
        $198 = $20;
        $199 = $13;
        $200 = (($199) + ($198<<2)|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = $201 & -9;
        HEAP32[$200>>2] = $202;
        $203 = $20;
        $204 = $12;
        $205 = ((($204)) + 4|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = (($206) + ($203<<1)|0);
        $208 = HEAP16[$207>>1]|0;
        $209 = $11;
        $210 = (_checkAttr($208,2,0,0,$209)|0);
        $211 = ($210|0)!=(0);
        if (!($211)) {
         break L11;
        }
        $212 = $9;
        $213 = $20;
        $214 = $7;
        $215 = (($214) + ($213<<3)|0);
        $216 = $215;
        $217 = $216;
        $218 = HEAP32[$217>>2]|0;
        $219 = (($216) + 4)|0;
        $220 = $219;
        $221 = HEAP32[$220>>2]|0;
        $222 = (_bitshift64Lshr(($218|0),($221|0),48)|0);
        $223 = tempRet0;
        $224 = $222 | $212;
        $225 = $215;
        $226 = $225;
        $227 = HEAP32[$226>>2]|0;
        $228 = (($225) + 4)|0;
        $229 = $228;
        $230 = HEAP32[$229>>2]|0;
        $231 = $224 & 65535;
        $232 = (_bitshift64Shl(($231|0),0,48)|0);
        $233 = tempRet0;
        $234 = $230 & 65535;
        $235 = $227 | $232;
        $236 = $234 | $233;
        $237 = $215;
        $238 = $237;
        HEAP32[$238>>2] = $235;
        $239 = (($237) + 4)|0;
        $240 = $239;
        HEAP32[$240>>2] = $236;
        break L11;
       }
      } while(0);
      $14 = 1;
      $241 = $20;
      $16 = $241;
      $18 = 0;
      $17 = 0;
     }
    } while(0);
    $300 = $14;
    $301 = ($300|0)!=(0);
    if ($301) {
     $302 = $20;
     $303 = $13;
     $304 = (($303) + ($302<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = $305 & 1;
     $307 = ($306|0)!=(0);
     do {
      if ($307) {
       $308 = $20;
       $309 = $7;
       $310 = (($309) + ($308<<3)|0);
       $311 = $310;
       $312 = $311;
       $313 = HEAP32[$312>>2]|0;
       $314 = (($311) + 4)|0;
       $315 = $314;
       $316 = HEAP32[$315>>2]|0;
       $317 = $316 & 65535;
       $318 = $9;
       $319 = $317 & $318;
       $320 = ($319|0)!=(0);
       if ($320) {
        $321 = $20;
        $322 = $7;
        $323 = (($322) + ($321<<3)|0);
        $324 = $323;
        $325 = $324;
        $326 = HEAP32[$325>>2]|0;
        $327 = (($324) + 4)|0;
        $328 = $327;
        $329 = HEAP32[$328>>2]|0;
        $330 = (_bitshift64Lshr(($326|0),($329|0),16)|0);
        $331 = tempRet0;
        $332 = $330 & 65535;
        $333 = $9;
        $334 = $332 & $333;
        $335 = ($334|0)!=(0);
        if ($335) {
         break;
        }
       }
       $592 = $20;
       $593 = $13;
       $594 = (($593) + ($592<<2)|0);
       $595 = HEAP32[$594>>2]|0;
       $596 = $595 & 2;
       $597 = ($596|0)!=(0);
       if (!($597)) {
        $598 = $20;
        $599 = $12;
        $600 = ((($599)) + 4|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = (($601) + ($598<<1)|0);
        $603 = HEAP16[$602>>1]|0;
        $604 = $11;
        $605 = (_checkAttr($603,2,0,0,$604)|0);
        $606 = ($605|0)!=(0);
        if ($606) {
         $755 = $17;
         $756 = ($755|0)!=(0);
         if ($756) {
          $757 = $16;
          $758 = $19;
          $759 = ($757|0)==($758|0);
          if ($759) {
           $760 = $9;
           $761 = $760 ^ -1;
           $762 = $19;
           $763 = $7;
           $764 = (($763) + ($762<<3)|0);
           $765 = $764;
           $766 = $765;
           $767 = HEAP32[$766>>2]|0;
           $768 = (($765) + 4)|0;
           $769 = $768;
           $770 = HEAP32[$769>>2]|0;
           $771 = $770 & 65535;
           $772 = $771 & $761;
           $773 = $764;
           $774 = $773;
           $775 = HEAP32[$774>>2]|0;
           $776 = (($773) + 4)|0;
           $777 = $776;
           $778 = HEAP32[$777>>2]|0;
           $779 = $778 & -65536;
           $780 = $779 | $772;
           $781 = $764;
           $782 = $781;
           HEAP32[$782>>2] = $775;
           $783 = (($781) + 4)|0;
           $784 = $783;
           HEAP32[$784>>2] = $780;
          }
          $19 = -1;
          $17 = 0;
          $785 = $20;
          $16 = $785;
          $18 = 0;
          $786 = $9;
          $787 = $20;
          $788 = $7;
          $789 = (($788) + ($787<<3)|0);
          $790 = $789;
          $791 = $790;
          $792 = HEAP32[$791>>2]|0;
          $793 = (($790) + 4)|0;
          $794 = $793;
          $795 = HEAP32[$794>>2]|0;
          $796 = $795 & 65535;
          $797 = $796 | $786;
          $798 = $789;
          $799 = $798;
          $800 = HEAP32[$799>>2]|0;
          $801 = (($798) + 4)|0;
          $802 = $801;
          $803 = HEAP32[$802>>2]|0;
          $804 = $797 & 65535;
          $805 = $803 & -65536;
          $806 = $805 | $804;
          $807 = $789;
          $808 = $807;
          HEAP32[$808>>2] = $800;
          $809 = (($807) + 4)|0;
          $810 = $809;
          HEAP32[$810>>2] = $806;
         }
         $811 = $18;
         $812 = (($811) + 1)|0;
         $18 = $812;
         break L11;
        }
       }
       $607 = $20;
       $608 = $12;
       $609 = ((($608)) + 4|0);
       $610 = HEAP32[$609>>2]|0;
       $611 = (($610) + ($607<<1)|0);
       $612 = HEAP16[$611>>1]|0;
       $613 = $11;
       $614 = (_checkAttr($612,2,0,0,$613)|0);
       $615 = ($614|0)!=(0);
       if (!($615)) {
        $616 = $20;
        $617 = $12;
        $618 = ((($617)) + 4|0);
        $619 = HEAP32[$618>>2]|0;
        $620 = (($619) + ($616<<1)|0);
        $621 = HEAP16[$620>>1]|0;
        $622 = $10;
        $623 = $11;
        $624 = (_checkAttr($621,$622,0,0,$623)|0);
        $625 = ($624|0)!=(0);
        if ($625) {
         break L11;
        }
       }
       $626 = $21;
       $627 = ($626|0)!=(0);
       $628 = $18;
       $629 = ($628|0)==(1);
       $or$cond3 = $627 & $629;
       if ($or$cond3) {
        $630 = $16;
        $631 = $19;
        $632 = ($630|0)!=($631|0);
        if ($632) {
         $633 = $9;
         $634 = $16;
         $635 = $7;
         $636 = (($635) + ($634<<3)|0);
         $637 = $636;
         $638 = $637;
         $639 = HEAP32[$638>>2]|0;
         $640 = (($637) + 4)|0;
         $641 = $640;
         $642 = HEAP32[$641>>2]|0;
         $643 = (_bitshift64Lshr(($639|0),($642|0),48)|0);
         $644 = tempRet0;
         $645 = $643 | $633;
         $646 = $636;
         $647 = $646;
         $648 = HEAP32[$647>>2]|0;
         $649 = (($646) + 4)|0;
         $650 = $649;
         $651 = HEAP32[$650>>2]|0;
         $652 = $645 & 65535;
         $653 = (_bitshift64Shl(($652|0),0,48)|0);
         $654 = tempRet0;
         $655 = $651 & 65535;
         $656 = $648 | $653;
         $657 = $655 | $654;
         $658 = $636;
         $659 = $658;
         HEAP32[$659>>2] = $656;
         $660 = (($658) + 4)|0;
         $661 = $660;
         HEAP32[$661>>2] = $657;
         $662 = $9;
         $663 = $662 ^ -1;
         $664 = $16;
         $665 = $7;
         $666 = (($665) + ($664<<3)|0);
         $667 = $666;
         $668 = $667;
         $669 = HEAP32[$668>>2]|0;
         $670 = (($667) + 4)|0;
         $671 = $670;
         $672 = HEAP32[$671>>2]|0;
         $673 = $672 & 65535;
         $674 = $673 & $663;
         $675 = $666;
         $676 = $675;
         $677 = HEAP32[$676>>2]|0;
         $678 = (($675) + 4)|0;
         $679 = $678;
         $680 = HEAP32[$679>>2]|0;
         $681 = $680 & -65536;
         $682 = $681 | $674;
         $683 = $666;
         $684 = $683;
         HEAP32[$684>>2] = $677;
         $685 = (($683) + 4)|0;
         $686 = $685;
         HEAP32[$686>>2] = $682;
         $687 = $16;
         $688 = $13;
         $689 = (($688) + ($687<<2)|0);
         $690 = HEAP32[$689>>2]|0;
         $691 = $690 & -9;
         HEAP32[$689>>2] = $691;
        }
       }
       $692 = $20;
       $693 = $12;
       $694 = ((($693)) + 4|0);
       $695 = HEAP32[$694>>2]|0;
       $696 = (($695) + ($692<<1)|0);
       $697 = HEAP16[$696>>1]|0;
       $698 = $11;
       $699 = (_checkAttr($697,2,0,0,$698)|0);
       $700 = ($699|0)!=(0);
       if (!($700)) {
        $17 = 1;
        break L11;
       }
       $701 = $16;
       $702 = $19;
       $703 = ($701|0)==($702|0);
       if ($703) {
        $704 = $9;
        $705 = $704 ^ -1;
        $706 = $19;
        $707 = $7;
        $708 = (($707) + ($706<<3)|0);
        $709 = $708;
        $710 = $709;
        $711 = HEAP32[$710>>2]|0;
        $712 = (($709) + 4)|0;
        $713 = $712;
        $714 = HEAP32[$713>>2]|0;
        $715 = $714 & 65535;
        $716 = $715 & $705;
        $717 = $708;
        $718 = $717;
        $719 = HEAP32[$718>>2]|0;
        $720 = (($717) + 4)|0;
        $721 = $720;
        $722 = HEAP32[$721>>2]|0;
        $723 = $722 & -65536;
        $724 = $723 | $716;
        $725 = $708;
        $726 = $725;
        HEAP32[$726>>2] = $719;
        $727 = (($725) + 4)|0;
        $728 = $727;
        HEAP32[$728>>2] = $724;
       }
       $19 = -1;
       $17 = 0;
       $729 = $20;
       $16 = $729;
       $18 = 1;
       $730 = $9;
       $731 = $20;
       $732 = $7;
       $733 = (($732) + ($731<<3)|0);
       $734 = $733;
       $735 = $734;
       $736 = HEAP32[$735>>2]|0;
       $737 = (($734) + 4)|0;
       $738 = $737;
       $739 = HEAP32[$738>>2]|0;
       $740 = $739 & 65535;
       $741 = $740 | $730;
       $742 = $733;
       $743 = $742;
       $744 = HEAP32[$743>>2]|0;
       $745 = (($742) + 4)|0;
       $746 = $745;
       $747 = HEAP32[$746>>2]|0;
       $748 = $741 & 65535;
       $749 = $747 & -65536;
       $750 = $749 | $748;
       $751 = $733;
       $752 = $751;
       HEAP32[$752>>2] = $744;
       $753 = (($751) + 4)|0;
       $754 = $753;
       HEAP32[$754>>2] = $750;
       break L11;
      }
     } while(0);
     $14 = 0;
     $336 = $21;
     $337 = ($336|0)!=(0);
     $338 = $18;
     $339 = ($338|0)==(1);
     $or$cond = $337 & $339;
     if ($or$cond) {
      $340 = $16;
      $341 = $19;
      $342 = ($340|0)!=($341|0);
      if ($342) {
       $343 = $9;
       $344 = $16;
       $345 = $7;
       $346 = (($345) + ($344<<3)|0);
       $347 = $346;
       $348 = $347;
       $349 = HEAP32[$348>>2]|0;
       $350 = (($347) + 4)|0;
       $351 = $350;
       $352 = HEAP32[$351>>2]|0;
       $353 = (_bitshift64Lshr(($349|0),($352|0),48)|0);
       $354 = tempRet0;
       $355 = $353 | $343;
       $356 = $346;
       $357 = $356;
       $358 = HEAP32[$357>>2]|0;
       $359 = (($356) + 4)|0;
       $360 = $359;
       $361 = HEAP32[$360>>2]|0;
       $362 = $355 & 65535;
       $363 = (_bitshift64Shl(($362|0),0,48)|0);
       $364 = tempRet0;
       $365 = $361 & 65535;
       $366 = $358 | $363;
       $367 = $365 | $364;
       $368 = $346;
       $369 = $368;
       HEAP32[$369>>2] = $366;
       $370 = (($368) + 4)|0;
       $371 = $370;
       HEAP32[$371>>2] = $367;
       $372 = $9;
       $373 = $372 ^ -1;
       $374 = $16;
       $375 = $7;
       $376 = (($375) + ($374<<3)|0);
       $377 = $376;
       $378 = $377;
       $379 = HEAP32[$378>>2]|0;
       $380 = (($377) + 4)|0;
       $381 = $380;
       $382 = HEAP32[$381>>2]|0;
       $383 = $382 & 65535;
       $384 = $383 & $373;
       $385 = $376;
       $386 = $385;
       $387 = HEAP32[$386>>2]|0;
       $388 = (($385) + 4)|0;
       $389 = $388;
       $390 = HEAP32[$389>>2]|0;
       $391 = $390 & -65536;
       $392 = $391 | $384;
       $393 = $376;
       $394 = $393;
       HEAP32[$394>>2] = $387;
       $395 = (($393) + 4)|0;
       $396 = $395;
       HEAP32[$396>>2] = $392;
       $397 = $16;
       $398 = $13;
       $399 = (($398) + ($397<<2)|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = $400 & -9;
       HEAP32[$399>>2] = $401;
       $402 = $9;
       $403 = $402 ^ -1;
       $404 = $20;
       $405 = $7;
       $406 = (($405) + ($404<<3)|0);
       $407 = $406;
       $408 = $407;
       $409 = HEAP32[$408>>2]|0;
       $410 = (($407) + 4)|0;
       $411 = $410;
       $412 = HEAP32[$411>>2]|0;
       $413 = (_bitshift64Lshr(($409|0),($412|0),16)|0);
       $414 = tempRet0;
       $415 = $413 & 65535;
       $416 = $415 & $403;
       $417 = $406;
       $418 = $417;
       $419 = HEAP32[$418>>2]|0;
       $420 = (($417) + 4)|0;
       $421 = $420;
       $422 = HEAP32[$421>>2]|0;
       $423 = (_bitshift64Shl(($416|0),0,16)|0);
       $424 = tempRet0;
       $425 = $419 & 65535;
       $426 = $425 | $423;
       $427 = $422 | $424;
       $428 = $406;
       $429 = $428;
       HEAP32[$429>>2] = $426;
       $430 = (($428) + 4)|0;
       $431 = $430;
       HEAP32[$431>>2] = $427;
       $432 = $9;
       $433 = $432 ^ -1;
       $434 = $20;
       $435 = $7;
       $436 = (($435) + ($434<<3)|0);
       $437 = $436;
       $438 = $437;
       $439 = HEAP32[$438>>2]|0;
       $440 = (($437) + 4)|0;
       $441 = $440;
       $442 = HEAP32[$441>>2]|0;
       $443 = $442 & 65535;
       $444 = $443 & $433;
       $445 = $436;
       $446 = $445;
       $447 = HEAP32[$446>>2]|0;
       $448 = (($445) + 4)|0;
       $449 = $448;
       $450 = HEAP32[$449>>2]|0;
       $451 = $450 & -65536;
       $452 = $451 | $444;
       $453 = $436;
       $454 = $453;
       HEAP32[$454>>2] = $447;
       $455 = (($453) + 4)|0;
       $456 = $455;
       HEAP32[$456>>2] = $452;
      }
     }
     $457 = $17;
     $458 = ($457|0)!=(0);
     if ($458) {
      label = 40;
     } else {
      $459 = $20;
      $460 = $13;
      $461 = (($460) + ($459<<2)|0);
      $462 = HEAP32[$461>>2]|0;
      $463 = $462 & 2;
      $464 = ($463|0)!=(0);
      if ($464) {
       label = 40;
      } else {
       $465 = $20;
       $466 = $12;
       $467 = ((($466)) + 4|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = (($468) + ($465<<1)|0);
       $470 = HEAP16[$469>>1]|0;
       $471 = $11;
       $472 = (_checkAttr($470,2,0,0,$471)|0);
       $473 = ($472|0)!=(0);
       if (!($473)) {
        label = 40;
       }
      }
     }
     if ((label|0) == 40) {
      label = 0;
      $474 = $9;
      $475 = $474 ^ -1;
      $476 = $20;
      $477 = $7;
      $478 = (($477) + ($476<<3)|0);
      $479 = $478;
      $480 = $479;
      $481 = HEAP32[$480>>2]|0;
      $482 = (($479) + 4)|0;
      $483 = $482;
      $484 = HEAP32[$483>>2]|0;
      $485 = (_bitshift64Lshr(($481|0),($484|0),16)|0);
      $486 = tempRet0;
      $487 = $485 & 65535;
      $488 = $487 & $475;
      $489 = $478;
      $490 = $489;
      $491 = HEAP32[$490>>2]|0;
      $492 = (($489) + 4)|0;
      $493 = $492;
      $494 = HEAP32[$493>>2]|0;
      $495 = (_bitshift64Shl(($488|0),0,16)|0);
      $496 = tempRet0;
      $497 = $491 & 65535;
      $498 = $497 | $495;
      $499 = $494 | $496;
      $500 = $478;
      $501 = $500;
      HEAP32[$501>>2] = $498;
      $502 = (($500) + 4)|0;
      $503 = $502;
      HEAP32[$503>>2] = $499;
      $504 = $9;
      $505 = $504 ^ -1;
      $506 = $20;
      $507 = $7;
      $508 = (($507) + ($506<<3)|0);
      $509 = $508;
      $510 = $509;
      $511 = HEAP32[$510>>2]|0;
      $512 = (($509) + 4)|0;
      $513 = $512;
      $514 = HEAP32[$513>>2]|0;
      $515 = $514 & 65535;
      $516 = $515 & $505;
      $517 = $508;
      $518 = $517;
      $519 = HEAP32[$518>>2]|0;
      $520 = (($517) + 4)|0;
      $521 = $520;
      $522 = HEAP32[$521>>2]|0;
      $523 = $522 & -65536;
      $524 = $523 | $516;
      $525 = $508;
      $526 = $525;
      HEAP32[$526>>2] = $519;
      $527 = (($525) + 4)|0;
      $528 = $527;
      HEAP32[$528>>2] = $524;
     }
     $529 = $20;
     $530 = $16;
     $531 = ($529|0)==($530|0);
     if ($531) {
      $532 = $16;
      $533 = $13;
      $534 = (($533) + ($532<<2)|0);
      $535 = HEAP32[$534>>2]|0;
      $536 = $535 & -9;
      HEAP32[$534>>2] = $536;
      $537 = $9;
      $538 = $537 ^ -1;
      $539 = $20;
      $540 = $7;
      $541 = (($540) + ($539<<3)|0);
      $542 = $541;
      $543 = $542;
      $544 = HEAP32[$543>>2]|0;
      $545 = (($542) + 4)|0;
      $546 = $545;
      $547 = HEAP32[$546>>2]|0;
      $548 = (_bitshift64Lshr(($544|0),($547|0),16)|0);
      $549 = tempRet0;
      $550 = $548 & 65535;
      $551 = $550 & $538;
      $552 = $541;
      $553 = $552;
      $554 = HEAP32[$553>>2]|0;
      $555 = (($552) + 4)|0;
      $556 = $555;
      $557 = HEAP32[$556>>2]|0;
      $558 = (_bitshift64Shl(($551|0),0,16)|0);
      $559 = tempRet0;
      $560 = $554 & 65535;
      $561 = $560 | $558;
      $562 = $557 | $559;
      $563 = $541;
      $564 = $563;
      HEAP32[$564>>2] = $561;
      $565 = (($563) + 4)|0;
      $566 = $565;
      HEAP32[$566>>2] = $562;
      $567 = $9;
      $568 = $567 ^ -1;
      $569 = $20;
      $570 = $7;
      $571 = (($570) + ($569<<3)|0);
      $572 = $571;
      $573 = $572;
      $574 = HEAP32[$573>>2]|0;
      $575 = (($572) + 4)|0;
      $576 = $575;
      $577 = HEAP32[$576>>2]|0;
      $578 = $577 & 65535;
      $579 = $578 & $568;
      $580 = $571;
      $581 = $580;
      $582 = HEAP32[$581>>2]|0;
      $583 = (($580) + 4)|0;
      $584 = $583;
      $585 = HEAP32[$584>>2]|0;
      $586 = $585 & -65536;
      $587 = $586 | $579;
      $588 = $571;
      $589 = $588;
      HEAP32[$589>>2] = $582;
      $590 = (($588) + 4)|0;
      $591 = $590;
      HEAP32[$591>>2] = $587;
     }
    }
   }
  } while(0);
  $813 = $20;
  $814 = (($813) + 1)|0;
  $20 = $814;
 }
 $815 = $14;
 $816 = ($815|0)!=(0);
 if (!($816)) {
  STACKTOP = sp;return;
 }
 $817 = $21;
 $818 = ($817|0)!=(0);
 $819 = $18;
 $820 = ($819|0)==(1);
 $or$cond5 = $818 & $820;
 if ($or$cond5) {
  $821 = $16;
  $822 = $19;
  $823 = ($821|0)!=($822|0);
  if ($823) {
   $824 = $9;
   $825 = $16;
   $826 = $7;
   $827 = (($826) + ($825<<3)|0);
   $828 = $827;
   $829 = $828;
   $830 = HEAP32[$829>>2]|0;
   $831 = (($828) + 4)|0;
   $832 = $831;
   $833 = HEAP32[$832>>2]|0;
   $834 = (_bitshift64Lshr(($830|0),($833|0),48)|0);
   $835 = tempRet0;
   $836 = $834 | $824;
   $837 = $827;
   $838 = $837;
   $839 = HEAP32[$838>>2]|0;
   $840 = (($837) + 4)|0;
   $841 = $840;
   $842 = HEAP32[$841>>2]|0;
   $843 = $836 & 65535;
   $844 = (_bitshift64Shl(($843|0),0,48)|0);
   $845 = tempRet0;
   $846 = $842 & 65535;
   $847 = $839 | $844;
   $848 = $846 | $845;
   $849 = $827;
   $850 = $849;
   HEAP32[$850>>2] = $847;
   $851 = (($849) + 4)|0;
   $852 = $851;
   HEAP32[$852>>2] = $848;
   $853 = $9;
   $854 = $853 ^ -1;
   $855 = $16;
   $856 = $7;
   $857 = (($856) + ($855<<3)|0);
   $858 = $857;
   $859 = $858;
   $860 = HEAP32[$859>>2]|0;
   $861 = (($858) + 4)|0;
   $862 = $861;
   $863 = HEAP32[$862>>2]|0;
   $864 = $863 & 65535;
   $865 = $864 & $854;
   $866 = $857;
   $867 = $866;
   $868 = HEAP32[$867>>2]|0;
   $869 = (($866) + 4)|0;
   $870 = $869;
   $871 = HEAP32[$870>>2]|0;
   $872 = $871 & -65536;
   $873 = $872 | $865;
   $874 = $857;
   $875 = $874;
   HEAP32[$875>>2] = $868;
   $876 = (($874) + 4)|0;
   $877 = $876;
   HEAP32[$877>>2] = $873;
   $878 = $16;
   $879 = $13;
   $880 = (($879) + ($878<<2)|0);
   $881 = HEAP32[$880>>2]|0;
   $882 = $881 & -9;
   HEAP32[$880>>2] = $882;
   $883 = $9;
   $884 = $883 ^ -1;
   $885 = $20;
   $886 = $7;
   $887 = (($886) + ($885<<3)|0);
   $888 = $887;
   $889 = $888;
   $890 = HEAP32[$889>>2]|0;
   $891 = (($888) + 4)|0;
   $892 = $891;
   $893 = HEAP32[$892>>2]|0;
   $894 = (_bitshift64Lshr(($890|0),($893|0),16)|0);
   $895 = tempRet0;
   $896 = $894 & 65535;
   $897 = $896 & $884;
   $898 = $887;
   $899 = $898;
   $900 = HEAP32[$899>>2]|0;
   $901 = (($898) + 4)|0;
   $902 = $901;
   $903 = HEAP32[$902>>2]|0;
   $904 = (_bitshift64Shl(($897|0),0,16)|0);
   $905 = tempRet0;
   $906 = $900 & 65535;
   $907 = $906 | $904;
   $908 = $903 | $905;
   $909 = $887;
   $910 = $909;
   HEAP32[$910>>2] = $907;
   $911 = (($909) + 4)|0;
   $912 = $911;
   HEAP32[$912>>2] = $908;
   $913 = $9;
   $914 = $913 ^ -1;
   $915 = $20;
   $916 = $7;
   $917 = (($916) + ($915<<3)|0);
   $918 = $917;
   $919 = $918;
   $920 = HEAP32[$919>>2]|0;
   $921 = (($918) + 4)|0;
   $922 = $921;
   $923 = HEAP32[$922>>2]|0;
   $924 = $923 & 65535;
   $925 = $924 & $914;
   $926 = $917;
   $927 = $926;
   $928 = HEAP32[$927>>2]|0;
   $929 = (($926) + 4)|0;
   $930 = $929;
   $931 = HEAP32[$930>>2]|0;
   $932 = $931 & -65536;
   $933 = $932 | $925;
   $934 = $917;
   $935 = $934;
   HEAP32[$935>>2] = $928;
   $936 = (($934) + 4)|0;
   $937 = $936;
   HEAP32[$937>>2] = $933;
  }
 }
 $938 = $17;
 $939 = ($938|0)!=(0);
 if (!($939)) {
  STACKTOP = sp;return;
 }
 $940 = $9;
 $941 = $940 ^ -1;
 $942 = $20;
 $943 = $7;
 $944 = (($943) + ($942<<3)|0);
 $945 = $944;
 $946 = $945;
 $947 = HEAP32[$946>>2]|0;
 $948 = (($945) + 4)|0;
 $949 = $948;
 $950 = HEAP32[$949>>2]|0;
 $951 = (_bitshift64Lshr(($947|0),($950|0),16)|0);
 $952 = tempRet0;
 $953 = $951 & 65535;
 $954 = $953 & $941;
 $955 = $944;
 $956 = $955;
 $957 = HEAP32[$956>>2]|0;
 $958 = (($955) + 4)|0;
 $959 = $958;
 $960 = HEAP32[$959>>2]|0;
 $961 = (_bitshift64Shl(($954|0),0,16)|0);
 $962 = tempRet0;
 $963 = $957 & 65535;
 $964 = $963 | $961;
 $965 = $960 | $962;
 $966 = $944;
 $967 = $966;
 HEAP32[$967>>2] = $964;
 $968 = (($966) + 4)|0;
 $969 = $968;
 HEAP32[$969>>2] = $965;
 $970 = $9;
 $971 = $970 ^ -1;
 $972 = $20;
 $973 = $7;
 $974 = (($973) + ($972<<3)|0);
 $975 = $974;
 $976 = $975;
 $977 = HEAP32[$976>>2]|0;
 $978 = (($975) + 4)|0;
 $979 = $978;
 $980 = HEAP32[$979>>2]|0;
 $981 = $980 & 65535;
 $982 = $981 & $971;
 $983 = $974;
 $984 = $983;
 $985 = HEAP32[$984>>2]|0;
 $986 = (($983) + 4)|0;
 $987 = $986;
 $988 = HEAP32[$987>>2]|0;
 $989 = $988 & -65536;
 $990 = $989 | $982;
 $991 = $974;
 $992 = $991;
 HEAP32[$992>>2] = $985;
 $993 = (($991) + 4)|0;
 $994 = $993;
 HEAP32[$994>>2] = $990;
 STACKTOP = sp;return;
}
function _resolveEmphasisAllSymbols($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $23 = $8;
 $24 = $10;
 $25 = ((($24)) + 616|0);
 $26 = (($25) + (($23*36)|0)|0);
 $27 = ((($26)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $14 = $28;
 $29 = $8;
 $30 = $10;
 $31 = ((($30)) + 616|0);
 $32 = (($31) + (($29*36)|0)|0);
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $15 = $34;
 $35 = $14;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $16 = 0;
  $17 = 0;
  while(1) {
   $37 = $17;
   $38 = $12;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $16;
   $43 = ($42|0)!=(0);
   $44 = $17;
   $45 = $7;
   $46 = (($45) + ($44<<3)|0);
   $47 = $46;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   if ($43) {
    $53 = (_bitshift64Lshr(($49|0),($52|0),16)|0);
    $54 = tempRet0;
    $55 = $53 & 65535;
    $56 = $9;
    $57 = $55 & $56;
    $58 = ($57|0)!=(0);
    if ($58) {
     $16 = 0;
     $59 = $9;
     $60 = $59 ^ -1;
     $61 = $17;
     $62 = $7;
     $63 = (($62) + ($61<<3)|0);
     $64 = $63;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $67 = (($64) + 4)|0;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $70 = (_bitshift64Lshr(($66|0),($69|0),16)|0);
     $71 = tempRet0;
     $72 = $70 & 65535;
     $73 = $72 & $60;
     $74 = $63;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + 4)|0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (_bitshift64Shl(($73|0),0,16)|0);
     $81 = tempRet0;
     $82 = $76 & 65535;
     $83 = $82 | $80;
     $84 = $79 | $81;
     $85 = $63;
     $86 = $85;
     HEAP32[$86>>2] = $83;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
    }
   } else {
    $89 = $49 & 65535;
    $90 = $9;
    $91 = $89 & $90;
    $92 = ($91|0)!=(0);
    if ($92) {
     $16 = 1;
     $93 = $9;
     $94 = $93 ^ -1;
     $95 = $17;
     $96 = $7;
     $97 = (($96) + ($95<<3)|0);
     $98 = $97;
     $99 = $98;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($98) + 4)|0;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 & 65535;
     $105 = $104 & $94;
     $106 = $97;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (($106) + 4)|0;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = $108 & -65536;
     $113 = $112 | $105;
     $114 = $97;
     $115 = $114;
     HEAP32[$115>>2] = $113;
     $116 = (($114) + 4)|0;
     $117 = $116;
     HEAP32[$117>>2] = $111;
    }
   }
   $118 = $16;
   $119 = ($118|0)!=(0);
   do {
    if ($119) {
     $120 = $9;
     $121 = ($120|0)!=(1);
     if (!($121)) {
      $122 = $17;
      $123 = $11;
      $124 = (($123) + ($122<<1)|0);
      $125 = HEAP16[$124>>1]|0;
      $126 = $125&65535;
      $127 = $126 & 32768;
      $128 = ($127|0)!=(0);
      if (!($128)) {
       break;
      }
     }
     $129 = $9;
     $130 = $17;
     $131 = $7;
     $132 = (($131) + ($130<<3)|0);
     $133 = $132;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = (_bitshift64Lshr(($135|0),($138|0),48)|0);
     $140 = tempRet0;
     $141 = $139 | $129;
     $142 = $132;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $148 = $141 & 65535;
     $149 = (_bitshift64Shl(($148|0),0,48)|0);
     $150 = tempRet0;
     $151 = $147 & 65535;
     $152 = $144 | $149;
     $153 = $151 | $150;
     $154 = $132;
     $155 = $154;
     HEAP32[$155>>2] = $152;
     $156 = (($154) + 4)|0;
     $157 = $156;
     HEAP32[$157>>2] = $153;
    }
   } while(0);
   $158 = $17;
   $159 = (($158) + 1)|0;
   $17 = $159;
  }
  STACKTOP = sp;return;
 }
 $160 = $15;
 $161 = ($160|0)!=(0);
 if ($161) {
  STACKTOP = sp;return;
 }
 $18 = 0;
 $19 = 0;
 $20 = -1;
 $21 = 0;
 while(1) {
  $162 = $21;
  $163 = $12;
  $164 = ((($163)) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ($162|0)<($165|0);
  if (!($166)) {
   break;
  }
  $167 = $18;
  $168 = ($167|0)!=(0);
  do {
   if ($168) {
    $169 = $21;
    $170 = $7;
    $171 = (($170) + ($169<<3)|0);
    $172 = $171;
    $173 = $172;
    $174 = HEAP32[$173>>2]|0;
    $175 = (($172) + 4)|0;
    $176 = $175;
    $177 = HEAP32[$176>>2]|0;
    $178 = (_bitshift64Lshr(($174|0),($177|0),16)|0);
    $179 = tempRet0;
    $180 = $178 & 65535;
    $181 = $9;
    $182 = $180 & $181;
    $183 = ($182|0)!=(0);
    if (!($183)) {
     $184 = $21;
     $185 = $7;
     $186 = (($185) + ($184<<3)|0);
     $187 = $186;
     $188 = $187;
     $189 = HEAP32[$188>>2]|0;
     $190 = (($187) + 4)|0;
     $191 = $190;
     $192 = HEAP32[$191>>2]|0;
     $193 = $192 & 65535;
     $194 = $9;
     $195 = $193 & $194;
     $196 = ($195|0)!=(0);
     if (!($196)) {
      break;
     }
    }
    $18 = 0;
   }
  } while(0);
  $197 = $18;
  $198 = ($197|0)!=(0);
  L32: do {
   if (!($198)) {
    $199 = $21;
    $200 = $7;
    $201 = (($200) + ($199<<3)|0);
    $202 = $201;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($202) + 4)|0;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = $204 & 65535;
    $209 = $9;
    $210 = $208 & $209;
    $211 = ($210|0)!=(0);
    if ($211) {
     $18 = 1;
     break;
    }
    $212 = $19;
    $213 = ($212|0)!=(0);
    if (!($213)) {
     $214 = $21;
     $215 = $7;
     $216 = (($215) + ($214<<3)|0);
     $217 = $216;
     $218 = $217;
     $219 = HEAP32[$218>>2]|0;
     $220 = (($217) + 4)|0;
     $221 = $220;
     $222 = HEAP32[$221>>2]|0;
     $223 = $222 & 65535;
     $224 = $9;
     $225 = $223 & $224;
     $226 = ($225|0)!=(0);
     if ($226) {
      $19 = 1;
      $227 = $21;
      $20 = $227;
     }
    }
    $228 = $19;
    $229 = ($228|0)!=(0);
    if ($229) {
     $230 = $21;
     $231 = $7;
     $232 = (($231) + ($230<<3)|0);
     $233 = $232;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = (($233) + 4)|0;
     $237 = $236;
     $238 = HEAP32[$237>>2]|0;
     $239 = $238 & 65535;
     $240 = $9;
     $241 = $239 & $240;
     $242 = ($241|0)!=(0);
     if ($242) {
      $243 = $21;
      $244 = $7;
      $245 = (($244) + ($243<<3)|0);
      $246 = $245;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_bitshift64Lshr(($248|0),($251|0),16)|0);
      $253 = tempRet0;
      $254 = $252 & 65535;
      $255 = $9;
      $256 = $254 & $255;
      $257 = ($256|0)!=(0);
      if ($257) {
       $19 = 0;
       $258 = $14;
       $259 = ($258|0)==(0);
       $260 = $15;
       $261 = ($260|0)!=(0);
       $or$cond = $259 | $261;
       if ($or$cond) {
        break;
       }
       $262 = $9;
       $263 = $262 ^ -1;
       $264 = $21;
       $265 = $7;
       $266 = (($265) + ($264<<3)|0);
       $267 = $266;
       $268 = $267;
       $269 = HEAP32[$268>>2]|0;
       $270 = (($267) + 4)|0;
       $271 = $270;
       $272 = HEAP32[$271>>2]|0;
       $273 = (_bitshift64Lshr(($269|0),($272|0),16)|0);
       $274 = tempRet0;
       $275 = $273 & 65535;
       $276 = $275 & $263;
       $277 = $266;
       $278 = $277;
       $279 = HEAP32[$278>>2]|0;
       $280 = (($277) + 4)|0;
       $281 = $280;
       $282 = HEAP32[$281>>2]|0;
       $283 = (_bitshift64Shl(($276|0),0,16)|0);
       $284 = tempRet0;
       $285 = $279 & 65535;
       $286 = $285 | $283;
       $287 = $282 | $284;
       $288 = $266;
       $289 = $288;
       HEAP32[$289>>2] = $286;
       $290 = (($288) + 4)|0;
       $291 = $290;
       HEAP32[$291>>2] = $287;
       $292 = $9;
       $293 = $292 ^ -1;
       $294 = $21;
       $295 = $7;
       $296 = (($295) + ($294<<3)|0);
       $297 = $296;
       $298 = $297;
       $299 = HEAP32[$298>>2]|0;
       $300 = (($297) + 4)|0;
       $301 = $300;
       $302 = HEAP32[$301>>2]|0;
       $303 = $302 & 65535;
       $304 = $303 & $293;
       $305 = $296;
       $306 = $305;
       $307 = HEAP32[$306>>2]|0;
       $308 = (($305) + 4)|0;
       $309 = $308;
       $310 = HEAP32[$309>>2]|0;
       $311 = $310 & -65536;
       $312 = $311 | $304;
       $313 = $296;
       $314 = $313;
       HEAP32[$314>>2] = $307;
       $315 = (($313) + 4)|0;
       $316 = $315;
       HEAP32[$316>>2] = $312;
       $317 = $9;
       $318 = $317 ^ -1;
       $319 = $20;
       $320 = $7;
       $321 = (($320) + ($319<<3)|0);
       $322 = $321;
       $323 = $322;
       $324 = HEAP32[$323>>2]|0;
       $325 = (($322) + 4)|0;
       $326 = $325;
       $327 = HEAP32[$326>>2]|0;
       $328 = $327 & 65535;
       $329 = $328 & $318;
       $330 = $321;
       $331 = $330;
       $332 = HEAP32[$331>>2]|0;
       $333 = (($330) + 4)|0;
       $334 = $333;
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -65536;
       $337 = $336 | $329;
       $338 = $321;
       $339 = $338;
       HEAP32[$339>>2] = $332;
       $340 = (($338) + 4)|0;
       $341 = $340;
       HEAP32[$341>>2] = $337;
       $342 = $20;
       $22 = $342;
       while(1) {
        $343 = $22;
        $344 = $21;
        $345 = ($343|0)<($344|0);
        if (!($345)) {
         break L32;
        }
        $346 = $9;
        $347 = ($346|0)!=(1);
        if ($347) {
         label = 35;
        } else {
         $348 = $22;
         $349 = $11;
         $350 = (($349) + ($348<<1)|0);
         $351 = HEAP16[$350>>1]|0;
         $352 = $351&65535;
         $353 = $352 & 32768;
         $354 = ($353|0)!=(0);
         if ($354) {
          label = 35;
         }
        }
        if ((label|0) == 35) {
         label = 0;
         $355 = $9;
         $356 = $22;
         $357 = $7;
         $358 = (($357) + ($356<<3)|0);
         $359 = $358;
         $360 = $359;
         $361 = HEAP32[$360>>2]|0;
         $362 = (($359) + 4)|0;
         $363 = $362;
         $364 = HEAP32[$363>>2]|0;
         $365 = (_bitshift64Lshr(($361|0),($364|0),48)|0);
         $366 = tempRet0;
         $367 = $365 | $355;
         $368 = $358;
         $369 = $368;
         $370 = HEAP32[$369>>2]|0;
         $371 = (($368) + 4)|0;
         $372 = $371;
         $373 = HEAP32[$372>>2]|0;
         $374 = $367 & 65535;
         $375 = (_bitshift64Shl(($374|0),0,48)|0);
         $376 = tempRet0;
         $377 = $373 & 65535;
         $378 = $370 | $375;
         $379 = $377 | $376;
         $380 = $358;
         $381 = $380;
         HEAP32[$381>>2] = $378;
         $382 = (($380) + 4)|0;
         $383 = $382;
         HEAP32[$383>>2] = $379;
        }
        $384 = $22;
        $385 = (($384) + 1)|0;
        $22 = $385;
       }
      }
     }
     $386 = $21;
     $387 = $13;
     $388 = (($387) + ($386<<2)|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = $389 & 1;
     $391 = ($390|0)!=(0);
     if (!($391)) {
      $19 = 0;
     }
    }
   }
  } while(0);
  $392 = $21;
  $393 = (($392) + 1)|0;
  $21 = $393;
 }
 STACKTOP = sp;return;
}
function _resolveEmphasisSingleSymbols($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $5;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $6;
  $13 = $3;
  $14 = (($13) + ($12<<3)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $17 & 65535;
  $22 = $4;
  $23 = $21 & $22;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $6;
   $26 = (($25) + 1)|0;
   $27 = $3;
   $28 = (($27) + ($26<<3)|0);
   $29 = $28;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (_bitshift64Lshr(($31|0),($34|0),16)|0);
   $36 = tempRet0;
   $37 = $35 & 65535;
   $38 = $4;
   $39 = $37 & $38;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $4;
    $42 = $41 ^ -1;
    $43 = $6;
    $44 = $3;
    $45 = (($44) + ($43<<3)|0);
    $46 = $45;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (($46) + 4)|0;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = $48 & 65535;
    $53 = $52 & $42;
    $54 = $45;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = $56 & -65536;
    $61 = $60 | $53;
    $62 = $45;
    $63 = $62;
    HEAP32[$63>>2] = $61;
    $64 = (($62) + 4)|0;
    $65 = $64;
    HEAP32[$65>>2] = $59;
    $66 = $4;
    $67 = $66 ^ -1;
    $68 = $6;
    $69 = (($68) + 1)|0;
    $70 = $3;
    $71 = (($70) + ($69<<3)|0);
    $72 = $71;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($72) + 4)|0;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (_bitshift64Lshr(($74|0),($77|0),16)|0);
    $79 = tempRet0;
    $80 = $78 & 65535;
    $81 = $80 & $67;
    $82 = $71;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = (_bitshift64Shl(($81|0),0,16)|0);
    $89 = tempRet0;
    $90 = $84 & 65535;
    $91 = $90 | $88;
    $92 = $87 | $89;
    $93 = $71;
    $94 = $93;
    HEAP32[$94>>2] = $91;
    $95 = (($93) + 4)|0;
    $96 = $95;
    HEAP32[$96>>2] = $92;
    $97 = $4;
    $98 = $6;
    $99 = $3;
    $100 = (($99) + ($98<<3)|0);
    $101 = $100;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($101) + 4)|0;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $107 = (_bitshift64Lshr(($103|0),($106|0),48)|0);
    $108 = tempRet0;
    $109 = $107 | $97;
    $110 = $100;
    $111 = $110;
    $112 = HEAP32[$111>>2]|0;
    $113 = (($110) + 4)|0;
    $114 = $113;
    $115 = HEAP32[$114>>2]|0;
    $116 = $109 & 65535;
    $117 = (_bitshift64Shl(($116|0),0,48)|0);
    $118 = tempRet0;
    $119 = $115 & 65535;
    $120 = $112 | $117;
    $121 = $119 | $118;
    $122 = $100;
    $123 = $122;
    HEAP32[$123>>2] = $120;
    $124 = (($122) + 4)|0;
    $125 = $124;
    HEAP32[$125>>2] = $121;
   }
  }
  $126 = $6;
  $127 = (($126) + 1)|0;
  $6 = $127;
 }
 STACKTOP = sp;return;
}
function _convertToPassage($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $17 = sp + 4|0;
 $18 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $19 = $8;
 $16 = $19;
 while(1) {
  $20 = $16;
  $21 = $9;
  $22 = ($20|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $16;
  $24 = $15;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 8;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $13;
   $30 = $29 ^ -1;
   $31 = $16;
   $32 = $11;
   $33 = (($32) + ($31<<3)|0);
   $34 = $33;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (_bitshift64Lshr(($36|0),($39|0),48)|0);
   $41 = tempRet0;
   $42 = $40 & $30;
   $43 = $33;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = $42 & 65535;
   $50 = (_bitshift64Shl(($49|0),0,48)|0);
   $51 = tempRet0;
   $52 = $48 & 65535;
   $53 = $45 | $50;
   $54 = $52 | $51;
   $55 = $33;
   $56 = $55;
   HEAP32[$56>>2] = $53;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = $54;
   $59 = $13;
   $60 = $59 ^ -1;
   $61 = $16;
   $62 = $11;
   $63 = (($62) + ($61<<3)|0);
   $64 = $63;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + 4)|0;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & 65535;
   $71 = $70 & $60;
   $72 = $63;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = (($72) + 4)|0;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & -65536;
   $79 = $78 | $71;
   $80 = $63;
   $81 = $80;
   HEAP32[$81>>2] = $74;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $79;
   $84 = $16;
   $85 = $15;
   $86 = (($85) + ($84<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 & -9;
   HEAP32[$86>>2] = $88;
  }
  $89 = $16;
  $90 = (($89) + 1)|0;
  $16 = $90;
 }
 $91 = $13;
 $92 = $8;
 $93 = $11;
 $94 = (($93) + ($92<<3)|0);
 $95 = $94;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = $97 & 65535;
 $102 = $101 | $91;
 $103 = $94;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = $102 & 65535;
 $110 = $105 & -65536;
 $111 = $110 | $109;
 $112 = $94;
 $113 = $112;
 HEAP32[$113>>2] = $111;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $108;
 $116 = $12;
 $117 = $14;
 $118 = ((($117)) + 616|0);
 $119 = (($118) + (($116*36)|0)|0);
 $120 = ((($119)) + 16|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $14;
 $123 = (_brailleIndicatorDefined($121,$122,$17)|0);
 $124 = ($123|0)!=(0);
 if (!($124)) {
  $125 = $12;
  $126 = $14;
  $127 = ((($126)) + 616|0);
  $128 = (($127) + (($125*36)|0)|0);
  $129 = ((($128)) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $14;
  $132 = (_brailleIndicatorDefined($130,$131,$17)|0);
  $133 = ($132|0)!=(0);
  if (!($133)) {
   $164 = $12;
   $165 = $14;
   $166 = ((($165)) + 616|0);
   $167 = (($166) + (($164*36)|0)|0);
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $14;
   $171 = (_brailleIndicatorDefined($169,$170,$17)|0);
   $172 = ($171|0)!=(0);
   if (!($172)) {
    STACKTOP = sp;return;
   }
   $173 = $12;
   $174 = $14;
   $175 = ((($174)) + 616|0);
   $176 = (($175) + (($173*36)|0)|0);
   $177 = ((($176)) + 24|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $14;
   $180 = (_brailleIndicatorDefined($178,$179,$18)|0);
   $181 = ($180|0)!=(0);
   if ($181) {
    $182 = HEAP32[$17>>2]|0;
    $183 = ((($182)) + 36|0);
    $184 = HEAP16[$183>>1]|0;
    $185 = $184 << 16 >> 16;
    $186 = HEAP32[$18>>2]|0;
    $187 = ((($186)) + 36|0);
    $188 = HEAP16[$187>>1]|0;
    $189 = $188 << 16 >> 16;
    $190 = ($185|0)==($189|0);
    if ($190) {
     $191 = HEAP32[$17>>2]|0;
     $192 = ((($191)) + 38|0);
     $193 = HEAP32[$18>>2]|0;
     $194 = ((($193)) + 38|0);
     $195 = HEAP32[$18>>2]|0;
     $196 = ((($195)) + 36|0);
     $197 = HEAP16[$196>>1]|0;
     $198 = $197 << 16 >> 16;
     $199 = $198<<1;
     $200 = (_memcmp($192,$194,$199)|0);
     $201 = ($200|0)!=(0);
     if (!($201)) {
      $202 = $13;
      $203 = $10;
      $204 = $11;
      $205 = (($204) + ($203<<3)|0);
      $206 = $205;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = $211 & 65535;
      $213 = $212 | $202;
      $214 = $205;
      $215 = $214;
      $216 = HEAP32[$215>>2]|0;
      $217 = (($214) + 4)|0;
      $218 = $217;
      $219 = HEAP32[$218>>2]|0;
      $220 = $213 & 65535;
      $221 = $219 & -65536;
      $222 = $221 | $220;
      $223 = $205;
      $224 = $223;
      HEAP32[$224>>2] = $216;
      $225 = (($223) + 4)|0;
      $226 = $225;
      HEAP32[$226>>2] = $222;
      $227 = $10;
      $228 = $15;
      $229 = (($228) + ($227<<2)|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = $230 | 8;
      HEAP32[$229>>2] = $231;
      STACKTOP = sp;return;
     }
    }
   }
   $232 = $13;
   $233 = $10;
   $234 = $11;
   $235 = (($234) + ($233<<3)|0);
   $236 = $235;
   $237 = $236;
   $238 = HEAP32[$237>>2]|0;
   $239 = (($236) + 4)|0;
   $240 = $239;
   $241 = HEAP32[$240>>2]|0;
   $242 = (_bitshift64Lshr(($238|0),($241|0),16)|0);
   $243 = tempRet0;
   $244 = $242 & 65535;
   $245 = $244 | $232;
   $246 = $235;
   $247 = $246;
   $248 = HEAP32[$247>>2]|0;
   $249 = (($246) + 4)|0;
   $250 = $249;
   $251 = HEAP32[$250>>2]|0;
   $252 = $245 & 65535;
   $253 = (_bitshift64Shl(($252|0),0,16)|0);
   $254 = tempRet0;
   $255 = $248 & 65535;
   $256 = $255 | $253;
   $257 = $251 | $254;
   $258 = $235;
   $259 = $258;
   HEAP32[$259>>2] = $256;
   $260 = (($258) + 4)|0;
   $261 = $260;
   HEAP32[$261>>2] = $257;
   STACKTOP = sp;return;
  }
 }
 $134 = $13;
 $135 = $9;
 $136 = $11;
 $137 = (($136) + ($135<<3)|0);
 $138 = $137;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = (_bitshift64Lshr(($140|0),($143|0),16)|0);
 $145 = tempRet0;
 $146 = $144 & 65535;
 $147 = $146 | $134;
 $148 = $137;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = $147 & 65535;
 $155 = (_bitshift64Shl(($154|0),0,16)|0);
 $156 = tempRet0;
 $157 = $150 & 65535;
 $158 = $157 | $155;
 $159 = $153 | $156;
 $160 = $137;
 $161 = $160;
 HEAP32[$161>>2] = $158;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $159;
 STACKTOP = sp;return;
}
function _allocStringBuffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__lou_allocMem(4,$4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _lou_backTranslateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_backTranslate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $11;
 $24 = $12;
 $25 = $13;
 $26 = $14;
 $27 = $15;
 $28 = $16;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $20;
 $33 = $21;
 $34 = (__lou_backTranslate($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,0,0)|0);
 STACKTOP = sp;return ($34|0);
}
function __lou_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer = sp;
 $29 = sp + 192|0;
 $30 = sp + 188|0;
 $31 = sp + 176|0;
 $32 = sp + 160|0;
 $39 = sp + 128|0;
 $40 = sp + 124|0;
 $43 = sp + 112|0;
 $49 = sp + 80|0;
 $50 = sp + 64|0;
 $54 = sp + 48|0;
 $56 = sp + 32|0;
 $57 = sp + 16|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $33 = 0;
 $35 = 0;
 $45 = 1;
 $60 = $15;
 $61 = ($60|0)==(0|0);
 $62 = $17;
 $63 = ($62|0)==(0|0);
 $or$cond = $61 | $63;
 $64 = $18;
 $65 = ($64|0)==(0|0);
 $or$cond3 = $or$cond | $65;
 $66 = $19;
 $67 = ($66|0)==(0|0);
 $or$cond5 = $or$cond3 | $67;
 $68 = $20;
 $69 = ($68|0)==(0|0);
 $or$cond7 = $or$cond5 | $69;
 if ($or$cond7) {
  $14 = 0;
  $489 = $14;
  STACKTOP = sp;return ($489|0);
 }
 $70 = $16;
 $71 = ($70|0)==(0|0);
 if ($71) {
  $72 = $15;
  $16 = $72;
 }
 $73 = $15;
 $74 = $16;
 __lou_getTable($73,$74,$29,$30);
 $75 = HEAP32[$29>>2]|0;
 $76 = ($75|0)==(0|0);
 if ($76) {
  $14 = 0;
  $489 = $14;
  STACKTOP = sp;return ($489|0);
 }
 $77 = $26;
 $78 = (__lou_isValidMode($77)|0);
 $79 = ($78|0)!=(0);
 if (!($79)) {
  $80 = $26;
  HEAP32[$vararg_buffer>>2] = $80;
  __lou_logMessage(40000,7153,$vararg_buffer);
 }
 $81 = HEAP32[3733]|0;
 $82 = ($81|0)!=(0|0);
 if (!($82)) {
  _initStringBufferPool_286();
 }
 $46 = 0;
 while(1) {
  $83 = $46;
  $84 = HEAP32[3733]|0;
  $85 = HEAP32[$84>>2]|0;
  $86 = ($83|0)<($85|0);
  if (!($86)) {
   break;
  }
  $87 = $46;
  (_releaseStringBuffer_287($87)|0);
  $88 = $46;
  $89 = (($88) + 1)|0;
  $46 = $89;
 }
 $44 = 0;
 while(1) {
  $90 = $44;
  $91 = $18;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)<($92|0);
  if ($93) {
   $94 = $44;
   $95 = $17;
   $96 = (($95) + ($94<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97&65535;
   $99 = ($98|0)!=(0);
   $490 = $99;
  } else {
   $490 = 0;
  }
  $100 = $44;
  if (!($490)) {
   break;
  }
  $101 = (($100) + 1)|0;
  $44 = $101;
 }
 $48 = $100;
 $102 = $48;
 $103 = (_getStringBuffer_288($102)|0);
 $46 = $103;
 $104 = $46;
 $105 = HEAP32[3733]|0;
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + ($104<<2)|0);
 $109 = HEAP32[$108>>2]|0;
 $47 = $109;
 $44 = 0;
 while(1) {
  $110 = $44;
  $111 = $48;
  $112 = ($110|0)<($111|0);
  if (!($112)) {
   break;
  }
  $113 = $26;
  $114 = $113 & 4;
  $115 = ($114|0)!=(0);
  $116 = $44;
  $117 = $17;
  $118 = (($117) + ($116<<1)|0);
  $119 = HEAP16[$118>>1]|0;
  if ($115) {
   $120 = $119&65535;
   $121 = $120 | 32768;
   $122 = $121&65535;
   $123 = $44;
   $124 = $47;
   $125 = (($124) + ($123<<1)|0);
   HEAP16[$125>>1] = $122;
  } else {
   $126 = HEAP32[$30>>2]|0;
   $127 = (__lou_getDotsForChar($119,$126)|0);
   $128 = $44;
   $129 = $47;
   $130 = (($129) + ($128<<1)|0);
   HEAP16[$130>>1] = $127;
  }
  $131 = $44;
  $132 = (($131) + 1)|0;
  $44 = $132;
 }
 $133 = HEAP32[$30>>2]|0;
 $134 = (__lou_getDotsForChar(32,$133)|0);
 $135 = $48;
 $136 = $47;
 $137 = (($136) + ($135<<1)|0);
 HEAP16[$137>>1] = $134;
 $138 = $46;
 HEAP32[$49>>2] = $138;
 $139 = ((($49)) + 4|0);
 $140 = $47;
 HEAP32[$139>>2] = $140;
 $141 = ((($49)) + 8|0);
 $142 = $48;
 HEAP32[$141>>2] = $142;
 ;HEAP32[$31>>2]=HEAP32[$49>>2]|0;HEAP32[$31+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$49+8>>2]|0;
 $143 = $20;
 $144 = HEAP32[$143>>2]|0;
 $145 = (_getStringBuffer_288($144)|0);
 $46 = $145;
 $146 = $46;
 HEAP32[$50>>2] = $146;
 $147 = ((($50)) + 4|0);
 $148 = $46;
 $149 = HEAP32[3733]|0;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + ($148<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 HEAP32[$147>>2] = $153;
 $154 = ((($50)) + 8|0);
 $155 = $20;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = ((($50)) + 12|0);
 HEAP32[$157>>2] = 0;
 ;HEAP32[$32>>2]=HEAP32[$50>>2]|0;HEAP32[$32+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$50+12>>2]|0;
 $158 = $21;
 $33 = $158;
 $159 = $22;
 $34 = $159;
 $160 = $23;
 $161 = ($160|0)!=(0|0);
 L37: do {
  if ($161) {
   $44 = 0;
   while(1) {
    $162 = $44;
    $163 = ((($31)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($162|0)<($164|0);
    if (!($165)) {
     break L37;
    }
    $166 = $44;
    $167 = $23;
    $168 = (($167) + ($166<<2)|0);
    HEAP32[$168>>2] = -1;
    $169 = $44;
    $170 = (($169) + 1)|0;
    $44 = $170;
   }
  }
 } while(0);
 $171 = $25;
 $172 = ($171|0)!=(0|0);
 if ($172) {
  $173 = $25;
  $174 = HEAP32[$173>>2]|0;
  HEAP32[$39>>2] = $174;
 } else {
  HEAP32[$39>>2] = -1;
 }
 HEAP32[$40>>2] = 0;
 $175 = $33;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = $33;
  $178 = $20;
  $179 = HEAP32[$178>>2]|0;
  _memset(($177|0),48,($179|0))|0;
 }
 $180 = $34;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = $34;
  $183 = $20;
  $184 = HEAP32[$183>>2]|0;
  _memset(($182|0),42,($184|0))|0;
 }
 $185 = ((($31)) + 8|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = $20;
 $188 = HEAP32[$187>>2]|0;
 $189 = (__lou_allocMem(5,0,$186,$188)|0);
 $36 = $189;
 $190 = ($189|0)!=(0|0);
 if (!($190)) {
  $14 = 0;
  $489 = $14;
  STACKTOP = sp;return ($489|0);
 }
 $191 = HEAP32[$29>>2]|0;
 $192 = ((($191)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)>(1);
 if ($194) {
  label = 40;
 } else {
  $195 = HEAP32[$29>>2]|0;
  $196 = ((($195)) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)!=(0);
  if ($198) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $199 = ((($31)) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $20;
  $202 = HEAP32[$201>>2]|0;
  $203 = (__lou_allocMem(6,0,$200,$202)|0);
  $37 = $203;
  $204 = ($203|0)!=(0|0);
  if (!($204)) {
   $14 = 0;
   $489 = $14;
   STACKTOP = sp;return ($489|0);
  }
  $205 = ((($31)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $20;
  $208 = HEAP32[$207>>2]|0;
  $209 = (__lou_allocMem(7,0,$206,$208)|0);
  $38 = $209;
  $210 = ($209|0)!=(0|0);
  if (!($210)) {
   $14 = 0;
   $489 = $14;
   STACKTOP = sp;return ($489|0);
  }
 }
 HEAP32[$43>>2] = 0;
 $211 = $27;
 $212 = ($211|0)!=(0|0);
 $213 = $28;
 $214 = ($213|0)!=(0|0);
 $or$cond9 = $212 & $214;
 if ($or$cond9) {
  $215 = $27;
  $41 = $215;
  $216 = $28;
  $217 = HEAP32[$216>>2]|0;
  $42 = $217;
 } else {
  $41 = 0;
  $42 = 0;
 }
 $218 = $36;
 $35 = $218;
 $219 = HEAP32[$29>>2]|0;
 $220 = ((($219)) + 4|0);
 $221 = HEAP32[$220>>2]|0;
 $51 = $221;
 $222 = HEAP32[$29>>2]|0;
 $223 = ((($222)) + 8|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)!=(0);
 $226 = $225 ? 0 : 1;
 $52 = $226;
 $227 = $35;
 $53 = $227;
 while(1) {
  $228 = $51;
  switch ($228|0) {
  case 1:  {
   $229 = HEAP32[$29>>2]|0;
   $230 = HEAP32[$30>>2]|0;
   $231 = $26;
   $232 = $51;
   $233 = $34;
   $234 = $53;
   $235 = $41;
   $236 = $42;
   $237 = (_backTranslateString($229,$230,$231,$232,$31,$32,$233,$234,$54,$39,$40,$235,$43,$236)|0);
   $45 = $237;
   break;
  }
  case 0:  {
   $238 = HEAP32[$29>>2]|0;
   $239 = HEAP32[$30>>2]|0;
   $240 = $26;
   $241 = $51;
   $242 = $53;
   $243 = $41;
   $244 = $42;
   $245 = (_makeCorrections_289($238,$239,$240,$241,$31,$32,$242,$54,$39,$40,$243,$43,$244)|0);
   $45 = $245;
   break;
  }
  default: {
   $246 = HEAP32[$29>>2]|0;
   $247 = HEAP32[$30>>2]|0;
   $248 = $26;
   $249 = $51;
   $250 = $53;
   $251 = $41;
   $252 = $42;
   $253 = (_translatePass_290($246,$247,$248,$249,$31,$32,$250,$54,$39,$40,$251,$43,$252)|0);
   $45 = $253;
  }
  }
  $254 = ((($32)) + 12|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = HEAP32[$54>>2]|0;
  $257 = $53;
  $258 = (($257) + ($256<<2)|0);
  HEAP32[$258>>2] = $255;
  $259 = $53;
  $260 = $35;
  $261 = ($259|0)==($260|0);
  L79: do {
   if ($261) {
    $262 = $37;
    $53 = $262;
    $263 = HEAP32[$54>>2]|0;
    $264 = ((($31)) + 8|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($263|0)<($265|0);
    if ($266) {
     $267 = HEAP32[$54>>2]|0;
     $268 = $18;
     HEAP32[$268>>2] = $267;
    }
   } else {
    $269 = $38;
    $55 = $269;
    $270 = $55;
    $271 = $35;
    $272 = $18;
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273) + 1)|0;
    $275 = $274<<2;
    _memcpy(($270|0),($271|0),($275|0))|0;
    $44 = 0;
    L83: while(1) {
     $276 = $44;
     $277 = $18;
     $278 = HEAP32[$277>>2]|0;
     $279 = ($276|0)<=($278|0);
     if (!($279)) {
      break L79;
     }
     $280 = $44;
     $281 = $55;
     $282 = (($281) + ($280<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($283|0)<(0);
     do {
      if ($284) {
       $285 = $53;
       $286 = HEAP32[$285>>2]|0;
       $287 = $44;
       $288 = $35;
       $289 = (($288) + ($287<<2)|0);
       HEAP32[$289>>2] = $286;
      } else {
       $290 = $44;
       $291 = $55;
       $292 = (($291) + ($290<<2)|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = HEAP32[$54>>2]|0;
       $295 = ($293|0)<($294|0);
       $296 = $44;
       $297 = $55;
       $298 = (($297) + ($296<<2)|0);
       $299 = HEAP32[$298>>2]|0;
       if ($295) {
        $300 = $53;
        $301 = (($300) + ($299<<2)|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = $44;
        $304 = $35;
        $305 = (($304) + ($303<<2)|0);
        HEAP32[$305>>2] = $302;
        break;
       }
       $306 = HEAP32[$54>>2]|0;
       $307 = ($299|0)==($306|0);
       if (!($307)) {
        label = 65;
        break L83;
       }
       $308 = HEAP32[$54>>2]|0;
       $309 = ((($31)) + 8|0);
       $310 = HEAP32[$309>>2]|0;
       $311 = ($308|0)<($310|0);
       $312 = $44;
       if ($311) {
        label = 63;
        break L83;
       }
       $319 = $55;
       $320 = (($319) + ($312<<2)|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = $53;
       $323 = (($322) + ($321<<2)|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = $44;
       $326 = $35;
       $327 = (($326) + ($325<<2)|0);
       HEAP32[$327>>2] = $324;
      }
     } while(0);
     $335 = $44;
     $336 = (($335) + 1)|0;
     $44 = $336;
    }
    if ((label|0) == 63) {
     label = 0;
     $313 = $18;
     HEAP32[$313>>2] = $312;
     $314 = ((($32)) + 12|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = $44;
     $317 = $35;
     $318 = (($317) + ($316<<2)|0);
     HEAP32[$318>>2] = $315;
     break;
    }
    else if ((label|0) == 65) {
     label = 0;
     $328 = $44;
     $329 = $18;
     HEAP32[$329>>2] = $328;
     $330 = ((($32)) + 12|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $44;
     $333 = $35;
     $334 = (($333) + ($332<<2)|0);
     HEAP32[$334>>2] = $331;
     break;
    }
   }
  } while(0);
  $337 = $51;
  $338 = (($337) + -1)|0;
  $51 = $338;
  $339 = $51;
  $340 = $52;
  $341 = ($339|0)>=($340|0);
  $342 = $45;
  $343 = ($342|0)!=(0);
  $or$cond11 = $341 & $343;
  if (!($or$cond11)) {
   break;
  }
  $344 = HEAP32[$31>>2]|0;
  (_releaseStringBuffer_287($344)|0);
  $345 = HEAP32[$32>>2]|0;
  HEAP32[$56>>2] = $345;
  $346 = ((($56)) + 4|0);
  $347 = ((($32)) + 4|0);
  $348 = HEAP32[$347>>2]|0;
  HEAP32[$346>>2] = $348;
  $349 = ((($56)) + 8|0);
  $350 = ((($32)) + 12|0);
  $351 = HEAP32[$350>>2]|0;
  HEAP32[$349>>2] = $351;
  ;HEAP32[$31>>2]=HEAP32[$56>>2]|0;HEAP32[$31+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$56+8>>2]|0;
  $352 = $20;
  $353 = HEAP32[$352>>2]|0;
  $354 = (_getStringBuffer_288($353)|0);
  $46 = $354;
  $355 = $46;
  HEAP32[$57>>2] = $355;
  $356 = ((($57)) + 4|0);
  $357 = $46;
  $358 = HEAP32[3733]|0;
  $359 = ((($358)) + 4|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = (($360) + ($357<<2)|0);
  $362 = HEAP32[$361>>2]|0;
  HEAP32[$356>>2] = $362;
  $363 = ((($57)) + 8|0);
  $364 = $20;
  $365 = HEAP32[$364>>2]|0;
  HEAP32[$363>>2] = $365;
  $366 = ((($57)) + 12|0);
  HEAP32[$366>>2] = 0;
  ;HEAP32[$32>>2]=HEAP32[$57>>2]|0;HEAP32[$32+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$57+12>>2]|0;
 }
 $367 = $45;
 $368 = ($367|0)!=(0);
 L101: do {
  if ($368) {
   $44 = 0;
   while(1) {
    $369 = $44;
    $370 = ((($32)) + 12|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ($369|0)<($371|0);
    if (!($372)) {
     break;
    }
    $373 = $44;
    $374 = ((($32)) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + ($373<<1)|0);
    $377 = HEAP16[$376>>1]|0;
    $378 = $44;
    $379 = $19;
    $380 = (($379) + ($378<<1)|0);
    HEAP16[$380>>1] = $377;
    $381 = $44;
    $382 = (($381) + 1)|0;
    $44 = $382;
   }
   $383 = ((($32)) + 12|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = $20;
   HEAP32[$385>>2] = $384;
   $386 = $24;
   $387 = ($386|0)!=(0|0);
   L107: do {
    if ($387) {
     $58 = -1;
     $59 = -1;
     $44 = 0;
     while(1) {
      $388 = $44;
      $389 = $18;
      $390 = HEAP32[$389>>2]|0;
      $391 = ($388|0)<($390|0);
      if (!($391)) {
       break;
      }
      $392 = $44;
      $393 = $35;
      $394 = (($393) + ($392<<2)|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = $59;
      $397 = ($395|0)>($396|0);
      if ($397) {
       while(1) {
        $398 = $59;
        $399 = $44;
        $400 = $35;
        $401 = (($400) + ($399<<2)|0);
        $402 = HEAP32[$401>>2]|0;
        $403 = ($398|0)<($402|0);
        if (!($403)) {
         break;
        }
        $404 = $59;
        $405 = ($404|0)>=(0);
        do {
         if ($405) {
          $406 = $59;
          $407 = $20;
          $408 = HEAP32[$407>>2]|0;
          $409 = ($406|0)<($408|0);
          if (!($409)) {
           break;
          }
          $410 = $58;
          $411 = ($410|0)<(0);
          $412 = $58;
          $413 = $411 ? 0 : $412;
          $414 = $59;
          $415 = $24;
          $416 = (($415) + ($414<<2)|0);
          HEAP32[$416>>2] = $413;
         }
        } while(0);
        $417 = $59;
        $418 = (($417) + 1)|0;
        $59 = $418;
       }
       $419 = $44;
       $58 = $419;
      }
      $420 = $44;
      $421 = (($420) + 1)|0;
      $44 = $421;
     }
     $422 = $59;
     $423 = ($422|0)<(0);
     if ($423) {
      $59 = 0;
     }
     while(1) {
      $424 = $59;
      $425 = $20;
      $426 = HEAP32[$425>>2]|0;
      $427 = ($424|0)<($426|0);
      if (!($427)) {
       break L107;
      }
      $428 = $58;
      $429 = $59;
      $430 = (($429) + 1)|0;
      $59 = $430;
      $431 = $24;
      $432 = (($431) + ($429<<2)|0);
      HEAP32[$432>>2] = $428;
     }
    }
   } while(0);
   $433 = $23;
   $434 = ($433|0)!=(0|0);
   if ($434) {
    $44 = 0;
    while(1) {
     $435 = $44;
     $436 = $18;
     $437 = HEAP32[$436>>2]|0;
     $438 = ($435|0)<($437|0);
     if (!($438)) {
      break L101;
     }
     $439 = $44;
     $440 = $35;
     $441 = (($440) + ($439<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = ($442|0)<(0);
     $444 = $44;
     do {
      if ($443) {
       $445 = $23;
       $446 = (($445) + ($444<<2)|0);
       HEAP32[$446>>2] = 0;
      } else {
       $447 = $35;
       $448 = (($447) + ($444<<2)|0);
       $449 = HEAP32[$448>>2]|0;
       $450 = $20;
       $451 = HEAP32[$450>>2]|0;
       $452 = (($451) - 1)|0;
       $453 = ($449|0)>($452|0);
       if ($453) {
        $454 = $20;
        $455 = HEAP32[$454>>2]|0;
        $456 = (($455) - 1)|0;
        $457 = $44;
        $458 = $23;
        $459 = (($458) + ($457<<2)|0);
        HEAP32[$459>>2] = $456;
        break;
       } else {
        $460 = $44;
        $461 = $35;
        $462 = (($461) + ($460<<2)|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = $44;
        $465 = $23;
        $466 = (($465) + ($464<<2)|0);
        HEAP32[$466>>2] = $463;
        break;
       }
      }
     } while(0);
     $467 = $44;
     $468 = (($467) + 1)|0;
     $44 = $468;
    }
   }
  }
 } while(0);
 $469 = $25;
 $470 = ($469|0)!=(0|0);
 do {
  if ($470) {
   $471 = $25;
   $472 = HEAP32[$471>>2]|0;
   $473 = ($472|0)!=(-1);
   if ($473) {
    $474 = $23;
    $475 = ($474|0)!=(0|0);
    if ($475) {
     $476 = $25;
     $477 = HEAP32[$476>>2]|0;
     $478 = $23;
     $479 = (($478) + ($477<<2)|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = $25;
     HEAP32[$481>>2] = $480;
     break;
    } else {
     $482 = HEAP32[$39>>2]|0;
     $483 = $25;
     HEAP32[$483>>2] = $482;
     break;
    }
   }
  }
 } while(0);
 $484 = $28;
 $485 = ($484|0)!=(0|0);
 if ($485) {
  $486 = HEAP32[$43>>2]|0;
  $487 = $28;
  HEAP32[$487>>2] = $486;
 }
 $488 = $45;
 $14 = $488;
 $489 = $14;
 STACKTOP = sp;return ($489|0);
}
function _initStringBufferPool_286() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 HEAP32[$2>>2] = 3;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 14936;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 14948;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 12;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 HEAP32[3733] = $11;
 STACKTOP = sp;return;
}
function _releaseStringBuffer_287($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[3733]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $2;
   $11 = HEAP32[3733]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
   $16 = $3;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[3733]|0;
    $19 = ((($18)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = HEAP32[3733]|0;
     $23 = ((($22)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = HEAP32[3733]|0;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     FUNCTION_TABLE_vi[$24 & 31]($30);
    }
   }
   $31 = $2;
   $32 = HEAP32[3733]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   HEAP32[$35>>2] = 0;
   $36 = $3;
   $1 = $36;
   $37 = $1;
   STACKTOP = sp;return ($37|0);
  }
 }
 $1 = 0;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _getStringBuffer_288($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[3733]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = HEAP32[3733]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[3733]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = $2;
  $20 = (FUNCTION_TABLE_iii[$17 & 31]($18,$19)|0);
  $21 = $3;
  $22 = HEAP32[3733]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  HEAP32[$25>>2] = $20;
  $26 = $3;
  $27 = HEAP32[3733]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  HEAP32[$30>>2] = 1;
  $31 = $3;
  $1 = $31;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  __lou_outOfMemory();
  $1 = -1;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _backTranslateString($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$off = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy6 = sp + 176|0;
 $$byval_copy = sp + 160|0;
 $29 = sp + 92|0;
 $30 = sp + 88|0;
 $38 = sp + 56|0;
 $39 = sp + 52|0;
 $40 = sp + 48|0;
 $41 = sp + 44|0;
 $42 = sp + 40|0;
 $43 = sp;
 $44 = sp + 36|0;
 $45 = sp + 32|0;
 $46 = sp + 16|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $35 = 0;
 $36 = 0;
 HEAP32[$38>>2] = 0;
 __lou_resetPassVariables();
 HEAP32[196] = 0;
 $34 = 0;
 $33 = 0;
 $32 = 0;
 $31 = 0;
 HEAP32[$30>>2] = 0;
 $37 = 114;
 $48 = $20;
 $49 = ((($48)) + 12|0);
 HEAP32[$49>>2] = 0;
 HEAP32[$29>>2] = 0;
 L1: while(1) {
  $50 = HEAP32[$29>>2]|0;
  $51 = $19;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $15;
  $56 = $20;
  _back_setBefore($55,$56,$43);
  $57 = $31;
  $58 = ($57|0)==(1);
  if ($58) {
   $59 = $43;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = $61 & 16;
   $66 = ($65|0)!=(0);
   $67 = (0)!=(0);
   $68 = $66 | $67;
   if ($68) {
    $31 = 2;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $69 = $31;
   $70 = ($69|0)==(2);
   if ($70) {
    $71 = $43;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($71) + 4)|0;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = $73 & 16;
    $78 = ($77|0)!=(0);
    $79 = (0)!=(0);
    $80 = $78 | $79;
    if (!($80)) {
     $81 = $43;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = $83 & 16777216;
     $88 = ($87|0)!=(0);
     $89 = (0)!=(0);
     $90 = $88 | $89;
     if (!($90)) {
      $31 = 0;
     }
    }
   }
  }
  $91 = $33;
  $92 = ($91|0)==(2);
  if ($92) {
   $93 = $20;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)>(0);
   if ($96) {
    $97 = $43;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = (($97) + 4)|0;
    $101 = $100;
    $102 = HEAP32[$101>>2]|0;
    $103 = $99 & 256;
    $104 = ($103|0)!=(0);
    $105 = (0)!=(0);
    $106 = $104 | $105;
    if (!($106)) {
     $107 = $43;
     $108 = $107;
     $109 = HEAP32[$108>>2]|0;
     $110 = (($107) + 4)|0;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = $109 & 67108864;
     $114 = ($113|0)!=(0);
     $115 = (0)!=(0);
     $116 = $114 | $115;
     if (!($116)) {
      $117 = $43;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = $119 & 1073741824;
      $124 = ($123|0)!=(0);
      $125 = (0)!=(0);
      $126 = $124 | $125;
      if (!($126)) {
       $33 = 0;
      }
     }
    }
   }
  }
  $127 = $15;
  $128 = HEAP32[$29>>2]|0;
  $129 = $17;
  $130 = $19;
  $131 = $20;
  $132 = $33;
  $133 = $34;
  $134 = $37;
  $135 = $43;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = (($135) + 4)|0;
  $139 = $138;
  $140 = HEAP32[$139>>2]|0;
  _back_selectRule($127,$128,$129,$130,$131,$132,$133,$40,$41,$42,$134,$38,$39,$137,$140,$44,$45,$46);
  $141 = $26;
  $142 = ($141|0)!=(0|0);
  if ($142) {
   $143 = $27;
   $144 = HEAP32[$143>>2]|0;
   $145 = $28;
   $146 = ($144|0)<($145|0);
   if ($146) {
    $147 = HEAP32[$42>>2]|0;
    $148 = $27;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($149) + 1)|0;
    HEAP32[$148>>2] = $150;
    $151 = $26;
    $152 = (($151) + ($149<<2)|0);
    HEAP32[$152>>2] = $147;
   }
  }
  $153 = HEAP32[$41>>2]|0;
  do {
   switch ($153|0) {
   case 89:  {
    $154 = $37;
    $155 = ($154|0)==(89);
    if ($155) {
     $156 = $15;
     $157 = HEAP32[$29>>2]|0;
     $158 = $19;
     $159 = $20;
     $160 = $21;
     $161 = $22;
     $162 = $24;
     $163 = $25;
     $164 = $31;
     $165 = $32;
     $166 = (_insertSpace($156,$157,$158,$159,$160,$161,$162,$163,$30,$164,$165)|0);
     $167 = ($166|0)!=(0);
     if (!($167)) {
      break L1;
     }
    }
    break;
   }
   case 118:  {
    HEAP32[$30>>2] = 1;
    $31 = 0;
    $33 = 0;
    while(1) {
     $168 = HEAP32[$40>>2]|0;
     $169 = (($168) + -1)|0;
     HEAP32[$40>>2] = $169;
     $170 = ($168|0)>(0);
     if (!($170)) {
      continue L1;
     }
     $171 = $20;
     $172 = ((($171)) + 12|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = HEAP32[$29>>2]|0;
     $175 = (($174) + 1)|0;
     HEAP32[$29>>2] = $175;
     $176 = $22;
     $177 = (($176) + ($174<<2)|0);
     HEAP32[$177>>2] = $173;
    }
    break;
   }
   case 119:  {
    $31 = 1;
    $33 = 0;
    while(1) {
     $178 = HEAP32[$40>>2]|0;
     $179 = (($178) + -1)|0;
     HEAP32[$40>>2] = $179;
     $180 = ($178|0)>(0);
     if (!($180)) {
      continue L1;
     }
     $181 = $20;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = HEAP32[$29>>2]|0;
     $185 = (($184) + 1)|0;
     HEAP32[$29>>2] = $185;
     $186 = $22;
     $187 = (($186) + ($184<<2)|0);
     HEAP32[$187>>2] = $183;
    }
    break;
   }
   case 121:  {
    $32 = 1;
    $33 = 0;
    while(1) {
     $188 = HEAP32[$40>>2]|0;
     $189 = (($188) + -1)|0;
     HEAP32[$40>>2] = $189;
     $190 = ($188|0)>(0);
     if (!($190)) {
      continue L1;
     }
     $191 = $20;
     $192 = ((($191)) + 12|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = HEAP32[$29>>2]|0;
     $195 = (($194) + 1)|0;
     HEAP32[$29>>2] = $195;
     $196 = $22;
     $197 = (($196) + ($194<<2)|0);
     HEAP32[$197>>2] = $193;
    }
    break;
   }
   case 120:  {
    $31 = 0;
    $33 = 0;
    while(1) {
     $198 = HEAP32[$40>>2]|0;
     $199 = (($198) + -1)|0;
     HEAP32[$40>>2] = $199;
     $200 = ($198|0)>(0);
     if (!($200)) {
      continue L1;
     }
     $201 = $20;
     $202 = ((($201)) + 12|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = HEAP32[$29>>2]|0;
     $205 = (($204) + 1)|0;
     HEAP32[$29>>2] = $205;
     $206 = $22;
     $207 = (($206) + ($204<<2)|0);
     HEAP32[$207>>2] = $203;
    }
    break;
   }
   case 122:  {
    $32 = 0;
    $33 = 0;
    while(1) {
     $208 = HEAP32[$40>>2]|0;
     $209 = (($208) + -1)|0;
     HEAP32[$40>>2] = $209;
     $210 = ($208|0)>(0);
     if (!($210)) {
      continue L1;
     }
     $211 = $20;
     $212 = ((($211)) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = HEAP32[$29>>2]|0;
     $215 = (($214) + 1)|0;
     HEAP32[$29>>2] = $215;
     $216 = $22;
     $217 = (($216) + ($214<<2)|0);
     HEAP32[$217>>2] = $213;
    }
    break;
   }
   case 117: case 115:  {
    $34 = 1;
    $33 = 0;
    while(1) {
     $218 = HEAP32[$40>>2]|0;
     $219 = (($218) + -1)|0;
     HEAP32[$40>>2] = $219;
     $220 = ($218|0)>(0);
     if (!($220)) {
      continue L1;
     }
     $221 = $20;
     $222 = ((($221)) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = HEAP32[$29>>2]|0;
     $225 = (($224) + 1)|0;
     HEAP32[$29>>2] = $225;
     $226 = $22;
     $227 = (($226) + ($224<<2)|0);
     HEAP32[$227>>2] = $223;
    }
    break;
   }
   case 116:  {
    $33 = 1;
    $31 = 0;
    while(1) {
     $228 = HEAP32[$40>>2]|0;
     $229 = (($228) + -1)|0;
     HEAP32[$40>>2] = $229;
     $230 = ($228|0)>(0);
     if (!($230)) {
      continue L1;
     }
     $231 = $20;
     $232 = ((($231)) + 12|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = HEAP32[$29>>2]|0;
     $235 = (($234) + 1)|0;
     HEAP32[$29>>2] = $235;
     $236 = $22;
     $237 = (($236) + ($234<<2)|0);
     HEAP32[$237>>2] = $233;
    }
    break;
   }
   case 70:  {
    $33 = 2;
    break;
   }
   case 206:  {
    $33 = 0;
    label = 45;
    break;
   }
   case 216: case 146: case 138: case 130: case 145: case 137: case 129:  {
    label = 45;
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 45) {
   while(1) {
    label = 0;
    $238 = HEAP32[$40>>2]|0;
    $239 = (($238) + -1)|0;
    HEAP32[$40>>2] = $239;
    $240 = ($238|0)>(0);
    if (!($240)) {
     continue L1;
    }
    $241 = $20;
    $242 = ((($241)) + 12|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = HEAP32[$29>>2]|0;
    $245 = (($244) + 1)|0;
    HEAP32[$29>>2] = $245;
    $246 = $22;
    $247 = (($246) + ($244<<2)|0);
    HEAP32[$247>>2] = $243;
    label = 45;
   }
  }
  $248 = HEAP32[$41>>2]|0;
  switch ($248|0) {
  case 73:  {
   $249 = $15;
   $250 = $16;
   $251 = $17;
   $252 = $19;
   $253 = $20;
   $254 = $22;
   $255 = $24;
   $256 = $25;
   $257 = $31;
   $258 = $32;
   $259 = HEAP32[$41>>2]|0;
   $260 = HEAP32[$42>>2]|0;
   $261 = HEAP32[$44>>2]|0;
   $262 = HEAP32[$45>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$46+12>>2]|0;
   $263 = (_back_passDoAction($249,$250,$29,$251,$252,$253,$254,$255,$256,$30,$257,$258,$259,$260,$261,$262,$$byval_copy)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    label = 49;
    break L1;
   }
   break;
  }
  case 72:  {
   while(1) {
    $265 = HEAP32[$40>>2]|0;
    $266 = (($265) + -1)|0;
    HEAP32[$40>>2] = $266;
    $267 = ($265|0)>(0);
    if (!($267)) {
     break;
    }
    $268 = $20;
    $269 = ((($268)) + 12|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = HEAP32[$29>>2]|0;
    $272 = (($271) + 1)|0;
    HEAP32[$29>>2] = $272;
    $273 = $22;
    $274 = (($273) + ($271<<2)|0);
    HEAP32[$274>>2] = $270;
   }
   $275 = HEAP32[$42>>2]|0;
   $276 = ((($275)) + 38|0);
   $277 = HEAP32[$42>>2]|0;
   $278 = ((($277)) + 34|0);
   $279 = HEAP16[$278>>1]|0;
   $280 = $279 << 16 >> 16;
   $281 = $15;
   $282 = $16;
   $283 = HEAP32[$29>>2]|0;
   $284 = $17;
   $285 = $19;
   $286 = $20;
   $287 = $22;
   $288 = $24;
   $289 = $25;
   $290 = $31;
   $291 = $32;
   $292 = (_putCharacters_297($276,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$30,$290,$291)|0);
   $293 = ($292|0)!=(0);
   if (!($293)) {
    break L1;
   }
   break;
  }
  case 114:  {
   $294 = HEAP32[$29>>2]|0;
   $295 = $19;
   $296 = ((($295)) + 4|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = (($297) + ($294<<1)|0);
   $299 = HEAP16[$298>>1]|0;
   $300 = $17;
   $301 = $20;
   $302 = HEAP32[$29>>2]|0;
   $303 = $22;
   $304 = (_undefinedDots($299,$300,$301,$302,$303)|0);
   $305 = ($304|0)!=(0);
   if (!($305)) {
    break L1;
   }
   $306 = HEAP32[$29>>2]|0;
   $307 = (($306) + 1)|0;
   HEAP32[$29>>2] = $307;
   break;
  }
  case 105:  {
   $33 = 1;
   label = 58;
   break;
  }
  case 107:  {
   $33 = 0;
   label = 58;
   break;
  }
  case 60:  {
   HEAP32[$30>>2] = 0;
   $31 = 0;
   $33 = 0;
   $34 = 0;
   label = 58;
   break;
  }
  default: {
   label = 58;
  }
  }
  do {
   if ((label|0) == 58) {
    label = 0;
    $308 = HEAP32[$42>>2]|0;
    $309 = ((($308)) + 34|0);
    $310 = HEAP16[$309>>1]|0;
    $311 = ($310<<16>>16)!=(0);
    if ($311) {
     $312 = HEAP32[$42>>2]|0;
     $313 = ((($312)) + 38|0);
     $314 = HEAP32[$42>>2]|0;
     $315 = ((($314)) + 36|0);
     $316 = HEAP16[$315>>1]|0;
     $317 = $316 << 16 >> 16;
     $318 = HEAP32[$42>>2]|0;
     $319 = ((($318)) + 34|0);
     $320 = HEAP16[$319>>1]|0;
     $321 = $320 << 16 >> 16;
     $322 = $15;
     $323 = HEAP32[$29>>2]|0;
     $324 = $19;
     $325 = $20;
     $326 = $22;
     $327 = $24;
     $328 = $25;
     $329 = $31;
     $330 = $32;
     $331 = (_back_updatePositions($313,$317,$321,$322,$323,$324,$325,$326,$327,$328,$30,$329,$330)|0);
     $332 = ($331|0)!=(0);
     if (!($332)) {
      break L1;
     }
     $333 = HEAP32[$40>>2]|0;
     $334 = HEAP32[$29>>2]|0;
     $335 = (($334) + ($333))|0;
     HEAP32[$29>>2] = $335;
     break;
    }
    $336 = HEAP32[$29>>2]|0;
    $337 = HEAP32[$40>>2]|0;
    $338 = (($336) + ($337))|0;
    $47 = $338;
    while(1) {
     $339 = HEAP32[$29>>2]|0;
     $340 = $19;
     $341 = ((($340)) + 4|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($342) + ($339<<1)|0);
     $344 = HEAP16[$343>>1]|0;
     $345 = $15;
     $346 = $16;
     $347 = HEAP32[$29>>2]|0;
     $348 = $17;
     $349 = $19;
     $350 = $20;
     $351 = $22;
     $352 = $24;
     $353 = $25;
     $354 = $31;
     $355 = $32;
     $356 = (_putCharacter_294($344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$30,$354,$355)|0);
     $357 = ($356|0)!=(0);
     if (!($357)) {
      break L1;
     }
     $358 = HEAP32[$29>>2]|0;
     $359 = (($358) + 1)|0;
     HEAP32[$29>>2] = $359;
     $360 = $47;
     $361 = ($359|0)==($360|0);
     if ($361) {
      break;
     }
    }
   }
  } while(0);
  $362 = HEAP32[$41>>2]|0;
  $$off = (($362) + -92)|0;
  $switch = ($$off>>>0)<(2);
  $363 = $15;
  $364 = HEAP32[$29>>2]|0;
  if ($switch) {
   $365 = $19;
   $366 = $20;
   $367 = $21;
   $368 = $22;
   $369 = $24;
   $370 = $25;
   $371 = $31;
   $372 = $32;
   $373 = (_insertSpace($363,$364,$365,$366,$367,$368,$369,$370,$30,$371,$372)|0);
   $374 = ($373|0)!=(0);
   if (!($374)) {
    break;
   }
  } else {
   $375 = $18;
   $376 = $19;
   _passSelectRule_291($363,$364,$375,$376,$41,$42,$44,$45,$46);
   $377 = HEAP32[$41>>2]|0;
   $378 = ($377|0)==(73);
   if ($378) {
    $379 = $15;
    $380 = $16;
    $381 = $17;
    $382 = $19;
    $383 = $20;
    $384 = $22;
    $385 = $24;
    $386 = $25;
    $387 = $31;
    $388 = $32;
    $389 = HEAP32[$41>>2]|0;
    $390 = HEAP32[$42>>2]|0;
    $391 = HEAP32[$44>>2]|0;
    $392 = HEAP32[$45>>2]|0;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$46+12>>2]|0;
    (_back_passDoAction($379,$380,$29,$381,$382,$383,$384,$385,$386,$30,$387,$388,$389,$390,$391,$392,$$byval_copy6)|0);
   }
  }
  $393 = HEAP32[$29>>2]|0;
  $394 = ($393|0)>(0);
  if ($394) {
   $395 = HEAP32[$29>>2]|0;
   $396 = (($395) - 1)|0;
   $397 = $19;
   $398 = ((($397)) + 4|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = (($399) + ($396<<1)|0);
   $401 = HEAP16[$400>>1]|0;
   $402 = $15;
   $403 = (_checkAttr_292($401,1,0,1,$402)|0);
   $404 = ($403|0)!=(0);
   $405 = HEAP32[$41>>2]|0;
   $406 = ($405|0)!=(93);
   $or$cond = $404 & $406;
   if ($or$cond) {
    $407 = HEAP32[$29>>2]|0;
    $35 = $407;
    $408 = $20;
    $409 = ((($408)) + 12|0);
    $410 = HEAP32[$409>>2]|0;
    $36 = $410;
   }
  }
  $411 = HEAP32[$41>>2]|0;
  $412 = ($411>>>0)>=(82);
  $413 = HEAP32[$41>>2]|0;
  $414 = ($413>>>0)<=(114);
  $or$cond3 = $412 & $414;
  if (!($or$cond3)) {
   $415 = HEAP32[$41>>2]|0;
   $416 = ($415>>>0)>=(61);
   $417 = HEAP32[$41>>2]|0;
   $418 = ($417>>>0)<=(70);
   $or$cond5 = $416 & $418;
   if (!($or$cond5)) {
    continue;
   }
  }
  $419 = HEAP32[$41>>2]|0;
  $37 = $419;
 }
 if ((label|0) == 49) {
  $14 = 0;
  $462 = $14;
  STACKTOP = sp;return ($462|0);
 }
 $420 = $36;
 $421 = ($420|0)!=(0);
 if ($421) {
  $422 = HEAP32[$29>>2]|0;
  $423 = $19;
  $424 = ((($423)) + 8|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = ($422|0)<($425|0);
  if ($426) {
   $427 = HEAP32[$29>>2]|0;
   $428 = $19;
   $429 = ((($428)) + 4|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = (($430) + ($427<<1)|0);
   $432 = HEAP16[$431>>1]|0;
   $433 = $15;
   $434 = (_checkAttr_292($432,1,0,1,$433)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    $436 = $35;
    HEAP32[$29>>2] = $436;
    $437 = $36;
    $438 = $20;
    $439 = ((($438)) + 12|0);
    HEAP32[$439>>2] = $437;
   }
  }
 }
 $440 = HEAP32[$29>>2]|0;
 $441 = $19;
 $442 = ((($441)) + 8|0);
 $443 = HEAP32[$442>>2]|0;
 $444 = ($440|0)<($443|0);
 L104: do {
  if ($444) {
   while(1) {
    $445 = HEAP32[$29>>2]|0;
    $446 = $19;
    $447 = ((($446)) + 4|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = (($448) + ($445<<1)|0);
    $450 = HEAP16[$449>>1]|0;
    $451 = $15;
    $452 = (_checkAttr_292($450,1,0,1,$451)|0);
    $453 = ($452|0)!=(0);
    if (!($453)) {
     break L104;
    }
    $454 = HEAP32[$29>>2]|0;
    $455 = (($454) + 1)|0;
    HEAP32[$29>>2] = $455;
    $456 = $19;
    $457 = ((($456)) + 8|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ($455|0)==($458|0);
    if ($459) {
     break;
    }
   }
  }
 } while(0);
 $460 = HEAP32[$29>>2]|0;
 $461 = $23;
 HEAP32[$461>>2] = $460;
 $14 = 1;
 $462 = $14;
 STACKTOP = sp;return ($462|0);
}
function _makeCorrections_289($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$byval_copy = 0, $$old = 0, $$old1 = 0, $$old2 = 0, $$old3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 144|0;
 $27 = sp + 84|0;
 $29 = sp + 76|0;
 $33 = sp + 60|0;
 $34 = sp + 56|0;
 $35 = sp + 52|0;
 $36 = sp + 48|0;
 $37 = sp + 32|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $28 = 1;
 HEAP32[$29>>2] = 0;
 $30 = 0;
 $31 = 0;
 $45 = $14;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $13 = 1;
  $221 = $13;
  STACKTOP = sp;return ($221|0);
 }
 HEAP32[$27>>2] = 0;
 $49 = $19;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = 0;
 __lou_resetPassVariables();
 while(1) {
  $51 = HEAP32[$27>>2]|0;
  $52 = $18;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = HEAP32[$27>>2]|0;
  $32 = $56;
  $57 = $18;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$27>>2]|0;
  $61 = (($59) - ($60))|0;
  $38 = $61;
  $62 = HEAP32[$27>>2]|0;
  $63 = $18;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $14;
  $69 = (_back_findCharOrDots($67,0,$68)|0);
  $39 = $69;
  $41 = 0;
  $70 = $28;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $14;
   $73 = HEAP32[$27>>2]|0;
   $74 = $17;
   $75 = $18;
   $76 = (_findBackPassRule($72,$73,$74,$75,$33,$34,$35,$36,$37)|0);
   $77 = ($76|0)==(0);
   $78 = $41;
   $79 = ($78|0)<(3);
   $or$cond = $77 & $79;
   if ($or$cond) {
    label = 8;
   } else {
    label = 23;
   }
  } else {
   label = 7;
  }
  L10: while(1) {
   if ((label|0) == 7) {
    label = 0;
    $$old = $41;
    $$old1 = ($$old|0)<(3);
    if ($$old1) {
     label = 8;
     continue;
    } else {
     label = 23;
     continue;
    }
   }
   else if ((label|0) == 8) {
    label = 0;
    $42 = 0;
    $43 = 0;
    $80 = $41;
    switch ($80|0) {
    case 0:  {
     $81 = $38;
     $82 = ($81|0)>=(2);
     if ($82) {
      $83 = $39;
      $84 = ((($83)) + 28|0);
      $85 = HEAP16[$84>>1]|0;
      $86 = $85&65535;
      $87 = $86 << 8;
      $43 = $87;
      $88 = HEAP32[$27>>2]|0;
      $89 = (($88) + 1)|0;
      $90 = $18;
      $91 = ((($90)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($92) + ($89<<1)|0);
      $94 = HEAP16[$93>>1]|0;
      $95 = $14;
      $96 = (_back_findCharOrDots($94,0,$95)|0);
      $40 = $96;
      $97 = $40;
      $98 = ((($97)) + 28|0);
      $99 = HEAP16[$98>>1]|0;
      $100 = $99&65535;
      $101 = $43;
      $102 = (($101) + ($100))|0;
      $43 = $102;
      $103 = $43;
      $104 = (($103>>>0) % 1123)&-1;
      $43 = $104;
      $105 = $43;
      $106 = $14;
      $107 = ((($106)) + 12104|0);
      $108 = (($107) + ($105<<2)|0);
      $109 = HEAP32[$108>>2]|0;
      $42 = $109;
     }
     break;
    }
    case 1:  {
     $110 = $38;
     $111 = ($110|0)>=(1);
     if ($111) {
      $38 = 1;
      $112 = $39;
      $113 = ((($112)) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      $42 = $114;
     }
     break;
    }
    case 2:  {
     HEAP32[$33>>2] = 82;
     $42 = 0;
     break;
    }
    default: {
    }
    }
    while(1) {
     $115 = $42;
     $116 = ($115|0)!=(0);
     if (!($116)) {
      break;
     }
     $117 = $42;
     $118 = $14;
     $119 = ((($118)) + 21088|0);
     $120 = (($119) + ($117<<3)|0);
     HEAP32[$34>>2] = $120;
     $121 = HEAP32[$34>>2]|0;
     $122 = ((($121)) + 28|0);
     $123 = HEAP32[$122>>2]|0;
     HEAP32[$33>>2] = $123;
     $124 = HEAP32[$34>>2]|0;
     $125 = ((($124)) + 34|0);
     $126 = HEAP16[$125>>1]|0;
     $127 = $126 << 16 >> 16;
     $44 = $127;
     $128 = $41;
     $129 = ($128|0)==(1);
     if ($129) {
      $$old2 = HEAP32[$33>>2]|0;
      $$old3 = ($$old2|0)==(74);
      if ($$old3) {
       label = 19;
      }
     } else {
      $130 = $44;
      $131 = $38;
      $132 = ($130|0)<=($131|0);
      if ($132) {
       $133 = HEAP32[$34>>2]|0;
       $134 = ((($133)) + 38|0);
       $135 = HEAP32[$27>>2]|0;
       $136 = $18;
       $137 = ((($136)) + 4|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (($138) + ($135<<1)|0);
       $140 = $44;
       $141 = $14;
       $142 = (_compareChars_296($134,$139,$140,0,$141)|0);
       $143 = ($142|0)!=(0);
       $144 = HEAP32[$33>>2]|0;
       $145 = ($144|0)==(74);
       $or$cond4 = $143 & $145;
       if ($or$cond4) {
        label = 19;
       }
      }
     }
     if ((label|0) == 19) {
      label = 0;
      $146 = $14;
      $147 = HEAP32[$27>>2]|0;
      $148 = $18;
      $149 = HEAP32[$33>>2]|0;
      $150 = HEAP32[$34>>2]|0;
      $151 = (_back_passDoTest($146,$147,$148,$149,$150,$35,$36,$37)|0);
      $152 = ($151|0)!=(0);
      if ($152) {
       label = 20;
       break;
      }
     }
     $153 = HEAP32[$34>>2]|0;
     $154 = ((($153)) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     $42 = $155;
    }
    if ((label|0) == 20) {
     label = 0;
     $41 = 4;
    }
    $156 = $41;
    $157 = (($156) + 1)|0;
    $41 = $157;
    label = 7;
    continue;
   }
   else if ((label|0) == 23) {
    label = 0;
    $158 = HEAP32[$33>>2]|0;
    switch ($158|0) {
    case 82:  {
     label = 24;
     break L10;
     break;
    }
    case 74:  {
     label = 26;
     break L10;
     break;
    }
    default: {
     break L10;
    }
    }
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $159 = $19;
   $160 = ((($159)) + 12|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $19;
   $163 = ((($162)) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($161|0)>=($164|0);
   if ($165) {
    break;
   }
   $166 = $19;
   $167 = ((($166)) + 12|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = HEAP32[$27>>2]|0;
   $170 = $20;
   $171 = (($170) + ($169<<2)|0);
   HEAP32[$171>>2] = $168;
   $172 = HEAP32[$27>>2]|0;
   $173 = (($172) + 1)|0;
   HEAP32[$27>>2] = $173;
   $174 = $18;
   $175 = ((($174)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + ($172<<1)|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $19;
   $180 = ((($179)) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + 1)|0;
   HEAP32[$180>>2] = $182;
   $183 = $19;
   $184 = ((($183)) + 4|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + ($181<<1)|0);
   HEAP16[$186>>1] = $178;
  }
  else if ((label|0) == 26) {
   label = 0;
   $187 = $24;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    $189 = $25;
    $190 = HEAP32[$189>>2]|0;
    $191 = $26;
    $192 = ($190|0)<($191|0);
    if ($192) {
     $193 = HEAP32[$34>>2]|0;
     $194 = $25;
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + 1)|0;
     HEAP32[$194>>2] = $196;
     $197 = $24;
     $198 = (($197) + ($195<<2)|0);
     HEAP32[$198>>2] = $193;
    }
   }
   $199 = $14;
   $200 = $15;
   $201 = $16;
   $202 = $18;
   $203 = $19;
   $204 = $20;
   $205 = $22;
   $206 = $23;
   $207 = $30;
   $208 = $31;
   $209 = HEAP32[$33>>2]|0;
   $210 = HEAP32[$34>>2]|0;
   $211 = HEAP32[$35>>2]|0;
   $212 = HEAP32[$36>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$37+12>>2]|0;
   $213 = (_back_passDoAction($199,$200,$27,$201,$202,$203,$204,$205,$206,$29,$207,$208,$209,$210,$211,$212,$$byval_copy)|0);
   $214 = ($213|0)!=(0);
   if (!($214)) {
    break;
   }
  }
  $215 = HEAP32[$27>>2]|0;
  $216 = $32;
  $217 = ($215|0)>($216|0);
  $218 = $217&1;
  $28 = $218;
 }
 $219 = HEAP32[$27>>2]|0;
 $220 = $21;
 HEAP32[$220>>2] = $219;
 $13 = 1;
 $221 = $13;
 STACKTOP = sp;return ($221|0);
}
function _translatePass_290($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$byval_copy = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 112|0;
 $26 = sp + 52|0;
 $28 = sp + 44|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $27 = 1;
 HEAP32[$28>>2] = 0;
 $29 = 0;
 $30 = 0;
 $37 = $18;
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = 0;
 HEAP32[$26>>2] = 0;
 __lou_resetPassVariables();
 L1: while(1) {
  $39 = HEAP32[$26>>2]|0;
  $40 = $17;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = HEAP32[$26>>2]|0;
  $31 = $44;
  $45 = $27;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $13;
   $48 = HEAP32[$26>>2]|0;
   $49 = $16;
   $50 = $17;
   _passSelectRule_291($47,$48,$49,$50,$32,$33,$34,$35,$36);
  } else {
   HEAP32[$32>>2] = 82;
  }
  $51 = HEAP32[$32>>2]|0;
  switch ($51|0) {
  case 77: case 76: case 75:  {
   $52 = $23;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    $54 = $24;
    $55 = HEAP32[$54>>2]|0;
    $56 = $25;
    $57 = ($55|0)<($56|0);
    if ($57) {
     $58 = HEAP32[$33>>2]|0;
     $59 = $24;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + 1)|0;
     HEAP32[$59>>2] = $61;
     $62 = $23;
     $63 = (($62) + ($60<<2)|0);
     HEAP32[$63>>2] = $58;
    }
   }
   $64 = $13;
   $65 = $14;
   $66 = $15;
   $67 = $17;
   $68 = $18;
   $69 = $19;
   $70 = $21;
   $71 = $22;
   $72 = $29;
   $73 = $30;
   $74 = HEAP32[$32>>2]|0;
   $75 = HEAP32[$33>>2]|0;
   $76 = HEAP32[$34>>2]|0;
   $77 = HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$36+12>>2]|0;
   $78 = (_back_passDoAction($64,$65,$26,$66,$67,$68,$69,$70,$71,$28,$72,$73,$74,$75,$76,$77,$$byval_copy)|0);
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break L1;
   }
   break;
  }
  case 82:  {
   $80 = $18;
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 1)|0;
   $84 = $18;
   $85 = ((($84)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($83|0)>($86|0);
   if ($87) {
    break L1;
   }
   $88 = $18;
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$26>>2]|0;
   $92 = $19;
   $93 = (($92) + ($91<<2)|0);
   HEAP32[$93>>2] = $90;
   $94 = HEAP32[$26>>2]|0;
   $95 = (($94) + 1)|0;
   HEAP32[$26>>2] = $95;
   $96 = $17;
   $97 = ((($96)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($94<<1)|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = $18;
   $102 = ((($101)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + 1)|0;
   HEAP32[$102>>2] = $104;
   $105 = $18;
   $106 = ((($105)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + ($103<<1)|0);
   HEAP16[$108>>1] = $100;
   break;
  }
  default: {
   break L1;
  }
  }
  $109 = HEAP32[$26>>2]|0;
  $110 = $31;
  $111 = ($109|0)>($110|0);
  $112 = $111&1;
  $27 = $112;
 }
 $113 = HEAP32[$26>>2]|0;
 $114 = $17;
 $115 = ((($114)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($113|0)<($116|0);
 if (!($117)) {
  $133 = HEAP32[$26>>2]|0;
  $134 = $20;
  HEAP32[$134>>2] = $133;
  STACKTOP = sp;return 1;
 }
 while(1) {
  $118 = HEAP32[$26>>2]|0;
  $119 = $17;
  $120 = ((($119)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($118<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $13;
  $125 = (_checkAttr_292($123,1,0,1,$124)|0);
  $126 = ($125|0)!=(0);
  if (!($126)) {
   label = 17;
   break;
  }
  $127 = HEAP32[$26>>2]|0;
  $128 = (($127) + 1)|0;
  HEAP32[$26>>2] = $128;
  $129 = $17;
  $130 = ((($129)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($128|0)==($131|0);
  if ($132) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $133 = HEAP32[$26>>2]|0;
  $134 = $20;
  HEAP32[$134>>2] = $133;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _passSelectRule_291($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 $23 = $14;
 $24 = $15;
 $25 = $16;
 $26 = $17;
 $27 = (_findBackPassRule($18,$19,$20,$21,$22,$23,$24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $13;
 HEAP32[$29>>2] = 82;
 STACKTOP = sp;return;
}
function _back_passDoAction($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $33 = sp + 20|0;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 HEAP32[$33>>2] = $15;
 $39 = $23;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $35 = $41;
 $42 = ((($16)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $37 = $43;
 $44 = HEAP32[$16>>2]|0;
 $45 = ((($16)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $18;
 $48 = $19;
 $49 = $21;
 $50 = $22;
 $51 = $23;
 $52 = $24;
 $53 = $25;
 $54 = $26;
 $55 = $27;
 $56 = $28;
 $57 = $29;
 $58 = $30;
 $59 = (_copyCharacters_293($44,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $17 = 0;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 $61 = $23;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $36 = $63;
 $64 = ((($16)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $34 = $65;
 while(1) {
  $66 = $34;
  $67 = ((($16)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $23;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $34;
  $74 = $24;
  $75 = (($74) + ($73<<2)|0);
  HEAP32[$75>>2] = $72;
  $76 = $34;
  $77 = (($76) + 1)|0;
  $34 = $77;
 }
 L8: while(1) {
  $78 = HEAP32[$33>>2]|0;
  $79 = $31;
  $80 = ((($79)) + 36|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = ($78|0)<($82|0);
  if (!($83)) {
   label = 22;
   break;
  }
  $84 = HEAP32[$33>>2]|0;
  $85 = $32;
  $86 = (($85) + ($84<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  switch ($88|0) {
  case 64: case 34:  {
   $89 = $23;
   $90 = ((($89)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = HEAP32[$33>>2]|0;
   $93 = (($92) + 1)|0;
   $94 = $32;
   $95 = (($94) + ($93<<1)|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = (($91) + ($97))|0;
   $99 = $23;
   $100 = ((($99)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($98|0)>($101|0);
   if ($102) {
    label = 9;
    break L8;
   }
   $103 = $23;
   $104 = ((($103)) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $23;
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105<<1)|0);
   $110 = HEAP32[$33>>2]|0;
   $111 = (($110) + 2)|0;
   $112 = $32;
   $113 = (($112) + ($111<<1)|0);
   $114 = HEAP32[$33>>2]|0;
   $115 = (($114) + 1)|0;
   $116 = $32;
   $117 = (($116) + ($115<<1)|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = $118&65535;
   $120 = $119<<1;
   _memcpy(($109|0),($113|0),($120|0))|0;
   $121 = HEAP32[$33>>2]|0;
   $122 = (($121) + 1)|0;
   $123 = $32;
   $124 = (($123) + ($122<<1)|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125&65535;
   $127 = $23;
   $128 = ((($127)) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + ($126))|0;
   HEAP32[$128>>2] = $130;
   $131 = HEAP32[$33>>2]|0;
   $132 = (($131) + 1)|0;
   $133 = $32;
   $134 = (($133) + ($132<<1)|0);
   $135 = HEAP16[$134>>1]|0;
   $136 = $135&65535;
   $137 = (($136) + 2)|0;
   $138 = HEAP32[$33>>2]|0;
   $139 = (($138) + ($137))|0;
   HEAP32[$33>>2] = $139;
   continue L8;
   break;
  }
  case 37:  {
   $140 = ((($16)) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($16)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $18;
   $145 = $22;
   $146 = $23;
   $147 = $24;
   $148 = $32;
   $149 = HEAP32[$33>>2]|0;
   $150 = (_back_swapReplace($141,$143,$144,$145,$146,$147,$148,$149)|0);
   $151 = ($150|0)!=(0);
   if (!($151)) {
    label = 12;
    break L8;
   }
   $152 = HEAP32[$33>>2]|0;
   $153 = (($152) + 3)|0;
   HEAP32[$33>>2] = $153;
   continue L8;
   break;
  }
  case 63:  {
   $154 = HEAP32[$33>>2]|0;
   $155 = (($154) + 1)|0;
   HEAP32[$33>>2] = $155;
   continue L8;
   break;
  }
  case 42:  {
   $156 = $36;
   $157 = $35;
   $158 = (($156) - ($157))|0;
   $38 = $158;
   $159 = $38;
   $160 = ($159|0)>(0);
   if ($160) {
    $161 = $35;
    $162 = $23;
    $163 = ((($162)) + 4|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + ($161<<1)|0);
    $166 = $36;
    $167 = $23;
    $168 = ((($167)) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = (($169) + ($166<<1)|0);
    $171 = $38;
    $172 = $171<<1;
    _memmove(($165|0),($170|0),($172|0))|0;
    $173 = $38;
    $174 = $23;
    $175 = ((($174)) + 12|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) - ($173))|0;
    HEAP32[$175>>2] = $177;
    $178 = $35;
    $36 = $178;
   }
   $179 = ((($16)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ((($16)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $18;
   $184 = $19;
   $185 = $21;
   $186 = $22;
   $187 = $23;
   $188 = $24;
   $189 = $25;
   $190 = $26;
   $191 = $27;
   $192 = $28;
   $193 = $29;
   $194 = $30;
   $195 = (_copyCharacters_293($180,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194)|0);
   $196 = ($195|0)!=(0);
   if (!($196)) {
    label = 18;
    break L8;
   }
   $197 = ((($16)) + 12|0);
   $198 = HEAP32[$197>>2]|0;
   $37 = $198;
   $199 = HEAP32[$33>>2]|0;
   $200 = (($199) + 1)|0;
   HEAP32[$33>>2] = $200;
   continue L8;
   break;
  }
  default: {
   $201 = $32;
   $202 = (__lou_handlePassVariableAction($201,$33)|0);
   $203 = ($202|0)!=(0);
   if ($203) {
    continue L8;
   } else {
    label = 21;
    break L8;
   }
  }
  }
 }
 if ((label|0) == 9) {
  $17 = 0;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 12) {
  $17 = 0;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 18) {
  $17 = 0;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 21) {
  $17 = 0;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 22) {
  $204 = $37;
  $205 = $20;
  HEAP32[$205>>2] = $204;
  $17 = 1;
  $206 = $17;
  STACKTOP = sp;return ($206|0);
 }
 return (0)|0;
}
function _checkAttr_292($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $5 = $0;
 $9 = $6;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $7 = $3;
 $8 = $4;
 $13 = $5;
 $14 = $13&65535;
 $15 = HEAP16[12074]|0;
 $16 = $15&65535;
 $17 = ($14|0)!=($16|0);
 if ($17) {
  $18 = $5;
  $19 = $7;
  $20 = $8;
  $21 = (_back_findCharOrDots($18,$19,$20)|0);
  $22 = ((($21)) + 16|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = 10400;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  $33 = $5;
  HEAP16[12074] = $33;
 }
 $34 = 10400;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $6;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $36 & $42;
 $47 = $39 & $45;
 $48 = ($46|0)!=(0);
 $49 = ($47|0)!=(0);
 $50 = $48 | $49;
 $51 = $50 ? 1 : 0;
 STACKTOP = sp;return ($51|0);
}
function _back_findCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = (__lou_charHash($11)|0);
 $10 = $12;
 $13 = $5;
 $14 = ($13|0)==(0);
 $15 = $10;
 $16 = $6;
 if ($14) {
  $17 = ((($16)) + 1856|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $7 = 72;
 } else {
  $20 = ((($16)) + 6348|0);
  $21 = (($20) + ($15<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $9 = $22;
  $7 = 104;
 }
 while(1) {
  $23 = $9;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $9;
  $26 = $6;
  $27 = ((($26)) + 21088|0);
  $28 = (($27) + ($25<<3)|0);
  $8 = $28;
  $29 = $8;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $4;
  $34 = $33&65535;
  $35 = ($32|0)==($34|0);
  $36 = $8;
  if ($35) {
   label = 6;
   break;
  }
  $37 = HEAP32[$36>>2]|0;
  $9 = $37;
 }
 if ((label|0) == 6) {
  $3 = $36;
  $46 = $3;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 8) {
  $38 = $4;
  $39 = $7;
  $40 = ((($39)) + 28|0);
  HEAP16[$40>>1] = $38;
  $41 = $7;
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $7;
  $44 = ((($43)) + 24|0);
  HEAP16[$44>>1] = $38;
  $45 = $7;
  $3 = $45;
  $46 = $3;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _copyCharacters_293($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $28;
 $30 = ($29|0)==(73);
 L1: do {
  if ($30) {
   while(1) {
    $31 = $15;
    $32 = $16;
    $33 = ($31|0)<($32|0);
    if (!($33)) {
     break L1;
    }
    $34 = $15;
    $35 = $20;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($34<<1)|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = $17;
    $41 = $18;
    $42 = $15;
    $43 = $19;
    $44 = $20;
    $45 = $21;
    $46 = $22;
    $47 = $23;
    $48 = $24;
    $49 = $25;
    $50 = $26;
    $51 = $27;
    $52 = (_putCharacter_294($39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)|0);
    $53 = ($52|0)!=(0);
    if (!($53)) {
     break;
    }
    $54 = $15;
    $55 = (($54) + 1)|0;
    $15 = $55;
   }
   $14 = 0;
   $98 = $14;
   STACKTOP = sp;return ($98|0);
  } else {
   $56 = $16;
   $57 = $15;
   $58 = ($56|0)>($57|0);
   if ($58) {
    $59 = $21;
    $60 = ((($59)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $16;
    $63 = (($61) + ($62))|0;
    $64 = $15;
    $65 = (($63) - ($64))|0;
    $66 = $21;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($65|0)>($68|0);
    if ($69) {
     $14 = 0;
     $98 = $14;
     STACKTOP = sp;return ($98|0);
    } else {
     while(1) {
      $70 = $16;
      $71 = $15;
      $72 = ($70|0)>($71|0);
      if (!($72)) {
       break L1;
      }
      $73 = $21;
      $74 = ((($73)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $15;
      $77 = $22;
      $78 = (($77) + ($76<<2)|0);
      HEAP32[$78>>2] = $75;
      $79 = $15;
      $80 = $20;
      $81 = ((($80)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + ($79<<1)|0);
      $84 = HEAP16[$83>>1]|0;
      $85 = $21;
      $86 = ((($85)) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $21;
      $89 = ((($88)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($87<<1)|0);
      HEAP16[$91>>1] = $84;
      $92 = $21;
      $93 = ((($92)) + 12|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + 1)|0;
      HEAP32[$93>>2] = $95;
      $96 = $15;
      $97 = (($96) + 1)|0;
      $15 = $97;
     }
    }
   }
  }
 } while(0);
 $14 = 1;
 $98 = $14;
 STACKTOP = sp;return ($98|0);
}
function _back_swapReplace($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $21 = 0;
 $22 = 0;
 $27 = $16;
 $28 = (($27) + 1)|0;
 $29 = $15;
 $30 = (($29) + ($28<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 << 16;
 $34 = $16;
 $35 = (($34) + 2)|0;
 $36 = $15;
 $37 = (($36) + ($35<<1)|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = $33 | $39;
 $17 = $40;
 $41 = $17;
 $42 = $11;
 $43 = ((($42)) + 21088|0);
 $44 = (($43) + ($41<<3)|0);
 $18 = $44;
 $45 = $18;
 $46 = ((($45)) + 34|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $18;
 $50 = ((($49)) + 38|0);
 $51 = (($50) + ($48<<1)|0);
 $19 = $51;
 $52 = $9;
 $20 = $52;
 while(1) {
  $53 = $20;
  $54 = $10;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   label = 19;
   break;
  }
  $24 = 0;
  while(1) {
   $56 = $24;
   $57 = $18;
   $58 = ((($57)) + 34|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = ($56|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $20;
   $63 = $12;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($62<<1)|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = $24;
   $70 = $18;
   $71 = ((($70)) + 38|0);
   $72 = (($71) + ($69<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&65535;
   $75 = ($68|0)==($74|0);
   if ($75) {
    break;
   }
   $76 = $24;
   $77 = (($76) + 1)|0;
   $24 = $77;
  }
  $78 = $24;
  $79 = $18;
  $80 = ((($79)) + 34|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = ($78|0)==($82|0);
  if ($83) {
   label = 8;
   break;
  }
  $85 = $24;
  $86 = $22;
  $87 = ($85|0)>=($86|0);
  if ($87) {
   $88 = $21;
   $25 = $88;
   $89 = $22;
   $23 = $89;
  } else {
   $25 = 0;
   $23 = 0;
  }
  while(1) {
   $90 = $25;
   $91 = $18;
   $92 = ((($91)) + 36|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93 << 16 >> 16;
   $95 = ($90|0)<($94|0);
   if (!($95)) {
    break;
   }
   $96 = $23;
   $97 = $24;
   $98 = ($96|0)==($97|0);
   if ($98) {
    label = 14;
    break;
   }
   $140 = $23;
   $141 = (($140) + 1)|0;
   $23 = $141;
   $142 = $25;
   $143 = $19;
   $144 = (($143) + ($142<<1)|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145&65535;
   $147 = $25;
   $148 = (($147) + ($146))|0;
   $25 = $148;
  }
  if ((label|0) == 14) {
   label = 0;
   $99 = $25;
   $100 = $19;
   $101 = (($100) + ($99<<1)|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = (($103) - 1)|0;
   $26 = $104;
   $105 = $13;
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $26;
   $109 = (($107) + ($108))|0;
   $110 = $13;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($109|0)>=($112|0);
   if ($113) {
    label = 15;
    break;
   }
   $114 = $13;
   $115 = ((($114)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $20;
   $118 = $14;
   $119 = (($118) + ($117<<2)|0);
   HEAP32[$119>>2] = $116;
   $120 = $13;
   $121 = ((($120)) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $13;
   $124 = ((($123)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($125) + ($122<<1)|0);
   $127 = $25;
   $128 = (($127) + 1)|0;
   $129 = $19;
   $130 = (($129) + ($128<<1)|0);
   $131 = $26;
   $132 = $131<<1;
   _memcpy(($126|0),($130|0),($132|0))|0;
   $133 = $26;
   $134 = $13;
   $135 = ((($134)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + ($133))|0;
   HEAP32[$135>>2] = $137;
   $138 = $25;
   $21 = $138;
   $139 = $23;
   $22 = $139;
  }
  $149 = $20;
  $150 = (($149) + 1)|0;
  $20 = $150;
 }
 if ((label|0) == 8) {
  $84 = $20;
  $8 = $84;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 15) {
  $8 = 0;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 19) {
  $151 = $20;
  $8 = $151;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 return (0)|0;
}
function _putCharacter_294($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$ = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $28 = sp + 60|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $30 = $14;
 $31 = $15;
 $32 = (_back_findCharOrDots($30,1,$31)|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $27 = $34;
 $35 = $27;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $83 = $14;
  $84 = $18;
  $85 = $20;
  $86 = $17;
  $87 = $21;
  $88 = (_undefinedDots($83,$84,$85,$86,$87)|0);
  $13 = $88;
  $89 = $13;
  STACKTOP = sp;return ($89|0);
 }
 $37 = $27;
 $38 = $15;
 $39 = ((($38)) + 21088|0);
 $40 = (($39) + ($37<<3)|0);
 $29 = $40;
 $41 = $29;
 $42 = ((($41)) + 34|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = ($43<<16>>16)!=(0);
 if ($44) {
  $45 = $29;
  $46 = ((($45)) + 38|0);
  $47 = $29;
  $48 = ((($47)) + 36|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $29;
  $52 = ((($51)) + 34|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = $15;
  $56 = $17;
  $57 = $19;
  $58 = $20;
  $59 = $21;
  $60 = $22;
  $61 = $23;
  $62 = $24;
  $63 = $25;
  $64 = $26;
  $65 = (_back_updatePositions($46,$50,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64)|0);
  $13 = $65;
  $89 = $13;
  STACKTOP = sp;return ($89|0);
 } else {
  $66 = $14;
  $67 = $16;
  $68 = (__lou_getCharFromDots($66,$67)|0);
  HEAP16[$28>>1] = $68;
  $69 = HEAP16[$28>>1]|0;
  $70 = $69&65535;
  $71 = ($70|0)==(0);
  $$ = $71 ? 32 : $68;
  HEAP16[$28>>1] = $$;
  $72 = $15;
  $73 = $17;
  $74 = $19;
  $75 = $20;
  $76 = $21;
  $77 = $22;
  $78 = $23;
  $79 = $24;
  $80 = $25;
  $81 = $26;
  $82 = (_back_updatePositions($28,1,1,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81)|0);
  $13 = $82;
  $89 = $13;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _back_updatePositions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $28 = $20;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $16;
 $32 = (($30) + ($31))|0;
 $33 = $20;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32|0)>($35|0);
 if (!($36)) {
  $37 = $18;
  $38 = $15;
  $39 = (($37) + ($38))|0;
  $40 = $19;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)>($42|0);
  if (!($43)) {
   $44 = $23;
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(0);
   if (!($46)) {
    $47 = $22;
    $48 = HEAP32[$47>>2]|0;
    $49 = $18;
    $50 = ($48|0)>=($49|0);
    if ($50) {
     $51 = $22;
     $52 = HEAP32[$51>>2]|0;
     $53 = $18;
     $54 = $15;
     $55 = (($53) + ($54))|0;
     $56 = ($52|0)<($55|0);
     if ($56) {
      $57 = $20;
      $58 = ((($57)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $16;
      $61 = (($60|0) / 2)&-1;
      $62 = (($59) + ($61))|0;
      $63 = $22;
      HEAP32[$63>>2] = $62;
      $64 = $23;
      HEAP32[$64>>2] = 1;
     }
    }
   }
   $27 = 0;
   while(1) {
    $65 = $27;
    $66 = $15;
    $67 = ($65|0)<($66|0);
    if (!($67)) {
     break;
    }
    $68 = $20;
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $18;
    $72 = $27;
    $73 = (($71) + ($72))|0;
    $74 = $21;
    $75 = (($74) + ($73<<2)|0);
    HEAP32[$75>>2] = $70;
    $76 = $27;
    $77 = (($76) + 1)|0;
    $27 = $77;
   }
   $78 = $14;
   $79 = $16;
   $80 = $17;
   $81 = $20;
   $82 = $24;
   $83 = $25;
   $84 = $26;
   $85 = (_putchars($78,$79,$80,$81,$82,$83,$84)|0);
   $13 = $85;
   $86 = $13;
   STACKTOP = sp;return ($86|0);
  }
 }
 $13 = 0;
 $86 = $13;
 STACKTOP = sp;return ($86|0);
}
function _undefinedDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $8;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $9;
 $18 = $10;
 $19 = (($18) + ($17<<2)|0);
 HEAP32[$19>>2] = $16;
 $20 = $7;
 $21 = $20 & 128;
 $22 = ($21|0)!=(0);
 if ($22) {
  $5 = 1;
  $54 = $5;
  STACKTOP = sp;return ($54|0);
 }
 $23 = $6;
 $24 = (__lou_unknownDots($23)|0);
 $11 = $24;
 $25 = $11;
 $26 = (_strlen($25)|0);
 $12 = $26;
 $27 = $8;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $12;
 $31 = (($29) + ($30))|0;
 $32 = $8;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $5 = 0;
  $54 = $5;
  STACKTOP = sp;return ($54|0);
 }
 $13 = 0;
 while(1) {
  $36 = $13;
  $37 = $12;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $13;
  $40 = $11;
  $41 = (($40) + ($39)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = $8;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $8;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($46<<1)|0);
  HEAP16[$51>>1] = $43;
  $52 = $13;
  $53 = (($52) + 1)|0;
  $13 = $53;
 }
 $5 = 1;
 $54 = $5;
 STACKTOP = sp;return ($54|0);
}
function _putchars($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = 0;
 $16 = $9;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $11;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $9;
  $22 = (($20) + ($21))|0;
  $23 = $11;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)>($25|0);
  if (!($26)) {
   $27 = $12;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $15;
    $31 = (($30) + 1)|0;
    $15 = $31;
    $32 = $8;
    $33 = (($32) + ($30<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $10;
    $36 = (_back_findCharOrDots($34,0,$35)|0);
    $37 = ((($36)) + 26|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $11;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 1)|0;
    HEAP32[$40>>2] = $42;
    $43 = $11;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($41<<1)|0);
    HEAP16[$46>>1] = $38;
    $47 = $12;
    HEAP32[$47>>2] = 0;
   }
   $48 = $13;
   $49 = ($48|0)!=(0);
   $50 = $14;
   $51 = ($50|0)!=(0);
   $or$cond = $49 | $51;
   L7: do {
    if ($or$cond) {
     while(1) {
      $73 = $15;
      $74 = $9;
      $75 = ($73|0)<($74|0);
      if (!($75)) {
       break L7;
      }
      $76 = $15;
      $77 = $8;
      $78 = (($77) + ($76<<1)|0);
      $79 = HEAP16[$78>>1]|0;
      $80 = $10;
      $81 = (_back_findCharOrDots($79,0,$80)|0);
      $82 = ((($81)) + 26|0);
      $83 = HEAP16[$82>>1]|0;
      $84 = $11;
      $85 = ((($84)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + 1)|0;
      HEAP32[$85>>2] = $87;
      $88 = $11;
      $89 = ((($88)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($86<<1)|0);
      HEAP16[$91>>1] = $83;
      $92 = $15;
      $93 = (($92) + 1)|0;
      $15 = $93;
     }
    } else {
     $52 = $11;
     $53 = ((($52)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $11;
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + ($54<<1)|0);
     $59 = $15;
     $60 = $8;
     $61 = (($60) + ($59<<1)|0);
     $62 = $9;
     $63 = $15;
     $64 = (($62) - ($63))|0;
     $65 = $64<<1;
     _memcpy(($58|0),($61|0),($65|0))|0;
     $66 = $9;
     $67 = $15;
     $68 = (($66) - ($67))|0;
     $69 = $11;
     $70 = ((($69)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($68))|0;
     HEAP32[$70>>2] = $72;
    }
   } while(0);
   $7 = 1;
   $94 = $7;
   STACKTOP = sp;return ($94|0);
  }
 }
 $7 = 0;
 $94 = $7;
 STACKTOP = sp;return ($94|0);
}
function _findBackPassRule($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $20 = $12;
 $21 = $10;
 $22 = ((($21)) + 12084|0);
 $23 = (($22) + ($20<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $19 = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   label = 12;
   break;
  }
  $27 = $19;
  $28 = $10;
  $29 = ((($28)) + 21088|0);
  $30 = (($29) + ($27<<3)|0);
  $31 = $15;
  HEAP32[$31>>2] = $30;
  $32 = $15;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $14;
  HEAP32[$36>>2] = $35;
  $37 = $14;
  $38 = HEAP32[$37>>2]|0;
  switch ($38|0) {
  case 74:  {
   $39 = $12;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    label = 9;
   }
   break;
  }
  case 73:  {
   $41 = $12;
   $42 = ($41|0)!=(1);
   if (!($42)) {
    label = 9;
   }
   break;
  }
  case 75:  {
   $43 = $12;
   $44 = ($43|0)!=(2);
   if (!($44)) {
    label = 9;
   }
   break;
  }
  case 76:  {
   $45 = $12;
   $46 = ($45|0)!=(3);
   if (!($46)) {
    label = 9;
   }
   break;
  }
  case 77:  {
   $47 = $12;
   $48 = ($47|0)!=(4);
   if (!($48)) {
    label = 9;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 9) {
   label = 0;
   $49 = $10;
   $50 = $11;
   $51 = $13;
   $52 = $14;
   $53 = HEAP32[$52>>2]|0;
   $54 = $15;
   $55 = HEAP32[$54>>2]|0;
   $56 = $16;
   $57 = $17;
   $58 = $18;
   $59 = (_back_passDoTest($49,$50,$51,$53,$55,$56,$57,$58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    label = 10;
    break;
   }
  }
  $61 = $15;
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $19 = $64;
 }
 if ((label|0) == 10) {
  $9 = 1;
  $65 = $9;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 12) {
  $9 = 0;
  $65 = $9;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _back_passDoTest($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 48|0;
 $20 = sp;
 $21 = sp + 8|0;
 $9 = $0;
 HEAP32[$10>>2] = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $19 = 0;
 $22 = $13;
 $23 = ((($22)) + 34|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 $26 = $13;
 $27 = ((($26)) + 38|0);
 $28 = (($27) + ($25<<1)|0);
 $29 = $14;
 HEAP32[$29>>2] = $28;
 $30 = $15;
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$10>>2]|0;
 $32 = $16;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = $16;
 HEAP32[$34>>2] = $31;
 $35 = $16;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = -1;
 $37 = $12;
 $38 = ($37|0)==(74);
 if ($38) {
  $18 = 0;
 } else {
  $18 = 1;
 }
 L4: while(1) {
  $39 = $15;
  $40 = HEAP32[$39>>2]|0;
  $41 = $13;
  $42 = ((($41)) + 36|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($40|0)<($44|0);
  if (!($45)) {
   label = 45;
   break;
  }
  HEAP32[$21>>2] = 1;
  $46 = HEAP32[$10>>2]|0;
  $47 = $11;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)>($49|0);
  if ($50) {
   label = 6;
   break;
  }
  $51 = $15;
  $52 = HEAP32[$51>>2]|0;
  $53 = $14;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  do {
   switch ($57|0) {
   case 32:  {
    label = 36;
    break L4;
    break;
   }
   case 96:  {
    $58 = HEAP32[$10>>2]|0;
    $59 = ($58|0)!=(0);
    if ($59) {
     HEAP32[$21>>2] = 0;
    }
    $60 = $15;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$60>>2] = $62;
    break;
   }
   case 126:  {
    $63 = HEAP32[$10>>2]|0;
    $64 = $11;
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)!=($66|0);
    if ($67) {
     HEAP32[$21>>2] = 0;
    }
    $68 = $15;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 1)|0;
    HEAP32[$68>>2] = $70;
    break;
   }
   case 95:  {
    $71 = $15;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + 1)|0;
    $74 = $14;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($73<<1)|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77&65535;
    $79 = HEAP32[$10>>2]|0;
    $80 = (($79) - ($78))|0;
    HEAP32[$10>>2] = $80;
    $81 = HEAP32[$10>>2]|0;
    $82 = ($81|0)<(0);
    if ($82) {
     HEAP32[$10>>2] = 0;
     HEAP32[$21>>2] = 0;
    }
    $83 = $15;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + 2)|0;
    HEAP32[$83>>2] = $85;
    break;
   }
   case 33:  {
    $86 = $19;
    $87 = ($86|0)!=(0);
    $88 = $87 ^ 1;
    $89 = $88&1;
    $19 = $89;
    $90 = $15;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$90>>2] = $92;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $93 = $11;
    $94 = HEAP32[$10>>2]|0;
    $95 = $14;
    $96 = HEAP32[$95>>2]|0;
    $97 = $15;
    $98 = HEAP32[$97>>2]|0;
    $99 = (_matchCurrentInput_295($93,$94,$96,$98)|0);
    HEAP32[$21>>2] = $99;
    $100 = $15;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 1)|0;
    $103 = $14;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($102<<1)|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = HEAP32[$10>>2]|0;
    $109 = (($108) + ($107))|0;
    HEAP32[$10>>2] = $109;
    $110 = $15;
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 1)|0;
    $113 = $14;
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($112<<1)|0);
    $116 = HEAP16[$115>>1]|0;
    $117 = $116&65535;
    $118 = (($117) + 2)|0;
    $119 = $15;
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($118))|0;
    HEAP32[$119>>2] = $121;
    break;
   }
   case 91:  {
    $122 = HEAP32[$10>>2]|0;
    $123 = $16;
    $124 = ((($123)) + 4|0);
    HEAP32[$124>>2] = $122;
    $125 = $15;
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + 1)|0;
    HEAP32[$125>>2] = $127;
    break;
   }
   case 93:  {
    $128 = HEAP32[$10>>2]|0;
    $129 = $16;
    $130 = ((($129)) + 8|0);
    HEAP32[$130>>2] = $128;
    $131 = $15;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[$131>>2] = $133;
    break;
   }
   case 36:  {
    $134 = $15;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1)|0;
    $137 = $14;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($136<<1)|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = $140&65535;
    $142 = $141 << 16;
    $143 = $15;
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + 2)|0;
    $146 = $14;
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + ($145<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = $142 | $150;
    $152 = ($151|0)<(0);
    $153 = $152 << 31 >> 31;
    $154 = $20;
    $155 = $154;
    HEAP32[$155>>2] = $151;
    $156 = (($154) + 4)|0;
    $157 = $156;
    HEAP32[$157>>2] = $153;
    $17 = 0;
    while(1) {
     $158 = $17;
     $159 = $15;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + 3)|0;
     $162 = $14;
     $163 = HEAP32[$162>>2]|0;
     $164 = (($163) + ($161<<1)|0);
     $165 = HEAP16[$164>>1]|0;
     $166 = $165&65535;
     $167 = ($158|0)<($166|0);
     if (!($167)) {
      break;
     }
     $168 = HEAP32[$10>>2]|0;
     $169 = $11;
     $170 = ((($169)) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($168|0)>=($171|0);
     if ($172) {
      label = 24;
      break;
     }
     $173 = HEAP32[$10>>2]|0;
     $174 = $11;
     $175 = ((($174)) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + ($173<<1)|0);
     $178 = HEAP16[$177>>1]|0;
     $179 = $18;
     $180 = $9;
     $181 = (_back_findCharOrDots($178,$179,$180)|0);
     $182 = ((($181)) + 16|0);
     $183 = $182;
     $184 = $183;
     $185 = HEAP32[$184>>2]|0;
     $186 = (($183) + 4)|0;
     $187 = $186;
     $188 = HEAP32[$187>>2]|0;
     $189 = $20;
     $190 = $189;
     $191 = HEAP32[$190>>2]|0;
     $192 = (($189) + 4)|0;
     $193 = $192;
     $194 = HEAP32[$193>>2]|0;
     $195 = $185 & $191;
     $196 = $188 & $194;
     $197 = ($195|0)!=(0);
     $198 = ($196|0)!=(0);
     $199 = $197 | $198;
     if (!($199)) {
      label = 26;
      break;
     }
     $200 = HEAP32[$10>>2]|0;
     $201 = (($200) + 1)|0;
     HEAP32[$10>>2] = $201;
     $202 = $17;
     $203 = (($202) + 1)|0;
     $17 = $203;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$21>>2] = 0;
    }
    else if ((label|0) == 26) {
     label = 0;
     HEAP32[$21>>2] = 0;
    }
    $204 = HEAP32[$21>>2]|0;
    $205 = ($204|0)!=(0);
    L36: do {
     if ($205) {
      $206 = $15;
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 3)|0;
      $209 = $14;
      $210 = HEAP32[$209>>2]|0;
      $211 = (($210) + ($208<<1)|0);
      $212 = HEAP16[$211>>1]|0;
      $213 = $212&65535;
      $17 = $213;
      while(1) {
       $214 = $17;
       $215 = $15;
       $216 = HEAP32[$215>>2]|0;
       $217 = (($216) + 4)|0;
       $218 = $14;
       $219 = HEAP32[$218>>2]|0;
       $220 = (($219) + ($217<<1)|0);
       $221 = HEAP16[$220>>1]|0;
       $222 = $221&65535;
       $223 = ($214|0)<($222|0);
       if (!($223)) {
        break L36;
       }
       $224 = HEAP32[$10>>2]|0;
       $225 = $11;
       $226 = ((($225)) + 8|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ($224|0)<($227|0);
       if (!($228)) {
        break L36;
       }
       $229 = HEAP32[$10>>2]|0;
       $230 = $11;
       $231 = ((($230)) + 4|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($232) + ($229<<1)|0);
       $234 = HEAP16[$233>>1]|0;
       $235 = $18;
       $236 = $9;
       $237 = (_back_findCharOrDots($234,$235,$236)|0);
       $238 = ((($237)) + 16|0);
       $239 = $238;
       $240 = $239;
       $241 = HEAP32[$240>>2]|0;
       $242 = (($239) + 4)|0;
       $243 = $242;
       $244 = HEAP32[$243>>2]|0;
       $245 = $20;
       $246 = $245;
       $247 = HEAP32[$246>>2]|0;
       $248 = (($245) + 4)|0;
       $249 = $248;
       $250 = HEAP32[$249>>2]|0;
       $251 = $241 & $247;
       $252 = $244 & $250;
       $253 = ($251|0)!=(0);
       $254 = ($252|0)!=(0);
       $255 = $253 | $254;
       if (!($255)) {
        break L36;
       }
       $256 = HEAP32[$10>>2]|0;
       $257 = (($256) + 1)|0;
       HEAP32[$10>>2] = $257;
       $258 = $17;
       $259 = (($258) + 1)|0;
       $17 = $259;
      }
     }
    } while(0);
    $260 = $15;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($261) + 5)|0;
    HEAP32[$260>>2] = $262;
    break;
   }
   case 37:  {
    $263 = $9;
    $264 = $11;
    $265 = $14;
    $266 = HEAP32[$265>>2]|0;
    $267 = $15;
    $268 = HEAP32[$267>>2]|0;
    $269 = (_back_swapTest($263,$264,$10,$266,$268)|0);
    HEAP32[$21>>2] = $269;
    $270 = $15;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($271) + 5)|0;
    HEAP32[$270>>2] = $272;
    break;
   }
   default: {
    $292 = $14;
    $293 = HEAP32[$292>>2]|0;
    $294 = $15;
    $295 = (__lou_handlePassVariableTest($293,$294,$21)|0);
    $296 = ($295|0)!=(0);
    if (!($296)) {
     label = 40;
     break L4;
    }
   }
   }
  } while(0);
  $297 = $19;
  $298 = ($297|0)!=(0);
  $299 = HEAP32[$21>>2]|0;
  $300 = ($299|0)!=(0);
  $or$cond = $298 | $300;
  if (!($or$cond)) {
   label = 43;
   break;
  }
  $301 = $19;
  $302 = ($301|0)!=(0);
  $303 = HEAP32[$21>>2]|0;
  $304 = ($303|0)!=(0);
  $or$cond3 = $302 & $304;
  if ($or$cond3) {
   label = 43;
   break;
  }
  $19 = 0;
 }
 if ((label|0) == 6) {
  $8 = 0;
  $305 = $8;
  STACKTOP = sp;return ($305|0);
 }
 else if ((label|0) == 36) {
  $273 = $15;
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + 1)|0;
  HEAP32[$273>>2] = $275;
  $276 = HEAP32[$10>>2]|0;
  $277 = $16;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
  $279 = $16;
  $280 = ((($279)) + 4|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ($281|0)==(-1);
  if ($282) {
   $283 = $16;
   $284 = HEAP32[$283>>2]|0;
   $285 = $16;
   $286 = ((($285)) + 4|0);
   HEAP32[$286>>2] = $284;
   $287 = $16;
   $288 = ((($287)) + 12|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $16;
   $291 = ((($290)) + 8|0);
   HEAP32[$291>>2] = $289;
  }
  $8 = 1;
  $305 = $8;
  STACKTOP = sp;return ($305|0);
 }
 else if ((label|0) == 40) {
  $8 = 0;
  $305 = $8;
  STACKTOP = sp;return ($305|0);
 }
 else if ((label|0) == 43) {
  $8 = 0;
  $305 = $8;
  STACKTOP = sp;return ($305|0);
 }
 else if ((label|0) == 45) {
  $8 = 1;
  $305 = $8;
  STACKTOP = sp;return ($305|0);
 }
 return (0)|0;
}
function _matchCurrentInput_295($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $10 = $11;
 $12 = $8;
 $13 = (($12) + 2)|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = $8;
  $16 = (($15) + 2)|0;
  $17 = $8;
  $18 = (($17) + 1)|0;
  $19 = $7;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($16) + ($22))|0;
  $24 = ($14|0)<($23|0);
  if (!($24)) {
   label = 6;
   break;
  }
  $25 = $9;
  $26 = $7;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
  $32 = $5;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($30<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ($29|0)!=($37|0);
  if ($38) {
   label = 4;
   break;
  }
  $39 = $9;
  $40 = (($39) + 1)|0;
  $9 = $40;
 }
 if ((label|0) == 4) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $4 = 1;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _back_swapTest($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 $13 = $17;
 $18 = $10;
 $19 = (($18) + 1)|0;
 $20 = $9;
 $21 = (($20) + ($19<<1)|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = $23 << 16;
 $25 = $10;
 $26 = (($25) + 2)|0;
 $27 = $9;
 $28 = (($27) + ($26<<1)|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $24 | $30;
 $14 = $31;
 $32 = $14;
 $33 = $6;
 $34 = ((($33)) + 21088|0);
 $35 = (($34) + ($32<<3)|0);
 $15 = $35;
 $11 = 0;
 while(1) {
  $36 = $11;
  $37 = $10;
  $38 = $9;
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($41) + 3)|0;
  $43 = ($36|0)<($42|0);
  if (!($43)) {
   break;
  }
  $12 = 0;
  while(1) {
   $44 = $12;
   $45 = $15;
   $46 = ((($45)) + 34|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = ($44|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $13;
   $51 = $7;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($50<<1)|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55&65535;
   $57 = $12;
   $58 = $15;
   $59 = ((($58)) + 38|0);
   $60 = (($59) + ($57<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($56|0)==($62|0);
   if ($63) {
    break;
   }
   $64 = $12;
   $65 = (($64) + 1)|0;
   $12 = $65;
  }
  $66 = $12;
  $67 = $15;
  $68 = ((($67)) + 34|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ($66|0)==($70|0);
  if ($71) {
   label = 8;
   break;
  }
  $72 = $13;
  $73 = (($72) + 1)|0;
  $13 = $73;
  $74 = $11;
  $75 = (($74) + 1)|0;
  $11 = $75;
 }
 if ((label|0) == 8) {
  $5 = 0;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 $76 = $10;
 $77 = (($76) + 2)|0;
 $78 = $9;
 $79 = (($78) + ($77<<1)|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80&65535;
 $82 = $10;
 $83 = (($82) + 3)|0;
 $84 = $9;
 $85 = (($84) + ($83<<1)|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = ($81|0)==($87|0);
 if ($88) {
  $89 = $13;
  $90 = $8;
  HEAP32[$90>>2] = $89;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 while(1) {
  $91 = $11;
  $92 = $10;
  $93 = (($92) + 4)|0;
  $94 = $9;
  $95 = (($94) + ($93<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96&65535;
  $98 = ($91|0)<($97|0);
  if (!($98)) {
   label = 21;
   break;
  }
  $12 = 0;
  while(1) {
   $99 = $12;
   $100 = $15;
   $101 = ((($100)) + 34|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 << 16 >> 16;
   $104 = ($99|0)<($103|0);
   if (!($104)) {
    break;
   }
   $105 = $13;
   $106 = $7;
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = $12;
   $113 = $15;
   $114 = ((($113)) + 38|0);
   $115 = (($114) + ($112<<1)|0);
   $116 = HEAP16[$115>>1]|0;
   $117 = $116&65535;
   $118 = ($111|0)!=($117|0);
   if ($118) {
    break;
   }
   $119 = $12;
   $120 = (($119) + 1)|0;
   $12 = $120;
  }
  $121 = $12;
  $122 = $15;
  $123 = ((($122)) + 34|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 << 16 >> 16;
  $126 = ($121|0)<($125|0);
  if ($126) {
   $127 = $12;
   $128 = $15;
   $129 = ((($128)) + 34|0);
   $130 = HEAP16[$129>>1]|0;
   $131 = $130 << 16 >> 16;
   $132 = ($127|0)<($131|0);
   if ($132) {
    label = 19;
    break;
   }
  }
  $135 = $13;
  $136 = (($135) + 1)|0;
  $13 = $136;
  $137 = $11;
  $138 = (($137) + 1)|0;
  $11 = $138;
 }
 if ((label|0) == 19) {
  $133 = $13;
  $134 = $8;
  HEAP32[$134>>2] = $133;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 21) {
  $139 = $13;
  $140 = $8;
  HEAP32[$140>>2] = $139;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _compareChars_296($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $8;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 $11 = 0;
 while(1) {
  $14 = $11;
  $15 = $8;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $11;
  $18 = $6;
  $19 = (($18) + ($17<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $9;
  $22 = $10;
  $23 = (_back_findCharOrDots($20,$21,$22)|0);
  $24 = ((($23)) + 28|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $11;
  $28 = $7;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $9;
  $32 = $10;
  $33 = (_back_findCharOrDots($30,$31,$32)|0);
  $34 = ((($33)) + 28|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($26|0)!=($36|0);
  if ($37) {
   label = 6;
   break;
  }
  $38 = $11;
  $39 = (($38) + 1)|0;
  $11 = $39;
 }
 if ((label|0) == 6) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 8) {
  $5 = 1;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _back_setBefore($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $22 = 32;
 } else {
  $11 = $4;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - 1)|0;
  $15 = $4;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $22 = $20;
 }
 $21 = $22&65535;
 $6 = $21;
 $23 = $6;
 $24 = $3;
 $25 = (_back_findCharOrDots($23,0,$24)|0);
 $26 = ((($25)) + 16|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $29;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 STACKTOP = sp;return;
}
function _back_selectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $31 = sp + 8|0;
 $41 = sp;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $44 = $31;
 $45 = $44;
 HEAP32[$45>>2] = $13;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $14;
 $32 = $15;
 $33 = $16;
 $34 = $17;
 $48 = $21;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $19;
 $52 = (($50) - ($51))|0;
 $35 = $52;
 $36 = 0;
 $37 = 0;
 $53 = $19;
 $54 = $21;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53<<1)|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = $18;
 $60 = (_back_findCharOrDots($58,1,$59)|0);
 $38 = $60;
 $61 = $18;
 $62 = $25;
 $63 = $26;
 $64 = $27;
 $65 = $29;
 $66 = $30;
 $67 = HEAP32[$66>>2]|0;
 $68 = (_handleMultind($61,$62,$63,$64,$65,$67)|0);
 $69 = ($68|0)!=(0);
 if ($69) {
  STACKTOP = sp;return;
 }
 $39 = 0;
 L4: while(1) {
  $70 = $39;
  $71 = ($70|0)<(3);
  if (!($71)) {
   label = 70;
   break;
  }
  $72 = $39;
  L7: do {
   switch ($72|0) {
   case 2:  {
    label = 11;
    break L4;
    break;
   }
   case 0:  {
    $73 = $35;
    $74 = ($73|0)<(2);
    if (!($74)) {
     $75 = $23;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = $38;
      $78 = ((($77)) + 16|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = $81 & 256;
      $86 = ($85|0)!=(0);
      $87 = (0)!=(0);
      $88 = $86 | $87;
      if ($88) {
       break L7;
      }
     }
     $89 = $38;
     $90 = ((($89)) + 24|0);
     $91 = HEAP16[$90>>1]|0;
     $92 = $91&65535;
     $93 = $92 << 8;
     $37 = $93;
     $94 = $19;
     $95 = (($94) + 1)|0;
     $96 = $21;
     $97 = ((($96)) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + ($95<<1)|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $18;
     $102 = (_back_findCharOrDots($100,1,$101)|0);
     $103 = ((($102)) + 24|0);
     $104 = HEAP16[$103>>1]|0;
     $105 = $104&65535;
     $106 = $37;
     $107 = (($106) + ($105))|0;
     $37 = $107;
     $108 = $37;
     $109 = (($108>>>0) % 1123)&-1;
     $37 = $109;
     $110 = $37;
     $111 = $18;
     $112 = ((($111)) + 16596|0);
     $113 = (($112) + ($110<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $36 = $114;
    }
    break;
   }
   case 1:  {
    $115 = $35;
    $116 = ($115|0)>=(1);
    if ($116) {
     $35 = 1;
     $117 = $38;
     $118 = ((($117)) + 8|0);
     $119 = HEAP32[$118>>2]|0;
     $36 = $119;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  while(1) {
   $129 = $36;
   $130 = ($129|0)!=(0);
   if (!($130)) {
    break;
   }
   $131 = $36;
   $132 = $18;
   $133 = ((($132)) + 21088|0);
   $134 = (($133) + ($131<<3)|0);
   $135 = $27;
   HEAP32[$135>>2] = $134;
   $136 = $27;
   $137 = HEAP32[$136>>2]|0;
   $138 = ((($137)) + 28|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $26;
   HEAP32[$140>>2] = $139;
   $141 = $26;
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(73);
   $144 = $27;
   $145 = HEAP32[$144>>2]|0;
   if ($143) {
    $146 = ((($145)) + 38|0);
    $40 = $146;
    $147 = $27;
    $148 = HEAP32[$147>>2]|0;
    $149 = ((($148)) + 34|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = $150 << 16 >> 16;
    $152 = $25;
    HEAP32[$152>>2] = $151;
   } else {
    $153 = ((($145)) + 34|0);
    $154 = HEAP16[$153>>1]|0;
    $155 = $154 << 16 >> 16;
    $156 = $27;
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($157)) + 38|0);
    $159 = (($158) + ($155<<1)|0);
    $40 = $159;
    $160 = $27;
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($161)) + 36|0);
    $163 = HEAP16[$162>>1]|0;
    $164 = $163 << 16 >> 16;
    $165 = $25;
    HEAP32[$165>>2] = $164;
   }
   $166 = $25;
   $167 = HEAP32[$166>>2]|0;
   $168 = $35;
   $169 = ($167|0)<=($168|0);
   L22: do {
    if ($169) {
     $170 = $19;
     $171 = $21;
     $172 = ((($171)) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = (($173) + ($170<<1)|0);
     $175 = $40;
     $176 = $25;
     $177 = HEAP32[$176>>2]|0;
     $178 = (_compareDots($174,$175,$177)|0);
     $179 = ($178|0)!=(0);
     if ($179) {
      $180 = $25;
      $181 = HEAP32[$180>>2]|0;
      $182 = $18;
      $183 = $19;
      $184 = $21;
      _back_setAfter($181,$182,$183,$184,$41);
      $185 = $27;
      $186 = HEAP32[$185>>2]|0;
      $187 = ((($186)) + 8|0);
      $188 = $187;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (($188) + 4)|0;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = $190 & -536870913;
      $195 = ($194|0)!=(0);
      $196 = ($193|0)!=(0);
      $197 = $195 | $196;
      if ($197) {
       $198 = $31;
       $199 = $198;
       $200 = HEAP32[$199>>2]|0;
       $201 = (($198) + 4)|0;
       $202 = $201;
       $203 = HEAP32[$202>>2]|0;
       $204 = $27;
       $205 = HEAP32[$204>>2]|0;
       $206 = ((($205)) + 8|0);
       $207 = $206;
       $208 = $207;
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 4)|0;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $213 = $200 & $209;
       $214 = $203 & $212;
       $215 = ($213|0)!=(0);
       $216 = ($214|0)!=(0);
       $217 = $215 | $216;
       if (!($217)) {
        break;
       }
      }
      $218 = $27;
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($219)) + 16|0);
      $221 = $220;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = $223 & -536870913;
      $228 = ($227|0)!=(0);
      $229 = ($226|0)!=(0);
      $230 = $228 | $229;
      if ($230) {
       $231 = $41;
       $232 = $231;
       $233 = HEAP32[$232>>2]|0;
       $234 = (($231) + 4)|0;
       $235 = $234;
       $236 = HEAP32[$235>>2]|0;
       $237 = $27;
       $238 = HEAP32[$237>>2]|0;
       $239 = ((($238)) + 16|0);
       $240 = $239;
       $241 = $240;
       $242 = HEAP32[$241>>2]|0;
       $243 = (($240) + 4)|0;
       $244 = $243;
       $245 = HEAP32[$244>>2]|0;
       $246 = $233 & $242;
       $247 = $236 & $245;
       $248 = ($246|0)!=(0);
       $249 = ($247|0)!=(0);
       $250 = $248 | $249;
       if (!($250)) {
        break;
       }
      }
      $251 = $26;
      $252 = HEAP32[$251>>2]|0;
      do {
       switch ($252|0) {
       case 89: case 216: case 206: case 116: case 146: case 145: case 138: case 137: case 130: case 129: case 120: case 119: case 122: case 121: case 118: case 109: case 72: case 78: case 83: case 64: case 63: case 62: case 67: case 66: case 65: case 61: case 60:  {
        label = 70;
        break L4;
        break;
       }
       case 73:  {
        $253 = $18;
        $254 = $19;
        $255 = $21;
        $256 = $26;
        $257 = HEAP32[$256>>2]|0;
        $258 = $27;
        $259 = HEAP32[$258>>2]|0;
        $260 = $32;
        $261 = $33;
        $262 = $34;
        $263 = (_back_passDoTest($253,$254,$255,$257,$259,$260,$261,$262)|0);
        $264 = ($263|0)!=(0);
        if ($264) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 70:  {
        $265 = $23;
        $266 = ($265|0)!=(0);
        if ($266) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 117: case 115:  {
        $267 = $31;
        $268 = $267;
        $269 = HEAP32[$268>>2]|0;
        $270 = (($267) + 4)|0;
        $271 = $270;
        $272 = HEAP32[$271>>2]|0;
        $273 = $269 & 2;
        $274 = ($273|0)!=(0);
        $275 = (0)!=(0);
        $276 = $274 | $275;
        if ($276) {
         break L22;
        }
        $277 = $41;
        $278 = $277;
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 4)|0;
        $281 = $280;
        $282 = HEAP32[$281>>2]|0;
        $283 = $279 & 130;
        $284 = ($283|0)!=(0);
        $285 = (0)!=(0);
        $286 = $284 | $285;
        if ($286) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 47:  {
        $287 = $25;
        $288 = HEAP32[$287>>2]|0;
        $289 = $29;
        HEAP32[$289>>2] = $288;
        $290 = $27;
        $291 = HEAP32[$290>>2]|0;
        $292 = $30;
        HEAP32[$292>>2] = $291;
        $293 = $18;
        $294 = $25;
        $295 = $26;
        $296 = $27;
        $297 = $29;
        $298 = $30;
        $299 = HEAP32[$298>>2]|0;
        $300 = (_handleMultind($293,$294,$295,$296,$297,$299)|0);
        $301 = ($300|0)!=(0);
        if ($301) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 90:  {
        $302 = $20;
        $303 = $302 & 256;
        $304 = ($303|0)!=(0);
        if ($304) {
         break L22;
        }
        $305 = $24;
        $306 = ($305|0)!=(0);
        $307 = $23;
        $308 = ($307|0)!=(0);
        $or$cond = $306 | $308;
        if ($or$cond) {
         break L22;
        }
        break;
       }
       case 95:  {
        break;
       }
       case 94:  {
        $337 = $20;
        $338 = $337 & 256;
        $339 = ($338|0)!=(0);
        if ($339) {
         break L22;
        }
        $340 = $31;
        $341 = $340;
        $342 = HEAP32[$341>>2]|0;
        $343 = (($340) + 4)|0;
        $344 = $343;
        $345 = HEAP32[$344>>2]|0;
        $346 = $342 & 1;
        $347 = ($346|0)!=(0);
        $348 = (0)!=(0);
        $349 = $347 | $348;
        if (!($349)) {
         break L22;
        }
        $350 = $41;
        $351 = $350;
        $352 = HEAP32[$351>>2]|0;
        $353 = (($350) + 4)|0;
        $354 = $353;
        $355 = HEAP32[$354>>2]|0;
        $356 = $352 & 1;
        $357 = ($356|0)!=(0);
        $358 = (0)!=(0);
        $359 = $357 | $358;
        $360 = $28;
        $361 = ($360|0)!=(93);
        $or$cond3 = $359 & $361;
        if ($or$cond3) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 93: case 92:  {
        $362 = $31;
        $363 = $362;
        $364 = HEAP32[$363>>2]|0;
        $365 = (($362) + 4)|0;
        $366 = $365;
        $367 = HEAP32[$366>>2]|0;
        $368 = $364 & 9;
        $369 = ($368|0)!=(0);
        $370 = (0)!=(0);
        $371 = $369 | $370;
        if (!($371)) {
         break L22;
        }
        $372 = $41;
        $373 = $372;
        $374 = HEAP32[$373>>2]|0;
        $375 = (($372) + 4)|0;
        $376 = $375;
        $377 = HEAP32[$376>>2]|0;
        $378 = $374 & 1;
        $379 = ($378|0)!=(0);
        $380 = (0)!=(0);
        $381 = $379 | $380;
        if (!($381)) {
         label = 70;
         break L4;
        }
        $382 = $20;
        $383 = $382 & 256;
        $384 = ($383|0)!=(0);
        if ($384) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 96:  {
        $385 = $31;
        $386 = $385;
        $387 = HEAP32[$386>>2]|0;
        $388 = (($385) + 4)|0;
        $389 = $388;
        $390 = HEAP32[$389>>2]|0;
        $391 = $387 & 9;
        $392 = ($391|0)!=(0);
        $393 = (0)!=(0);
        $394 = $392 | $393;
        if ($394) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 97:  {
        $395 = $31;
        $396 = $395;
        $397 = HEAP32[$396>>2]|0;
        $398 = (($395) + 4)|0;
        $399 = $398;
        $400 = HEAP32[$399>>2]|0;
        $401 = $397 & 11;
        $402 = ($401|0)!=(0);
        $403 = (0)!=(0);
        $404 = $402 | $403;
        if (!($404)) {
         break L22;
        }
        $405 = $18;
        $406 = $19;
        $407 = $20;
        $408 = $21;
        $409 = $25;
        $410 = HEAP32[$409>>2]|0;
        $411 = (_isEndWord($405,$406,$407,$408,$410)|0);
        $412 = ($411|0)!=(0);
        if ($412) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 98:  {
        $413 = $31;
        $414 = $413;
        $415 = HEAP32[$414>>2]|0;
        $416 = (($413) + 4)|0;
        $417 = $416;
        $418 = HEAP32[$417>>2]|0;
        $419 = $415 & 9;
        $420 = ($419|0)!=(0);
        $421 = (0)!=(0);
        $422 = $420 | $421;
        if (!($422)) {
         break L22;
        }
        $423 = $18;
        $424 = $19;
        $425 = $20;
        $426 = $21;
        $427 = $25;
        $428 = HEAP32[$427>>2]|0;
        $429 = (_isEndWord($423,$424,$425,$426,$428)|0);
        $430 = ($429|0)!=(0);
        if ($430) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 99:  {
        $431 = $31;
        $432 = $431;
        $433 = HEAP32[$432>>2]|0;
        $434 = (($431) + 4)|0;
        $435 = $434;
        $436 = HEAP32[$435>>2]|0;
        $437 = $433 & 11;
        $438 = ($437|0)!=(0);
        $439 = (0)!=(0);
        $440 = $438 | $439;
        if (!($440)) {
         break L22;
        }
        $441 = $18;
        $442 = $19;
        $443 = $20;
        $444 = $21;
        $445 = $25;
        $446 = HEAP32[$445>>2]|0;
        $447 = (_isEndWord($441,$442,$443,$444,$446)|0);
        $448 = ($447|0)!=(0);
        if ($448) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 91:  {
        $449 = $31;
        $450 = $449;
        $451 = HEAP32[$450>>2]|0;
        $452 = (($449) + 4)|0;
        $453 = $452;
        $454 = HEAP32[$453>>2]|0;
        $455 = $451 & 256;
        $456 = ($455|0)!=(0);
        $457 = (0)!=(0);
        $458 = $456 | $457;
        if ($458) {
         break L22;
        }
        $459 = $31;
        $460 = $459;
        $461 = HEAP32[$460>>2]|0;
        $462 = (($459) + 4)|0;
        $463 = $462;
        $464 = HEAP32[$463>>2]|0;
        $465 = $461 & 2;
        $466 = ($465|0)!=(0);
        $467 = (0)!=(0);
        $468 = $466 | $467;
        if ($468) {
         label = 70;
         break L4;
        }
        $469 = $18;
        $470 = $19;
        $471 = $20;
        $472 = $21;
        $473 = $25;
        $474 = HEAP32[$473>>2]|0;
        $475 = (_isEndWord($469,$470,$471,$472,$474)|0);
        $476 = ($475|0)!=(0);
        if ($476) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 100:  {
        $477 = $31;
        $478 = $477;
        $479 = HEAP32[$478>>2]|0;
        $480 = (($477) + 4)|0;
        $481 = $480;
        $482 = HEAP32[$481>>2]|0;
        $483 = $479 & 2;
        $484 = ($483|0)!=(0);
        $485 = (0)!=(0);
        $486 = $484 | $485;
        if (!($486)) {
         break L22;
        }
        $487 = $18;
        $488 = $19;
        $489 = $20;
        $490 = $21;
        $491 = $25;
        $492 = HEAP32[$491>>2]|0;
        $493 = (_isEndWord($487,$488,$489,$490,$492)|0);
        $494 = ($493|0)!=(0);
        if ($494) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 101:  {
        $495 = $31;
        $496 = $495;
        $497 = HEAP32[$496>>2]|0;
        $498 = (($495) + 4)|0;
        $499 = $498;
        $500 = HEAP32[$499>>2]|0;
        $501 = $497 & 2;
        $502 = ($501|0)!=(0);
        $503 = (0)!=(0);
        $504 = $502 | $503;
        if ($504) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 102:  {
        $505 = $31;
        $506 = $505;
        $507 = HEAP32[$506>>2]|0;
        $508 = (($505) + 4)|0;
        $509 = $508;
        $510 = HEAP32[$509>>2]|0;
        $511 = $507 & 2;
        $512 = ($511|0)!=(0);
        $513 = (0)!=(0);
        $514 = $512 | $513;
        if (!($514)) {
         break L22;
        }
        $515 = $18;
        $516 = $19;
        $517 = $20;
        $518 = $21;
        $519 = $25;
        $520 = HEAP32[$519>>2]|0;
        $521 = (_isEndWord($515,$516,$517,$518,$520)|0);
        $522 = ($521|0)!=(0);
        if ($522) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 105:  {
        $523 = $31;
        $524 = $523;
        $525 = HEAP32[$524>>2]|0;
        $526 = (($523) + 4)|0;
        $527 = $526;
        $528 = HEAP32[$527>>2]|0;
        $529 = $525 & 9;
        $530 = ($529|0)!=(0);
        $531 = (0)!=(0);
        $532 = $530 | $531;
        if (!($532)) {
         break L22;
        }
        $533 = $41;
        $534 = $533;
        $535 = HEAP32[$534>>2]|0;
        $536 = (($533) + 4)|0;
        $537 = $536;
        $538 = HEAP32[$537>>2]|0;
        $539 = $535 & 384;
        $540 = ($539|0)!=(0);
        $541 = (0)!=(0);
        $542 = $540 | $541;
        if ($542) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 106:  {
        $543 = $31;
        $544 = $543;
        $545 = HEAP32[$544>>2]|0;
        $546 = (($543) + 4)|0;
        $547 = $546;
        $548 = HEAP32[$547>>2]|0;
        $549 = $545 & 4;
        $550 = ($549|0)!=(0);
        $551 = (0)!=(0);
        $552 = $550 | $551;
        if (!($552)) {
         break L22;
        }
        $553 = $41;
        $554 = $553;
        $555 = HEAP32[$554>>2]|0;
        $556 = (($553) + 4)|0;
        $557 = $556;
        $558 = HEAP32[$557>>2]|0;
        $559 = $555 & 256;
        $560 = ($559|0)!=(0);
        $561 = (0)!=(0);
        $562 = $560 | $561;
        if ($562) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 107:  {
        $563 = $23;
        $564 = ($563|0)!=(0);
        if (!($564)) {
         break L22;
        }
        $565 = $41;
        $566 = $565;
        $567 = HEAP32[$566>>2]|0;
        $568 = (($565) + 4)|0;
        $569 = $568;
        $570 = HEAP32[$569>>2]|0;
        $571 = $567 & 256;
        $572 = ($571|0)!=(0);
        $573 = (0)!=(0);
        $574 = $572 | $573;
        if ($574) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 108:  {
        $575 = $41;
        $576 = $575;
        $577 = HEAP32[$576>>2]|0;
        $578 = (($575) + 4)|0;
        $579 = $578;
        $580 = HEAP32[$579>>2]|0;
        $581 = $577 & 260;
        $582 = ($581|0)!=(0);
        $583 = (0)!=(0);
        $584 = $582 | $583;
        if ($584) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 103:  {
        $585 = $18;
        $586 = $22;
        $587 = (_isBegWord($585,$586)|0);
        $588 = ($587|0)!=(0);
        if ($588) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 104:  {
        $589 = $18;
        $590 = $19;
        $591 = $20;
        $592 = $21;
        $593 = $25;
        $594 = HEAP32[$593>>2]|0;
        $595 = (_isEndWord($589,$590,$591,$592,$594)|0);
        $596 = ($595|0)!=(0);
        if ($596) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 82:  {
        $597 = $31;
        $598 = $597;
        $599 = HEAP32[$598>>2]|0;
        $600 = (($597) + 4)|0;
        $601 = $600;
        $602 = HEAP32[$601>>2]|0;
        $603 = $599 & 256;
        $604 = ($603|0)!=(0);
        $605 = (0)!=(0);
        $606 = $604 | $605;
        if (!($606)) {
         label = 70;
         break L4;
        }
        $607 = $41;
        $608 = $607;
        $609 = HEAP32[$608>>2]|0;
        $610 = (($607) + 4)|0;
        $611 = $610;
        $612 = HEAP32[$611>>2]|0;
        $613 = $609 & 256;
        $614 = ($613|0)!=(0);
        $615 = (0)!=(0);
        $616 = $614 | $615;
        if (!($616)) {
         label = 70;
         break L4;
        }
        $617 = $27;
        $618 = HEAP32[$617>>2]|0;
        $619 = ((($618)) + 34|0);
        $620 = HEAP16[$619>>1]|0;
        $621 = $620 << 16 >> 16;
        $622 = ($621|0)>(1);
        if ($622) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 112:  {
        $623 = $27;
        $624 = HEAP32[$623>>2]|0;
        $625 = ((($624)) + 24|0);
        $626 = HEAP32[$625>>2]|0;
        $627 = $18;
        $628 = ((($627)) + 21088|0);
        $629 = (($628) + ($626<<3)|0);
        $42 = $629;
        $630 = $42;
        $631 = ((($630)) + 2|0);
        $43 = $631;
        $632 = $21;
        $633 = ((($632)) + 4|0);
        $634 = HEAP32[$633>>2]|0;
        $635 = $19;
        $636 = (($635) - 1)|0;
        $637 = $43;
        $638 = $18;
        $639 = (__lou_pattern_check($634,$636,-1,-1,$637,$638)|0);
        $640 = ($639|0)!=(0);
        if (!($640)) {
         break L22;
        }
        $641 = $42;
        $642 = HEAP16[$641>>1]|0;
        $643 = $642&65535;
        $644 = $42;
        $645 = (($644) + ($643<<1)|0);
        $43 = $645;
        $646 = $21;
        $647 = ((($646)) + 4|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = $19;
        $650 = $27;
        $651 = HEAP32[$650>>2]|0;
        $652 = ((($651)) + 36|0);
        $653 = HEAP16[$652>>1]|0;
        $654 = $653 << 16 >> 16;
        $655 = (($649) + ($654))|0;
        $656 = $21;
        $657 = ((($656)) + 8|0);
        $658 = HEAP32[$657>>2]|0;
        $659 = $43;
        $660 = $18;
        $661 = (__lou_pattern_check($648,$655,$658,1,$659,$660)|0);
        $662 = ($661|0)!=(0);
        if ($662) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       default: {
        break L22;
       }
       }
      } while(0);
      $309 = $31;
      $310 = $309;
      $311 = HEAP32[$310>>2]|0;
      $312 = (($309) + 4)|0;
      $313 = $312;
      $314 = HEAP32[$313>>2]|0;
      $315 = $311 & 9;
      $316 = ($315|0)!=(0);
      $317 = (0)!=(0);
      $318 = $316 | $317;
      if ($318) {
       $319 = $41;
       $320 = $319;
       $321 = HEAP32[$320>>2]|0;
       $322 = (($319) + 4)|0;
       $323 = $322;
       $324 = HEAP32[$323>>2]|0;
       $325 = $321 & 1;
       $326 = ($325|0)!=(0);
       $327 = (0)!=(0);
       $328 = $326 | $327;
       if ($328) {
        label = 70;
        break L4;
       }
       $329 = $18;
       $330 = $19;
       $331 = $20;
       $332 = $21;
       $333 = $25;
       $334 = HEAP32[$333>>2]|0;
       $335 = (_isEndWord($329,$330,$331,$332,$334)|0);
       $336 = ($335|0)!=(0);
       if ($336) {
        label = 70;
        break L4;
       }
      }
     }
    }
   } while(0);
   $663 = $27;
   $664 = HEAP32[$663>>2]|0;
   $665 = ((($664)) + 4|0);
   $666 = HEAP32[$665>>2]|0;
   $36 = $666;
  }
  $667 = $39;
  $668 = (($667) + 1)|0;
  $39 = $668;
 }
 if ((label|0) == 11) {
  $120 = $27;
  HEAP32[$120>>2] = 10408;
  HEAP32[(10436)>>2] = 114;
  $121 = $26;
  HEAP32[$121>>2] = 114;
  HEAP16[(10444)>>1] = 1;
  $122 = $25;
  HEAP32[$122>>2] = 1;
  $123 = $19;
  $124 = $21;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123<<1)|0);
  $128 = HEAP16[$127>>1]|0;
  HEAP16[(10446)>>1] = $128;
  HEAP16[(10442)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 70) {
  STACKTOP = sp;return;
 }
}
function _insertSpace($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $23 = sp + 48|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 HEAP16[$23>>1] = 32;
 $24 = $12;
 $25 = $13;
 $26 = $14;
 $27 = $15;
 $28 = $17;
 $29 = $18;
 $30 = $19;
 $31 = $20;
 $32 = $21;
 $33 = $22;
 $34 = (_back_updatePositions($23,1,1,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33)|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $11 = 0;
  $44 = $11;
  STACKTOP = sp;return ($44|0);
 }
 $36 = $16;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $15;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $16;
  $43 = (($42) + ($41)|0);
  HEAP8[$43>>0] = 49;
 }
 $11 = 1;
 $44 = $11;
 STACKTOP = sp;return ($44|0);
}
function _putCharacters_297($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = 0;
 while(1) {
  $30 = $29;
  $31 = $16;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   label = 6;
   break;
  }
  $33 = $29;
  $34 = $15;
  $35 = (($34) + ($33<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $17;
  $38 = $18;
  $39 = $19;
  $40 = $20;
  $41 = $21;
  $42 = $22;
  $43 = $23;
  $44 = $24;
  $45 = $25;
  $46 = $26;
  $47 = $27;
  $48 = $28;
  $49 = (_putCharacter_294($36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48)|0);
  $50 = ($49|0)!=(0);
  if (!($50)) {
   label = 4;
   break;
  }
  $51 = $29;
  $52 = (($51) + 1)|0;
  $29 = $52;
 }
 if ((label|0) == 4) {
  $14 = 0;
  $53 = $14;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 6) {
  $14 = 1;
  $53 = $14;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _handleMultind($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $14 = $11;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $6 = 0;
  $190 = $6;
  STACKTOP = sp;return ($190|0);
 }
 $17 = $12;
 $18 = ((($17)) + 34|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = $11;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) - ($22))|0;
 $24 = $12;
 $25 = ((($24)) + 38|0);
 $26 = (($25) + ($23<<1)|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 do {
  switch ($28|0) {
  case 118:  {
   $29 = $7;
   $30 = ((($29)) + 616|0);
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $7;
   $34 = $8;
   $35 = $9;
   $36 = $10;
   $37 = (_findBrailleIndicatorRule($32,$33,$34,$35,$36)|0);
   $13 = $37;
   break;
  }
  case 119:  {
   $38 = $7;
   $39 = ((($38)) + 616|0);
   $40 = ((($39)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $7;
   $43 = $8;
   $44 = $9;
   $45 = $10;
   $46 = (_findBrailleIndicatorRule($41,$42,$43,$44,$45)|0);
   $13 = $46;
   break;
  }
  case 120:  {
   $47 = $7;
   $48 = ((($47)) + 616|0);
   $49 = ((($48)) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $7;
   $52 = $8;
   $53 = $9;
   $54 = $10;
   $55 = (_findBrailleIndicatorRule($50,$51,$52,$53,$54)|0);
   $13 = $55;
   break;
  }
  case 11:  {
   $56 = $7;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $7;
   $60 = $8;
   $61 = $9;
   $62 = $10;
   $63 = (_findBrailleIndicatorRule($58,$59,$60,$61,$62)|0);
   $13 = $63;
   break;
  }
  case 46:  {
   $64 = $7;
   $65 = ((($64)) + 48|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $7;
   $68 = $8;
   $69 = $9;
   $70 = $10;
   $71 = (_findBrailleIndicatorRule($66,$67,$68,$69,$70)|0);
   $13 = $71;
   break;
  }
  case 15:  {
   $72 = $7;
   $73 = ((($72)) + 44|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $7;
   $76 = $8;
   $77 = $9;
   $78 = $10;
   $79 = (_findBrailleIndicatorRule($74,$75,$76,$77,$78)|0);
   $13 = $79;
   break;
  }
  case 132:  {
   $80 = $7;
   $81 = ((($80)) + 616|0);
   $82 = ((($81)) + 36|0);
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $7;
   $86 = $8;
   $87 = $9;
   $88 = $10;
   $89 = (_findBrailleIndicatorRule($84,$85,$86,$87,$88)|0);
   $13 = $89;
   break;
  }
  case 129:  {
   $90 = $7;
   $91 = ((($90)) + 616|0);
   $92 = ((($91)) + 36|0);
   $93 = ((($92)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $7;
   $96 = $8;
   $97 = $9;
   $98 = $10;
   $99 = (_findBrailleIndicatorRule($94,$95,$96,$97,$98)|0);
   $13 = $99;
   break;
  }
  case 130:  {
   $100 = $7;
   $101 = ((($100)) + 616|0);
   $102 = ((($101)) + 36|0);
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $7;
   $106 = $8;
   $107 = $9;
   $108 = $10;
   $109 = (_findBrailleIndicatorRule($104,$105,$106,$107,$108)|0);
   $13 = $109;
   break;
  }
  case 140:  {
   $110 = $7;
   $111 = ((($110)) + 616|0);
   $112 = ((($111)) + 72|0);
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $7;
   $116 = $8;
   $117 = $9;
   $118 = $10;
   $119 = (_findBrailleIndicatorRule($114,$115,$116,$117,$118)|0);
   $13 = $119;
   break;
  }
  case 137:  {
   $120 = $7;
   $121 = ((($120)) + 616|0);
   $122 = ((($121)) + 72|0);
   $123 = ((($122)) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $7;
   $126 = $8;
   $127 = $9;
   $128 = $10;
   $129 = (_findBrailleIndicatorRule($124,$125,$126,$127,$128)|0);
   $13 = $129;
   break;
  }
  case 138:  {
   $130 = $7;
   $131 = ((($130)) + 616|0);
   $132 = ((($131)) + 72|0);
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $7;
   $136 = $8;
   $137 = $9;
   $138 = $10;
   $139 = (_findBrailleIndicatorRule($134,$135,$136,$137,$138)|0);
   $13 = $139;
   break;
  }
  case 148:  {
   $140 = $7;
   $141 = ((($140)) + 616|0);
   $142 = ((($141)) + 108|0);
   $143 = ((($142)) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $7;
   $146 = $8;
   $147 = $9;
   $148 = $10;
   $149 = (_findBrailleIndicatorRule($144,$145,$146,$147,$148)|0);
   $13 = $149;
   break;
  }
  case 145:  {
   $150 = $7;
   $151 = ((($150)) + 616|0);
   $152 = ((($151)) + 108|0);
   $153 = ((($152)) + 12|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $7;
   $156 = $8;
   $157 = $9;
   $158 = $10;
   $159 = (_findBrailleIndicatorRule($154,$155,$156,$157,$158)|0);
   $13 = $159;
   break;
  }
  case 146:  {
   $160 = $7;
   $161 = ((($160)) + 616|0);
   $162 = ((($161)) + 108|0);
   $163 = ((($162)) + 16|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $7;
   $166 = $8;
   $167 = $9;
   $168 = $10;
   $169 = (_findBrailleIndicatorRule($164,$165,$166,$167,$168)|0);
   $13 = $169;
   break;
  }
  case 35:  {
   $170 = $7;
   $171 = ((($170)) + 1028|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $7;
   $174 = $8;
   $175 = $9;
   $176 = $10;
   $177 = (_findBrailleIndicatorRule($172,$173,$174,$175,$176)|0);
   $13 = $177;
   break;
  }
  case 45:  {
   $178 = $7;
   $179 = ((($178)) + 1068|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $7;
   $182 = $8;
   $183 = $9;
   $184 = $10;
   $185 = (_findBrailleIndicatorRule($180,$181,$182,$183,$184)|0);
   $13 = $185;
   break;
  }
  default: {
   $13 = 0;
  }
  }
 } while(0);
 $186 = $11;
 $187 = HEAP32[$186>>2]|0;
 $188 = (($187) + -1)|0;
 HEAP32[$186>>2] = $188;
 $189 = $13;
 $6 = $189;
 $190 = $6;
 STACKTOP = sp;return ($190|0);
}
function _compareDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $7;
  $14 = $4;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $7;
  $19 = $5;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($17|0)!=($22|0);
  if ($23) {
   label = 6;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 8) {
  $3 = 1;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _back_setAfter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = $8;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)<($16|0);
 if ($17) {
  $18 = $7;
  $19 = $5;
  $20 = (($18) + ($19))|0;
  $21 = $8;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $28 = $26;
 } else {
  $28 = 32;
 }
 $27 = $28&65535;
 $10 = $27;
 $29 = $10;
 $30 = $6;
 $31 = (_back_findCharOrDots($29,1,$30)|0);
 $32 = ((($31)) + 16|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $9;
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = $35;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $38;
 STACKTOP = sp;return;
}
function _isEndWord($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $8;
 $18 = $17 & 256;
 $19 = ($18|0)!=(0);
 if ($19) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $20 = $7;
 $21 = $10;
 $22 = (($20) + ($21))|0;
 $11 = $22;
 L5: while(1) {
  $23 = $11;
  $24 = $9;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   label = 21;
   break;
  }
  $15 = 0;
  $16 = 0;
  $28 = $11;
  $29 = $9;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $6;
  $35 = (_back_findCharOrDots($33,1,$34)|0);
  $12 = $35;
  $36 = $12;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $13 = $38;
  $39 = $12;
  $40 = ((($39)) + 16|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 & 1;
  $48 = ($47|0)!=(0);
  $49 = (0)!=(0);
  $50 = $48 | $49;
  if ($50) {
   label = 21;
   break;
  }
  $51 = $12;
  $52 = ((($51)) + 16|0);
  $53 = $52;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = $55 & 2;
  $60 = ($59|0)!=(0);
  $61 = (0)!=(0);
  $62 = $60 | $61;
  if ($62) {
   label = 7;
   break;
  }
  while(1) {
   $63 = $13;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
   $65 = $13;
   $66 = $6;
   $67 = ((($66)) + 21088|0);
   $68 = (($67) + ($65<<3)|0);
   $14 = $68;
   $69 = $14;
   $70 = ((($69)) + 34|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71 << 16 >> 16;
   $73 = ($72|0)>(1);
   if ($73) {
    $74 = $14;
    $75 = ((($74)) + 28|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(98);
    if ($77) {
     $78 = $14;
     $79 = ((($78)) + 28|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)!=(100);
     if ($81) {
      $16 = 1;
     }
    }
   }
   $82 = $14;
   $83 = ((($82)) + 28|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(104);
   if ($85) {
    $15 = 1;
   }
   $86 = $14;
   $87 = ((($86)) + 28|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(109);
   if ($89) {
    label = 16;
    break L5;
   }
   $90 = $14;
   $91 = ((($90)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   $13 = $92;
  }
  $93 = $16;
  $94 = ($93|0)==(0);
  $95 = $15;
  $96 = ($95|0)!=(0);
  $or$cond = $94 | $96;
  if (!($or$cond)) {
   label = 19;
   break;
  }
  $97 = $11;
  $98 = (($97) + 1)|0;
  $11 = $98;
 }
 if ((label|0) == 7) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 16) {
  $5 = 1;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 19) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 21) {
  $5 = 1;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _isBegWord($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $2 = 1;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $11 = $4;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 1)|0;
 $5 = $14;
 while(1) {
  $15 = $5;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $5;
  $18 = $4;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $3;
  $24 = (_back_findCharOrDots($22,0,$23)|0);
  $6 = $24;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  $27 = $26;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = $29 & 1;
  $34 = ($33|0)!=(0);
  $35 = (0)!=(0);
  $36 = $34 | $35;
  if ($36) {
   label = 9;
   break;
  }
  $37 = $6;
  $38 = ((($37)) + 16|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = $41 & 198;
  $46 = ($45|0)!=(0);
  $47 = (0)!=(0);
  $48 = $46 | $47;
  if ($48) {
   label = 7;
   break;
  }
  $49 = $5;
  $50 = (($49) + -1)|0;
  $5 = $50;
 }
 if ((label|0) == 7) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 9) {
  $2 = 1;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _findBrailleIndicatorRule($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $6;
  $14 = $7;
  $15 = ((($14)) + 21088|0);
  $16 = (($15) + ($13<<3)|0);
  $17 = $10;
  HEAP32[$17>>2] = $16;
  $18 = $10;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $9;
  HEAP32[$22>>2] = $21;
  $23 = $10;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 36|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $8;
  HEAP32[$28>>2] = $27;
  $5 = 1;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 } else {
  $5 = 0;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _allocStringBuffer_300($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__lou_allocMem(4,$4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __lou_resetPassVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((14960|0),0,200)|0;
 return;
}
function __lou_handlePassVariableTest($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (($9) + ($8<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 switch ($12|0) {
 case 61:  {
  $13 = $5;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = $4;
  $17 = (($16) + ($15<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (14960 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 2)|0;
  $25 = $4;
  $26 = (($25) + ($24<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($21|0)!=($28|0);
  if ($29) {
   $30 = $6;
   HEAP32[$30>>2] = 0;
  }
  $31 = $5;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 3)|0;
  HEAP32[$31>>2] = $33;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 60:  {
  $34 = $5;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  $37 = $4;
  $38 = (($37) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (14960 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 2)|0;
  $46 = $4;
  $47 = (($46) + ($45<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = ($42|0)>=($49|0);
  if ($50) {
   $51 = $6;
   HEAP32[$51>>2] = 0;
  }
  $52 = $5;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 3)|0;
  HEAP32[$52>>2] = $54;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 62:  {
  $55 = $5;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1)|0;
  $58 = $4;
  $59 = (($58) + ($57<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60&65535;
  $62 = (14960 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $5;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 2)|0;
  $67 = $4;
  $68 = (($67) + ($66<<1)|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69&65535;
  $71 = ($63|0)<=($70|0);
  if ($71) {
   $72 = $6;
   HEAP32[$72>>2] = 0;
  }
  $73 = $5;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 3)|0;
  HEAP32[$73>>2] = $75;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 130:  {
  $76 = $5;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  $79 = $4;
  $80 = (($79) + ($78<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (14960 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 2)|0;
  $88 = $4;
  $89 = (($88) + ($87<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = ($84|0)>($91|0);
  if ($92) {
   $93 = $6;
   HEAP32[$93>>2] = 0;
  }
  $94 = $5;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 3)|0;
  HEAP32[$94>>2] = $96;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 131:  {
  $97 = $5;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + 1)|0;
  $100 = $4;
  $101 = (($100) + ($99<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = (14960 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $5;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + 2)|0;
  $109 = $4;
  $110 = (($109) + ($108<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = ($105|0)<($112|0);
  if ($113) {
   $114 = $6;
   HEAP32[$114>>2] = 0;
  }
  $115 = $5;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 3)|0;
  HEAP32[$115>>2] = $117;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 default: {
  $3 = 0;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
 }
 }
 return (0)|0;
}
function __lou_handlePassVariableAction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + ($6<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 switch ($10|0) {
 case 61:  {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 2)|0;
  $14 = $3;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = $3;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (14960 + ($24<<2)|0);
  HEAP32[$25>>2] = $17;
  $26 = $4;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 3)|0;
  HEAP32[$26>>2] = $28;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 case 45:  {
  $29 = $4;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  $32 = $3;
  $33 = (($32) + ($31<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (14960 + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) - 1)|0;
  HEAP32[$36>>2] = $38;
  $39 = $4;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = $3;
  $43 = (($42) + ($41<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = (14960 + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)<(0);
  if ($48) {
   $49 = $4;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = $3;
   $53 = (($52) + ($51<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = (14960 + ($55<<2)|0);
   HEAP32[$56>>2] = 0;
  }
  $57 = $4;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 2)|0;
  HEAP32[$57>>2] = $59;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 case 43:  {
  $60 = $4;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  $63 = $3;
  $64 = (($63) + ($62<<1)|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = (14960 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$67>>2] = $69;
  $70 = $4;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 2)|0;
  HEAP32[$70>>2] = $72;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 default: {
  $2 = 0;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
 }
 }
 return (0)|0;
}
function _lou_indexTables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $1 = $0;
 $5 = HEAP32[3790]|0;
 _list_free($5);
 HEAP32[3790] = 0;
 $6 = $1;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  __lou_logMessage(10000,7614,$vararg_buffer);
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = (_analyzeTable($13,1)|0);
  $3 = $14;
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = (___strdup($18)|0);
   HEAP32[$4>>2] = $19;
   $20 = ((($4)) + 4|0);
   $21 = $3;
   HEAP32[$20>>2] = $21;
   $22 = HEAP32[3790]|0;
   $23 = (_malloc(8)|0);
   ;HEAP8[$23>>0]=HEAP8[$4>>0]|0;HEAP8[$23+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$4+7>>0]|0;
   $24 = (_list_conj($22,$23,0,0,13)|0);
   HEAP32[3790] = $24;
  }
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $2 = $26;
 }
 $27 = HEAP32[3790]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 __lou_logMessage(30000,7633,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _lou_findTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $9 = HEAP32[3790]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  _indexTablePath();
 }
 $11 = $2;
 $12 = (_parseQuery($11)|0);
 $3 = $12;
 $4 = 0;
 $5 = 0;
 $13 = HEAP32[3790]|0;
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $18 = $3;
  $19 = $7;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_matchFeatureLists($18,$21,0)|0);
  $8 = $22;
  $23 = $8;
  $24 = $4;
  $25 = ($23|0)>($24|0);
  if ($25) {
   $26 = $8;
   $4 = $26;
   $27 = $5;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $29 = $5;
    _free($29);
   }
   $30 = $7;
   $31 = HEAP32[$30>>2]|0;
   $32 = (___strdup($31)|0);
   $5 = $32;
  }
  $33 = $6;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $6 = $35;
 }
 $36 = $3;
 _list_free($36);
 $37 = $5;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $5;
  $40 = $4;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $40;
  __lou_logMessage(20000,7594,$vararg_buffer);
  $41 = $5;
  $1 = $41;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 } else {
  $42 = $2;
  HEAP32[$vararg_buffer2>>2] = $42;
  __lou_logMessage(20000,7488,$vararg_buffer2);
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _lou_findTables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 16|0;
 $2 = $0;
 $4 = 0;
 $11 = HEAP32[3790]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  _indexTablePath();
 }
 $13 = $2;
 $14 = (_parseQuery($13)|0);
 $5 = $14;
 $15 = HEAP32[3790]|0;
 $6 = $15;
 while(1) {
  $16 = $6;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $6;
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $20 = $5;
  $21 = $7;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_matchFeatureLists($20,$23,0)|0);
  $8 = $24;
  $25 = $8;
  $26 = ($25|0)>(0);
  if ($26) {
   $27 = $7;
   $28 = HEAP32[$27>>2]|0;
   $29 = (___strdup($28)|0);
   HEAP32[$9>>2] = $29;
   $30 = ((($9)) + 4|0);
   $31 = $8;
   HEAP32[$30>>2] = $31;
   $32 = $4;
   $33 = (_malloc(8)|0);
   ;HEAP8[$33>>0]=HEAP8[$9>>0]|0;HEAP8[$33+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$33+7>>0]=HEAP8[$9+7>>0]|0;
   $34 = (_list_conj($32,$33,14,0,13)|0);
   $4 = $34;
  }
  $35 = $6;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $6 = $37;
 }
 $38 = $5;
 _list_free($38);
 $39 = $4;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  $65 = $2;
  HEAP32[$vararg_buffer1>>2] = $65;
  __lou_logMessage(20000,7488,$vararg_buffer1);
  $1 = 0;
  $66 = $1;
  STACKTOP = sp;return ($66|0);
 }
 $41 = $4;
 $42 = (_list_size($41)|0);
 HEAP32[$vararg_buffer>>2] = $42;
 __lou_logMessage(20000,7471,$vararg_buffer);
 $10 = 0;
 $43 = $4;
 $44 = (_list_size($43)|0);
 $45 = (1 + ($44))|0;
 $46 = $45<<2;
 $47 = (_malloc($46)|0);
 $3 = $47;
 while(1) {
  $48 = $4;
  $49 = ($48|0)!=(0|0);
  if (!($49)) {
   break;
  }
  $50 = $4;
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = $10;
  $54 = (($53) + 1)|0;
  $10 = $54;
  $55 = $3;
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $52;
  $57 = $4;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $4 = $59;
 }
 $60 = $10;
 $61 = $3;
 $62 = (($61) + ($60<<2)|0);
 HEAP32[$62>>2] = 0;
 $63 = $4;
 _list_free($63);
 $64 = $3;
 $1 = $64;
 $66 = $1;
 STACKTOP = sp;return ($66|0);
}
function _lou_getTableInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = (_analyzeTable($8,0)|0);
 $5 = $9;
 $10 = $5;
 $6 = $10;
 while(1) {
  $11 = $6;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $7 = $14;
  $15 = $7;
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  $18 = (_strcasecmp($16,$17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   break;
  }
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $6 = $27;
 }
 if ((label|0) == 6) {
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $20 = $7;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (___strdup($22)|0);
 $4 = $23;
 $24 = $5;
 _list_free($24);
 $28 = $4;
 STACKTOP = sp;return ($28|0);
}
function _lou_listTables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 0;
 $4 = HEAP32[3790]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _indexTablePath();
 }
 $6 = HEAP32[3790]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $1;
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = (___strdup($13)|0);
  $15 = (_list_conj($11,$14,15,0,0)|0);
  $1 = $15;
  $16 = $2;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 $19 = $1;
 $20 = (_list_toArray($19,0)|0);
 $0 = $20;
 $21 = $1;
 _list_free($21);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _indexTablePath() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 __lou_logMessage(30000,7180,$vararg_buffer);
 $3 = (__lou_getTablePath()|0);
 $0 = $3;
 $4 = $0;
 $5 = (_listFiles($4)|0);
 $1 = $5;
 $6 = $1;
 $7 = (_list_toArray($6,0)|0);
 $2 = $7;
 $8 = $2;
 _lou_indexTables($8);
 $9 = $0;
 _free($9);
 $10 = $1;
 _list_free($10);
 $11 = $2;
 _free($11);
 STACKTOP = sp;return;
}
function _list_conj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = (_malloc(12)|0);
  $6 = $18;
  $19 = $9;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $9;
   $22 = $7;
   $23 = (FUNCTION_TABLE_ii[$21 & 7]($22)|0);
   $26 = $23;
  } else {
   $24 = $7;
   $26 = $24;
  }
  $25 = $6;
  HEAP32[$25>>2] = $26;
  $27 = $10;
  $28 = $6;
  $29 = ((($28)) + 4|0);
  HEAP32[$29>>2] = $27;
  $30 = $6;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = 0;
  $32 = $6;
  $5 = $32;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $33 = $8;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = (_malloc(12)|0);
  $11 = $35;
  $36 = $9;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $9;
   $39 = $7;
   $40 = (FUNCTION_TABLE_ii[$38 & 7]($39)|0);
   $43 = $40;
  } else {
   $41 = $7;
   $43 = $41;
  }
  $42 = $11;
  HEAP32[$42>>2] = $43;
  $44 = $10;
  $45 = $11;
  $46 = ((($45)) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = $6;
  $48 = $11;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $11;
  $5 = $50;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $51 = $6;
 $12 = $51;
 $13 = 0;
 while(1) {
  $52 = $12;
  $53 = ($52|0)!=(0|0);
  if (!($53)) {
   break;
  }
  $54 = $8;
  $55 = $12;
  $56 = HEAP32[$55>>2]|0;
  $57 = $7;
  $58 = (FUNCTION_TABLE_iii[$54 & 31]($56,$57)|0);
  $14 = $58;
  $59 = $14;
  $60 = ($59|0)>(0);
  if ($60) {
   break;
  }
  $61 = $14;
  $62 = ($61|0)<(0);
  if (!($62)) {
   label = 16;
   break;
  }
  $63 = $12;
  $13 = $63;
  $64 = $13;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $12 = $66;
 }
 if ((label|0) == 16) {
  $67 = $7;
  $68 = $12;
  $69 = HEAP32[$68>>2]|0;
  $70 = ($67|0)==($69|0);
  $71 = $9;
  $72 = ($71|0)!=(0|0);
  $or$cond = $70 | $72;
  $or$cond$not = $or$cond ^ 1;
  $73 = $10;
  $74 = ($73|0)!=(0|0);
  $or$cond3 = $or$cond$not & $74;
  if ($or$cond3) {
   $75 = $10;
   $76 = $7;
   FUNCTION_TABLE_vi[$75 & 31]($76);
  }
  $77 = $6;
  $5 = $77;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $78 = (_malloc(12)|0);
 $15 = $78;
 $79 = $9;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = $9;
  $82 = $7;
  $83 = (FUNCTION_TABLE_ii[$81 & 7]($82)|0);
  $86 = $83;
 } else {
  $84 = $7;
  $86 = $84;
 }
 $85 = $15;
 HEAP32[$85>>2] = $86;
 $87 = $10;
 $88 = $15;
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = $87;
 $90 = $12;
 $91 = $15;
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = $90;
 $93 = $13;
 $94 = ($93|0)!=(0|0);
 $95 = $15;
 if ($94) {
  $96 = $13;
  $97 = ((($96)) + 8|0);
  HEAP32[$97>>2] = $95;
 } else {
  $6 = $95;
 }
 $98 = $6;
 $5 = $98;
 $99 = $5;
 STACKTOP = sp;return ($99|0);
}
function _list_toArray($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_list_size($7)|0);
 $9 = (1 + ($8))|0;
 $10 = $9<<2;
 $11 = (_malloc($10)|0);
 $4 = $11;
 $6 = 0;
 $12 = $2;
 $5 = $12;
 while(1) {
  $13 = $5;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $3;
   $18 = $5;
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$17 & 7]($19)|0);
   $27 = $20;
  } else {
   $21 = $5;
   $22 = HEAP32[$21>>2]|0;
   $27 = $22;
  }
  $23 = $6;
  $24 = (($23) + 1)|0;
  $6 = $24;
  $25 = $4;
  $26 = (($25) + ($23<<2)|0);
  HEAP32[$26>>2] = $27;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $5 = $30;
 }
 $31 = $6;
 $32 = $4;
 $33 = (($32) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 $34 = $4;
 STACKTOP = sp;return ($34|0);
}
function _list_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$10 & 31]($12);
 }
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _list_free($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _list_size($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $3 = $4;
 while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0|0);
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = (($7) + 1)|0;
  $2 = $8;
  $9 = $3;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
 }
 STACKTOP = sp;return ($7|0);
}
function _listFiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $4 = 0;
 while(1) {
  $5 = 0;
  while(1) {
   $6 = $4;
   $7 = $5;
   $8 = (($6) + ($7))|0;
   $9 = $1;
   $10 = (($9) + ($8)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $4;
   $15 = $5;
   $16 = (($14) + ($15))|0;
   $17 = $1;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)!=(44);
   if (!($21)) {
    break;
   }
   $22 = $5;
   $23 = (($22) + 1)|0;
   $5 = $23;
  }
  $24 = $5;
  $25 = (($24) + 1)|0;
  $26 = (_malloc($25)|0);
  $3 = $26;
  $27 = $5;
  $28 = $3;
  $29 = (($28) + ($27)|0);
  HEAP8[$29>>0] = 0;
  $30 = $3;
  $31 = $4;
  $32 = $1;
  $33 = (($32) + ($31)|0);
  $34 = $5;
  _memcpy(($30|0),($33|0),($34|0))|0;
  $35 = $2;
  $36 = $3;
  $37 = (_listDir($35,$36)|0);
  $2 = $37;
  $38 = $3;
  _free($38);
  $39 = $5;
  $40 = $4;
  $41 = (($40) + ($39))|0;
  $4 = $41;
  $42 = $4;
  $43 = $1;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)==(0);
  if ($47) {
   break;
  }
  $48 = $4;
  $49 = (($48) + 1)|0;
  $4 = $49;
 }
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _listDir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (_opendir($7)|0);
 $5 = $8;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $26 = $3;
  HEAP32[$vararg_buffer3>>2] = $26;
  __lou_logMessage(30000,7247,$vararg_buffer3);
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $10 = $5;
  $11 = (_readdir($10)|0);
  $6 = $11;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $6;
  $15 = ((($14)) + 11|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 47;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $15;
  (_sprintf(28247,7240,$vararg_buffer)|0);
  $16 = (_stat(28247,$4)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   continue;
  }
  $18 = ((($4)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 16384;
  $21 = ($20|0)!=(0);
  if ($21) {
   continue;
  }
  $22 = $2;
  $23 = (___strdup(28247)|0);
  $24 = (_list_conj($22,$23,0,0,13)|0);
  $2 = $24;
 }
 $25 = $5;
 (_closedir($25)|0);
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _analyzeTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4272|0);
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 120|0;
 $19 = sp + 64|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $20 = $3;
 $21 = (__lou_resolveTable($20,0)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = $3;
  HEAP32[$vararg_buffer>>2] = $24;
  __lou_logMessage(40000,7269,$vararg_buffer);
  $2 = 0;
  $289 = $2;
  STACKTOP = sp;return ($289|0);
 }
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $26;
 (_sprintf(30295,7685,$vararg_buffer3)|0);
 $8 = 0;
 $8 = 0;
 while(1) {
  $27 = $8;
  $28 = $7;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $8;
  $33 = $7;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = $8;
  $37 = (($36) + 1)|0;
  $8 = $37;
 }
 $38 = $7;
 _free($38);
 $39 = $8;
 $40 = ($39|0)>(1);
 if ($40) {
  $41 = $3;
  HEAP32[$vararg_buffer6>>2] = $41;
  __lou_logMessage(40000,7295,$vararg_buffer6);
  $2 = 0;
  $289 = $2;
  STACKTOP = sp;return ($289|0);
 }
 HEAP32[$6>>2] = 30295;
 $42 = ((($6)) + 12|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($6)) + 16|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($6)) + 8|0);
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$6>>2]|0;
 $46 = (_fopen($45,7337)|0);
 $47 = ((($6)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = ($46|0)!=(0|0);
 do {
  if ($48) {
   L14: while(1) {
    $49 = (__lou_getALine($6)|0);
    $50 = ($49|0)!=(0);
    if (!($50)) {
     label = 56;
     break;
    }
    $51 = ((($6)) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if ($53) {
     continue;
    }
    $54 = ((($6)) + 36|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    $57 = ($56|0)==(35);
    if (!($57)) {
     label = 56;
     break;
    }
    $58 = ((($6)) + 20|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)>=(2);
    if (!($60)) {
     continue;
    }
    $61 = ((($6)) + 36|0);
    $62 = ((($61)) + 2|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = ($64|0)==(43);
    if (!($65)) {
     $66 = $4;
     $67 = ($66|0)!=(0);
     if ($67) {
      continue;
     }
     $68 = ((($6)) + 36|0);
     $69 = ((($68)) + 2|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $70&65535;
     $72 = ($71|0)==(45);
     if (!($72)) {
      continue;
     }
     $73 = ((($6)) + 20|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)>(2);
     if ($75) {
      $76 = ((($6)) + 36|0);
      $77 = ((($76)) + 4|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = $78&65535;
      $80 = ($79|0)==(45);
      if ($80) {
       continue;
      }
     }
    }
    $81 = ((($6)) + 36|0);
    $82 = ((($81)) + 2|0);
    $83 = HEAP16[$82>>1]|0;
    $84 = $83&65535;
    $85 = ($84|0)==(43);
    $86 = $85&1;
    $9 = $86;
    $10 = 0;
    $11 = 0;
    $12 = 0;
    $13 = 0;
    $87 = ((($6)) + 24|0);
    HEAP32[$87>>2] = 2;
    $88 = ((($6)) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($6)) + 20|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = ((($6)) + 24|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($6)) + 36|0);
    $96 = (($95) + ($94<<1)|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&255;
    $99 = (_isValidChar($98)|0);
    $100 = ($99|0)!=(0);
    if (!($100)) {
     break;
    }
    $101 = ((($6)) + 24|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($6)) + 36|0);
    $104 = (($103) + ($102<<1)|0);
    $10 = $104;
    $12 = 1;
    $105 = ((($6)) + 24|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 1)|0;
    HEAP32[$105>>2] = $107;
    while(1) {
     $108 = ((($6)) + 24|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($6)) + 20|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($109|0)<($111|0);
     if (!($112)) {
      break;
     }
     $113 = ((($6)) + 24|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($6)) + 36|0);
     $116 = (($115) + ($114<<1)|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = $117&255;
     $119 = (_isValidChar($118)|0);
     $120 = ($119|0)!=(0);
     if (!($120)) {
      break;
     }
     $121 = $12;
     $122 = (($121) + 1)|0;
     $12 = $122;
     $123 = ((($6)) + 24|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) + 1)|0;
     HEAP32[$123>>2] = $125;
    }
    $126 = ((($6)) + 24|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ((($6)) + 20|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($127|0)<($129|0);
    L33: do {
     if ($130) {
      $131 = ((($6)) + 24|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($6)) + 36|0);
      $134 = (($133) + ($132<<1)|0);
      $135 = HEAP16[$134>>1]|0;
      $136 = $135&65535;
      $137 = ($136|0)==(58);
      if ($137) {
       $138 = ((($6)) + 24|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = (($139) + 1)|0;
       HEAP32[$138>>2] = $140;
       while(1) {
        $141 = ((($6)) + 24|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ((($6)) + 20|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($142|0)<($144|0);
        if ($145) {
         $146 = ((($6)) + 24|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = ((($6)) + 36|0);
         $149 = (($148) + ($147<<1)|0);
         $150 = HEAP16[$149>>1]|0;
         $151 = $150&255;
         $152 = (_isSpace($151)|0);
         $153 = ($152|0)!=(0);
         $290 = $153;
        } else {
         $290 = 0;
        }
        $154 = ((($6)) + 24|0);
        $155 = HEAP32[$154>>2]|0;
        if (!($290)) {
         break;
        }
        $156 = (($155) + 1)|0;
        HEAP32[$154>>2] = $156;
       }
       $157 = ((($6)) + 20|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($155|0)<($158|0);
       if (!($159)) {
        break L14;
       }
       $160 = $9;
       $161 = ($160|0)!=(0);
       if ($161) {
        $162 = ((($6)) + 24|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = ((($6)) + 36|0);
        $165 = (($164) + ($163<<1)|0);
        $166 = HEAP16[$165>>1]|0;
        $167 = $166&255;
        $168 = (_isValidChar($167)|0);
        $169 = ($168|0)!=(0);
        if (!($169)) {
         break L14;
        }
       }
       $170 = ((($6)) + 24|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ((($6)) + 36|0);
       $173 = (($172) + ($171<<1)|0);
       $11 = $173;
       $13 = 1;
       $174 = ((($6)) + 24|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = (($175) + 1)|0;
       HEAP32[$174>>2] = $176;
       while(1) {
        $177 = ((($6)) + 24|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ((($6)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($178|0)<($180|0);
        if (!($181)) {
         break L33;
        }
        $182 = $9;
        $183 = ($182|0)!=(0);
        if ($183) {
         $184 = ((($6)) + 24|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = ((($6)) + 36|0);
         $187 = (($186) + ($185<<1)|0);
         $188 = HEAP16[$187>>1]|0;
         $189 = $188&255;
         $190 = (_isValidChar($189)|0);
         $191 = ($190|0)!=(0);
         if (!($191)) {
          break L33;
         }
        }
        $192 = $13;
        $193 = (($192) + 1)|0;
        $13 = $193;
        $194 = ((($6)) + 24|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = (($195) + 1)|0;
        HEAP32[$194>>2] = $196;
       }
      }
     }
    } while(0);
    $197 = ((($6)) + 24|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ((($6)) + 20|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ($198|0)==($200|0);
    if (!($201)) {
     break;
    }
    $202 = $10;
    $203 = $12;
    $204 = (_widestrToStr($202,$203)|0);
    $14 = $204;
    $205 = $11;
    $206 = ($205|0)!=(0|0);
    if ($206) {
     $207 = $11;
     $208 = $13;
     $209 = (_widestrToStr($207,$208)|0);
     $210 = $209;
    } else {
     $210 = 0;
    }
    $15 = $210;
    $211 = $9;
    $212 = ($211|0)!=(0);
    if (!($212)) {
     $213 = $15;
     $214 = ($213|0)!=(0|0);
     if (!($214)) {
      break;
     }
     $16 = 0;
     $17 = 0;
     $18 = 1;
     while(1) {
      $215 = $16;
      $216 = $15;
      $217 = (($216) + ($215)|0);
      $218 = HEAP8[$217>>0]|0;
      $219 = ($218<<24>>24)!=(0);
      if (!($219)) {
       break;
      }
      $220 = $16;
      $221 = $15;
      $222 = (($221) + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = (_isSpace($223)|0);
      $225 = ($224|0)!=(0);
      do {
       if ($225) {
        $226 = $18;
        $227 = ($226|0)!=(0);
        if ($227) {
         break;
        }
        $228 = $17;
        $229 = (($228) + 1)|0;
        $17 = $229;
        $230 = $15;
        $231 = (($230) + ($228)|0);
        HEAP8[$231>>0] = 32;
        $18 = 1;
       } else {
        $232 = $16;
        $233 = $15;
        $234 = (($233) + ($232)|0);
        $235 = HEAP8[$234>>0]|0;
        $236 = $17;
        $237 = (($236) + 1)|0;
        $17 = $237;
        $238 = $15;
        $239 = (($238) + ($236)|0);
        HEAP8[$239>>0] = $235;
        $18 = 0;
       }
      } while(0);
      $240 = $16;
      $241 = (($240) + 1)|0;
      $16 = $241;
     }
     $242 = $17;
     $243 = ($242|0)>(0);
     do {
      if ($243) {
       $244 = $17;
       $245 = (($244) - 1)|0;
       $246 = $15;
       $247 = (($246) + ($245)|0);
       $248 = HEAP8[$247>>0]|0;
       $249 = $248 << 24 >> 24;
       $250 = ($249|0)==(32);
       if (!($250)) {
        break;
       }
       $251 = $17;
       $252 = (($251) + -1)|0;
       $17 = $252;
      }
     } while(0);
     $253 = $17;
     $254 = $15;
     $255 = (($254) + ($253)|0);
     HEAP8[$255>>0] = 0;
    }
    $256 = $14;
    $257 = $15;
    _feature_new($19,$256,$257);
    $258 = HEAP32[$19>>2]|0;
    $259 = ((($19)) + 4|0);
    $260 = HEAP32[$259>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $258;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $260;
    __lou_logMessage(10000,7340,$vararg_buffer9);
    $261 = $5;
    $262 = (_malloc(8)|0);
    ;HEAP8[$262>>0]=HEAP8[$19>>0]|0;HEAP8[$262+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$262+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$262+3>>0]=HEAP8[$19+3>>0]|0;HEAP8[$262+4>>0]=HEAP8[$19+4>>0]|0;HEAP8[$262+5>>0]=HEAP8[$19+5>>0]|0;HEAP8[$262+6>>0]=HEAP8[$19+6>>0]|0;HEAP8[$262+7>>0]=HEAP8[$19+7>>0]|0;
    $263 = (_list_conj($261,$262,0,0,16)|0);
    $5 = $263;
    $264 = $14;
    _free($264);
    $265 = $15;
    _free($265);
   }
   if ((label|0) == 56) {
    $266 = ((($6)) + 4|0);
    $267 = HEAP32[$266>>2]|0;
    (_fclose($267)|0);
    break;
   }
   $271 = ((($6)) + 24|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = ((($6)) + 20|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = ($272|0)<($274|0);
   if ($275) {
    $276 = ((($6)) + 24|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = ((($6)) + 36|0);
    $279 = (($278) + ($277<<1)|0);
    $280 = HEAP16[$279>>1]|0;
    $281 = $280&65535;
    $282 = ((($6)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($6)) + 24|0);
    $285 = HEAP32[$284>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $281;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $283;
    $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
    HEAP32[$vararg_ptr20>>2] = $285;
    __lou_logMessage(40000,7389,$vararg_buffer16);
   } else {
    $286 = ((($6)) + 8|0);
    $287 = HEAP32[$286>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $287;
    __lou_logMessage(40000,7437,$vararg_buffer21);
   }
   $288 = $5;
   _list_free($288);
   $2 = 0;
   $289 = $2;
   STACKTOP = sp;return ($289|0);
  } else {
   $268 = HEAP32[$6>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $268;
   __lou_logMessage(40000,7366,$vararg_buffer13);
  }
 } while(0);
 $269 = $5;
 $270 = (_list_sort($269,17)|0);
 $2 = $270;
 $289 = $2;
 STACKTOP = sp;return ($289|0);
}
function _isValidChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(48);
 if ($4) {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)<=(57);
  if ($7) {
   $30 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)>=(65);
   if ($10) {
    $11 = $1;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)<=(90);
    if ($13) {
     $30 = 1;
     break;
    }
   }
   $14 = $1;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)>=(97);
   if ($16) {
    $17 = $1;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)<=(122);
    if ($19) {
     $30 = 1;
     break;
    }
   }
   $20 = $1;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(45);
   if ($22) {
    $30 = 1;
   } else {
    $23 = $1;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(46);
    if ($25) {
     $30 = 1;
    } else {
     $26 = $1;
     $27 = $26 << 24 >> 24;
     $28 = ($27|0)==(95);
     $30 = $28;
    }
   }
  }
 } while(0);
 $29 = $30&1;
 STACKTOP = sp;return ($29|0);
}
function _isSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(32);
 if ($4) {
  $9 = 1;
 } else {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(9);
  $9 = $7;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _widestrToStr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = (1 + ($6))|0;
 $8 = $7;
 $9 = (_malloc($8)|0);
 $4 = $9;
 $5 = 0;
 while(1) {
  $10 = $5;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $5;
  if (!($12)) {
   break;
  }
  $14 = $2;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&255;
  $18 = $5;
  $19 = $4;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $17;
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 $23 = $4;
 $24 = (($23) + ($13)|0);
 HEAP8[$24>>0] = 0;
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _feature_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 $6 = $3;
 $7 = (___strdup($6)|0);
 HEAP32[$5>>2] = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 $10 = $4;
 $11 = HEAP32[195]|0;
 $12 = $9 ? $10 : $11;
 $13 = (___strdup($12)|0);
 $14 = ((($5)) + 4|0);
 HEAP32[$14>>2] = $13;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function _feature_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _cmpKeys($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strcasecmp($5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _list_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = $5;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_list_conj($9,$11,$12,0,$15)|0);
  $4 = $16;
  $17 = $5;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = $5;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
 }
 $22 = $2;
 _list_free($22);
 $23 = $4;
 STACKTOP = sp;return ($23|0);
}
function _parseQuery($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 28|0;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $9 = 0;
 while(1) {
  $16 = $9;
  $17 = (($16) + 1)|0;
  $9 = $17;
  $18 = $2;
  $19 = (($18) + ($16)|0);
  $8 = $19;
  $20 = $8;
  $21 = HEAP8[$20>>0]|0;
  $22 = (_isSpace($21)|0);
  $23 = ($22|0)!=(0);
  if (!($23)) {
   $24 = $8;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)==(10);
   $28 = $27&1;
   $29 = $8;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)==(0);
   $33 = $32&1;
   $34 = $28 | $33;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    $73 = $8;
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 << 24 >> 24;
    $76 = ($75|0)==(58);
    if ($76) {
     $77 = $4;
     $78 = ($77|0)==(0|0);
     $79 = $5;
     $80 = ($79|0)!=(0|0);
     $or$cond = $78 | $80;
     if ($or$cond) {
      label = 23;
      break;
     }
     $81 = $9;
     $82 = (($81) + 1)|0;
     $9 = $82;
     $83 = $2;
     $84 = (($83) + ($81)|0);
     $8 = $84;
     $85 = $8;
     $86 = HEAP8[$85>>0]|0;
     $87 = (_isValidChar($86)|0);
     $88 = ($87|0)!=(0);
     if (!($88)) {
      label = 23;
      break;
     }
     $89 = $8;
     $5 = $89;
     $7 = 1;
     continue;
    }
    $90 = $8;
    $91 = HEAP8[$90>>0]|0;
    $92 = (_isValidChar($91)|0);
    $93 = ($92|0)!=(0);
    if (!($93)) {
     label = 23;
     break;
    }
    $94 = $5;
    $95 = ($94|0)!=(0|0);
    if ($95) {
     $96 = $7;
     $97 = (($96) + 1)|0;
     $7 = $97;
     continue;
    }
    $98 = $4;
    $99 = ($98|0)!=(0|0);
    if ($99) {
     $100 = $6;
     $101 = (($100) + 1)|0;
     $6 = $101;
     continue;
    } else {
     $102 = $8;
     $4 = $102;
     $6 = 1;
     continue;
    }
   }
  }
  $36 = $4;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $6;
   $39 = (($38) + 1)|0;
   $40 = (_malloc($39)|0);
   $10 = $40;
   $41 = $6;
   $42 = $10;
   $43 = (($42) + ($41)|0);
   HEAP8[$43>>0] = 0;
   $44 = $10;
   $45 = $4;
   $46 = $6;
   _memcpy(($44|0),($45|0),($46|0))|0;
   $11 = 0;
   $47 = $5;
   $48 = ($47|0)!=(0|0);
   if ($48) {
    $49 = $7;
    $50 = (($49) + 1)|0;
    $51 = (_malloc($50)|0);
    $11 = $51;
    $52 = $7;
    $53 = $11;
    $54 = (($53) + ($52)|0);
    HEAP8[$54>>0] = 0;
    $55 = $11;
    $56 = $5;
    $57 = $7;
    _memcpy(($55|0),($56|0),($57|0))|0;
   }
   $58 = $10;
   $59 = $11;
   _feature_new($12,$58,$59);
   $60 = ((($12)) + 8|0);
   HEAP32[$60>>2] = 0;
   $61 = HEAP32[$12>>2]|0;
   $62 = ((($12)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP32[$vararg_buffer>>2] = $61;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $63;
   __lou_logMessage(10000,7527,$vararg_buffer);
   $64 = $3;
   $65 = (_malloc(12)|0);
   dest=$65; src=$12; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $66 = (_list_conj($64,$65,0,0,16)|0);
   $3 = $66;
   $67 = $10;
   _free($67);
   $68 = $11;
   _free($68);
   $5 = 0;
   $4 = 0;
   $7 = 0;
   $6 = 0;
  }
  $69 = $8;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = ($71|0)==(0);
  if ($72) {
   break;
  }
 }
 if ((label|0) == 23) {
  $117 = $8;
  $118 = $9;
  HEAP32[$vararg_buffer3>>2] = $117;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $118;
  __lou_logMessage(40000,7553,$vararg_buffer3);
  $119 = $3;
  _list_free($119);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $13 = 1;
 $103 = $3;
 $14 = $103;
 while(1) {
  $104 = $14;
  $105 = ($104|0)!=(0|0);
  if (!($105)) {
   break;
  }
  $106 = $14;
  $107 = HEAP32[$106>>2]|0;
  $15 = $107;
  $108 = $13;
  $109 = (($108) + 1)|0;
  $13 = $109;
  $110 = $15;
  $111 = ((($110)) + 8|0);
  HEAP32[$111>>2] = $108;
  $112 = $14;
  $113 = ((($112)) + 8|0);
  $114 = HEAP32[$113>>2]|0;
  $14 = $114;
 }
 $115 = $3;
 $116 = (_list_sort($115,17)|0);
 $1 = $116;
 $120 = $1;
 STACKTOP = sp;return ($120|0);
}
function _matchFeatureLists($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ($14|0)!=(0);
 $6 = 10;
 if ($15) {
  $7 = -25;
  $8 = -5;
  $9 = -1;
 } else {
  $7 = -100;
  $8 = -20;
  $9 = -1;
 }
 $10 = 0;
 $16 = $3;
 $11 = $16;
 $17 = $4;
 $12 = $17;
 while(1) {
  $18 = $11;
  $19 = ($18|0)!=(0|0);
  $20 = $12;
  $21 = ($20|0)!=(0|0);
  if (!($19)) {
   if (!($21)) {
    break;
   }
   $22 = $9;
   $23 = $10;
   $24 = (($23) + ($22))|0;
   $10 = $24;
   $25 = $12;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $12 = $27;
   continue;
  }
  if (!($21)) {
   $28 = $8;
   $29 = $10;
   $30 = (($29) + ($28))|0;
   $10 = $30;
   $31 = $11;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $11 = $33;
   continue;
  }
  $34 = $11;
  $35 = HEAP32[$34>>2]|0;
  $36 = $12;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_cmpKeys($35,$37)|0);
  $13 = $38;
  $39 = $13;
  $40 = ($39|0)<(0);
  if ($40) {
   $41 = $8;
   $42 = $10;
   $43 = (($42) + ($41))|0;
   $10 = $43;
   $44 = $11;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $11 = $46;
   continue;
  }
  $47 = $13;
  $48 = ($47|0)>(0);
  if ($48) {
   $49 = $9;
   $50 = $10;
   $51 = (($50) + ($49))|0;
   $10 = $51;
   $52 = $12;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $12 = $54;
   continue;
  }
  $55 = $11;
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $12;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (_strcasecmp($58,$62)|0);
  $64 = ($63|0)==(0);
  if ($64) {
   $65 = $6;
   $66 = $10;
   $67 = (($66) + ($65))|0;
   $10 = $67;
  } else {
   $68 = $7;
   $69 = $10;
   $70 = (($69) + ($68))|0;
   $10 = $70;
  }
  $71 = $11;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $11 = $73;
  $74 = $12;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $12 = $76;
 }
 $77 = $10;
 STACKTOP = sp;return ($77|0);
}
function _cmpMatches($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>($10|0);
 if ($11) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __lou_pattern_compile($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $10;
 HEAP32[3791] = $12;
 HEAP32[$11>>2] = 0;
 $13 = $8;
 HEAP16[$13>>1] = 2;
 $14 = $8;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $8;
 $21 = $8;
 $22 = ((($21)) + 2|0);
 $23 = (_pattern_compile_1($16,$17,$11,$18,$19,$20,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $5 = 0;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $25 = $8;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($27) + 3)|0;
 $29 = $28&65535;
 HEAP16[$25>>1] = $29;
 $30 = $8;
 $31 = $9;
 $32 = $8;
 $33 = (_pattern_compile_2($30,2,$31,$32)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $5 = 0;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $35 = $8;
 $36 = $9;
 $37 = $8;
 $38 = (_pattern_compile_3($35,2,$36,$37)|0);
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $8;
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $5 = $42;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 } else {
  $5 = 0;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function __lou_pattern_reverse($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _pattern_reverse_expression($2,2);
 STACKTOP = sp;return;
}
function __lou_pattern_check($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 HEAP32[3791] = $12;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = (_pattern_check_hook($13,$14,$15,$16,$17,0,0,0)|0);
 STACKTOP = sp;return ($18|0);
}
function _pattern_check_hook($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $16 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $19 = $9;
 HEAP32[$16>>2] = $19;
 $20 = $12;
 $21 = ((($20)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = $23<<2;
 $25 = (_malloc($24)|0);
 $18 = $25;
 $26 = $18;
 $27 = $12;
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $30<<2;
 _memset(($26|0),0,($31|0))|0;
 $32 = $8;
 $33 = $10;
 $34 = $11;
 $35 = $12;
 $36 = $13;
 $37 = $14;
 $38 = $15;
 $39 = $18;
 $40 = (_pattern_check_expression($32,$16,$33,$34,$35,$36,$37,$38,2,0,0,$39)|0);
 $17 = $40;
 $41 = $18;
 _free($41);
 $42 = $17;
 STACKTOP = sp;return ($42|0);
}
function _pattern_check_expression($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch$split2D = 0, $switch$split302D = 0, $switch$split332D = 0, $switch$split362D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $30 = 0;
 $31 = $14;
 $32 = HEAP32[$31>>2]|0;
 $26 = $32;
 L1: while(1) {
  $33 = $21;
  $34 = (($33) + 0)|0;
  $35 = $17;
  $36 = (($35) + ($34<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($38|0)==(65535);
  if ($39) {
   $40 = $21;
   $41 = (($40) + 0)|0;
   $42 = $17;
   $43 = (($42) + ($41<<1)|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = ($45|0)==(65535);
   $48 = $46;
  } else {
   $48 = 0;
  }
  $47 = $48 ^ 1;
  if (!($47)) {
   label = 68;
   break;
  }
  $49 = $21;
  $50 = (($49) + 0)|0;
  $51 = $17;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = ($54|0)==(12);
  $56 = $14;
  $57 = HEAP32[$56>>2]|0;
  $58 = $16;
  $59 = Math_imul($57, $58)|0;
  $60 = $15;
  $61 = $16;
  $62 = Math_imul($60, $61)|0;
  $63 = ($59|0)>=($62|0);
  if ($55) {
   label = 6;
   break;
  }
  if ($63) {
   $68 = $21;
   $69 = (($68) + 0)|0;
   $70 = $17;
   $71 = (($70) + ($69<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   switch ($73|0) {
   case 9:  {
    label = 11;
    break L1;
    break;
   }
   case 10: case 8:  {
    label = 16;
    break L1;
    break;
   }
   default: {
   }
   }
  }
  $86 = $21;
  $87 = (($86) + 0)|0;
  $88 = $17;
  $89 = (($88) + ($87<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $switch$split2D = ($91|0)<(7);
  L11: do {
   if ($switch$split2D) {
    switch ($91|0) {
    case 1:  {
     $92 = $21;
     $93 = (($92) + 2)|0;
     $94 = $17;
     $95 = (($94) + ($93<<1)|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $96&65535;
     $21 = $97;
     break L11;
     break;
    }
    case 2:  {
     $98 = $21;
     $99 = (($98) + 3)|0;
     $100 = $17;
     $101 = (($100) + ($99<<1)|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $102&65535;
     $21 = $103;
     break L11;
     break;
    }
    case 3:  {
     $104 = $22;
     $105 = ($104|0)!=(0);
     $106 = $105 ^ 1;
     $107 = $106&1;
     $22 = $107;
     $108 = $21;
     $109 = (($108) + 3)|0;
     $110 = $17;
     $111 = (($110) + ($109<<1)|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $21 = $113;
     break L11;
     break;
    }
    case 5: case 4:  {
     $114 = $21;
     $115 = $23;
     $116 = ($114|0)==($115|0);
     if ($116) {
      $117 = $23;
      $118 = (($117) + 4)|0;
      $119 = $17;
      $120 = (($119) + ($118<<1)|0);
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $123 = $24;
      $124 = (($123) + ($122<<2)|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (($125) + 1)|0;
      HEAP32[$124>>2] = $126;
      label = 25;
     } else {
      $127 = $21;
      $128 = (($127) + 4)|0;
      $129 = $17;
      $130 = (($129) + ($128<<1)|0);
      $131 = HEAP16[$130>>1]|0;
      $132 = $131&65535;
      $133 = $24;
      $134 = (($133) + ($132<<2)|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($135|0)!=(0);
      if (!($136)) {
       $137 = $21;
       $23 = $137;
       $138 = $23;
       $139 = (($138) + 4)|0;
       $140 = $17;
       $141 = (($140) + ($139<<1)|0);
       $142 = HEAP16[$141>>1]|0;
       $143 = $142&65535;
       $144 = $24;
       $145 = (($144) + ($143<<2)|0);
       HEAP32[$145>>2] = 1;
       label = 25;
      }
     }
     if ((label|0) == 25) {
      label = 0;
      $146 = $14;
      $147 = HEAP32[$146>>2]|0;
      $25 = $147;
      $148 = $13;
      $149 = $14;
      $150 = $15;
      $151 = $16;
      $152 = $17;
      $153 = $18;
      $154 = $19;
      $155 = $20;
      $156 = $21;
      $157 = (($156) + 3)|0;
      $158 = $17;
      $159 = (($158) + ($157<<1)|0);
      $160 = HEAP16[$159>>1]|0;
      $161 = $160&65535;
      $162 = $22;
      $163 = $23;
      $164 = $24;
      $165 = (_pattern_check_expression($148,$149,$150,$151,$152,$153,$154,$155,$161,$162,$163,$164)|0);
      $28 = $165;
      $166 = $28;
      $167 = ($166|0)!=(0);
      if ($167) {
       label = 26;
       break L1;
      }
      $168 = $25;
      $169 = $14;
      HEAP32[$169>>2] = $168;
      $170 = $23;
      $171 = (($170) + 4)|0;
      $172 = $17;
      $173 = (($172) + ($171<<1)|0);
      $174 = HEAP16[$173>>1]|0;
      $175 = $174&65535;
      $176 = $24;
      $177 = (($176) + ($175<<2)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = (($178) + -1)|0;
      HEAP32[$177>>2] = $179;
      $180 = $21;
      $181 = (($180) + 0)|0;
      $182 = $17;
      $183 = (($182) + ($181<<1)|0);
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = ($185|0)==(4);
      if ($186) {
       $187 = $23;
       $188 = (($187) + 4)|0;
       $189 = $17;
       $190 = (($189) + ($188<<1)|0);
       $191 = HEAP16[$190>>1]|0;
       $192 = $191&65535;
       $193 = $24;
       $194 = (($193) + ($192<<2)|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = ($195|0)<(1);
       if ($196) {
        label = 29;
        break L1;
       }
      }
     }
     $197 = $21;
     $198 = (($197) + 2)|0;
     $199 = $17;
     $200 = (($199) + ($198<<1)|0);
     $201 = HEAP16[$200>>1]|0;
     $202 = $201&65535;
     $21 = $202;
     break L11;
     break;
    }
    case 6:  {
     $203 = $14;
     $204 = HEAP32[$203>>2]|0;
     $25 = $204;
     $205 = $13;
     $206 = $14;
     $207 = $15;
     $208 = $16;
     $209 = $17;
     $210 = $18;
     $211 = $19;
     $212 = $20;
     $213 = $21;
     $214 = (($213) + 3)|0;
     $215 = $17;
     $216 = (($215) + ($214<<1)|0);
     $217 = HEAP16[$216>>1]|0;
     $218 = $217&65535;
     $219 = $22;
     $220 = $23;
     $221 = $24;
     $222 = (_pattern_check_expression($205,$206,$207,$208,$209,$210,$211,$212,$218,$219,$220,$221)|0);
     $223 = ($222|0)!=(0);
     if ($223) {
      label = 32;
      break L1;
     }
     $224 = $25;
     $225 = $14;
     HEAP32[$225>>2] = $224;
     $226 = $21;
     $227 = (($226) + 2)|0;
     $228 = $17;
     $229 = (($228) + ($227<<1)|0);
     $230 = HEAP16[$229>>1]|0;
     $231 = $230&65535;
     $21 = $231;
     break L11;
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
   } else {
    $switch$split302D = ($91|0)<(10);
    if ($switch$split302D) {
     switch ($91|0) {
     case 7:  {
      $232 = $14;
      $233 = HEAP32[$232>>2]|0;
      $25 = $233;
      $234 = $13;
      $235 = $14;
      $236 = $15;
      $237 = $16;
      $238 = $17;
      $239 = $18;
      $240 = $19;
      $241 = $20;
      $242 = $21;
      $243 = (($242) + 3)|0;
      $244 = $17;
      $245 = (($244) + ($243<<1)|0);
      $246 = HEAP16[$245>>1]|0;
      $247 = $246&65535;
      $248 = $22;
      $249 = $23;
      $250 = $24;
      $251 = (_pattern_check_expression($234,$235,$236,$237,$238,$239,$240,$241,$247,$248,$249,$250)|0);
      $252 = ($251|0)!=(0);
      if ($252) {
       label = 35;
       break L1;
      }
      $253 = $25;
      $254 = $14;
      HEAP32[$254>>2] = $253;
      $255 = $21;
      $256 = (($255) + 4)|0;
      $257 = $17;
      $258 = (($257) + ($256<<1)|0);
      $259 = HEAP16[$258>>1]|0;
      $260 = $259&65535;
      $21 = $260;
      break L11;
      break;
     }
     case 8:  {
      $261 = $16;
      $262 = $14;
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + ($261))|0;
      HEAP32[$262>>2] = $264;
      $265 = $21;
      $266 = (($265) + 2)|0;
      $267 = $17;
      $268 = (($267) + ($266<<1)|0);
      $269 = HEAP16[$268>>1]|0;
      $270 = $269&65535;
      $21 = $270;
      break L11;
      break;
     }
     case 9:  {
      $271 = $14;
      $272 = HEAP32[$271>>2]|0;
      $273 = $13;
      $274 = (($273) + ($272<<1)|0);
      $275 = HEAP16[$274>>1]|0;
      $276 = $21;
      $277 = (($276) + 3)|0;
      $278 = $17;
      $279 = (($278) + ($277<<1)|0);
      $280 = (_pattern_check_attrs($275,$279)|0);
      $28 = $280;
      $281 = $28;
      $282 = ($281|0)!=(0);
      $283 = $22;
      $284 = ($283|0)!=(0);
      $or$cond = $282 & $284;
      if ($or$cond) {
       label = 39;
       break L1;
      }
      $285 = $28;
      $286 = ($285|0)!=(0);
      $287 = $22;
      $288 = ($287|0)!=(0);
      $or$cond3 = $286 | $288;
      if (!($or$cond3)) {
       label = 41;
       break L1;
      }
      $289 = $16;
      $290 = $14;
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + ($289))|0;
      HEAP32[$290>>2] = $292;
      $293 = $21;
      $294 = (($293) + 2)|0;
      $295 = $17;
      $296 = (($295) + ($294<<1)|0);
      $297 = HEAP16[$296>>1]|0;
      $298 = $297&65535;
      $21 = $298;
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    $switch$split332D = ($91|0)<(11);
    if ($switch$split332D) {
     switch ($91|0) {
     case 10:  {
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
     $299 = $14;
     $300 = HEAP32[$299>>2]|0;
     $301 = $13;
     $302 = (($301) + ($300<<1)|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $21;
     $305 = (($304) + 3)|0;
     $306 = $17;
     $307 = (($306) + ($305<<1)|0);
     $308 = (_pattern_check_chars($303,$307)|0);
     $28 = $308;
     $309 = $28;
     $310 = ($309|0)!=(0);
     $311 = $22;
     $312 = ($311|0)!=(0);
     $or$cond5 = $310 & $312;
     if ($or$cond5) {
      label = 44;
      break L1;
     }
     $313 = $28;
     $314 = ($313|0)!=(0);
     $315 = $22;
     $316 = ($315|0)!=(0);
     $or$cond7 = $314 | $316;
     if (!($or$cond7)) {
      label = 46;
      break L1;
     }
     $317 = $16;
     $318 = $14;
     $319 = HEAP32[$318>>2]|0;
     $320 = (($319) + ($317))|0;
     HEAP32[$318>>2] = $320;
     $321 = $21;
     $322 = (($321) + 2)|0;
     $323 = $17;
     $324 = (($323) + ($322<<1)|0);
     $325 = HEAP16[$324>>1]|0;
     $326 = $325&65535;
     $21 = $326;
     break;
    }
    $switch$split362D = ($91|0)<(65535);
    if (!($switch$split362D)) {
     switch ($91|0) {
     case 65535:  {
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    switch ($91|0) {
    case 11:  {
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
    $327 = $18;
    $328 = ($327|0)==(0|0);
    if ($328) {
     label = 49;
     break L1;
    }
    $329 = $21;
    $330 = (($329) + 3)|0;
    $331 = $17;
    $332 = (($331) + ($330<<1)|0);
    $30 = $332;
    $29 = 0;
    while(1) {
     $333 = $29;
     $334 = $30;
     $335 = HEAP16[$334>>1]|0;
     $336 = $335&65535;
     $337 = ($333|0)<($336|0);
     if (!($337)) {
      break;
     }
     $338 = $29;
     $339 = (($338) + 1)|0;
     $340 = $30;
     $341 = (($340) + ($339<<1)|0);
     $342 = HEAP16[$341>>1]|0;
     $343 = $29;
     $344 = $19;
     $345 = (($344) + ($343<<1)|0);
     HEAP16[$345>>1] = $342;
     $346 = $29;
     $347 = (($346) + 1)|0;
     $29 = $347;
    }
    $348 = $18;
    $349 = $14;
    $350 = HEAP32[$349>>2]|0;
    $351 = $13;
    $352 = (($351) + ($350<<1)|0);
    $353 = HEAP16[$352>>1]|0;
    $354 = $30;
    $355 = HEAP16[$354>>1]|0;
    $356 = $355&65535;
    $357 = (FUNCTION_TABLE_iii[$348 & 31]($353,$356)|0);
    $28 = $357;
    $358 = $28;
    $359 = ($358|0)!=(0);
    $360 = $22;
    $361 = ($360|0)!=(0);
    $or$cond9 = $359 & $361;
    if ($or$cond9) {
     label = 54;
     break L1;
    }
    $362 = $28;
    $363 = ($362|0)!=(0);
    $364 = $22;
    $365 = ($364|0)!=(0);
    $or$cond11 = $363 | $365;
    if (!($or$cond11)) {
     label = 56;
     break L1;
    }
    $366 = $16;
    $367 = $14;
    $368 = HEAP32[$367>>2]|0;
    $369 = (($368) + ($366))|0;
    HEAP32[$367>>2] = $369;
    $370 = $21;
    $371 = (($370) + 2)|0;
    $372 = $17;
    $373 = (($372) + ($371<<1)|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $374&65535;
    $21 = $375;
   }
  } while(0);
  while(1) {
   $376 = $21;
   $377 = (($376) + 0)|0;
   $378 = $17;
   $379 = (($378) + ($377<<1)|0);
   $380 = HEAP16[$379>>1]|0;
   $381 = $380&65535;
   $382 = ($381|0)==(65535);
   if (!($382)) {
    continue L1;
   }
   $383 = $21;
   $384 = (($383) + 2)|0;
   $385 = $17;
   $386 = (($385) + ($384<<1)|0);
   $387 = HEAP16[$386>>1]|0;
   $388 = $387&65535;
   $389 = ($388|0)==(65535);
   if ($389) {
    continue L1;
   }
   $390 = $21;
   $391 = (($390) + 2)|0;
   $392 = $17;
   $393 = (($392) + ($391<<1)|0);
   $394 = HEAP16[$393>>1]|0;
   $395 = $394&65535;
   $21 = $395;
   $396 = $21;
   $397 = (($396) + 0)|0;
   $398 = $17;
   $399 = (($398) + ($397<<1)|0);
   $400 = HEAP16[$399>>1]|0;
   $401 = $400&65535;
   $402 = ($401|0)==(5);
   if ($402) {
    break;
   }
   $403 = $21;
   $404 = (($403) + 0)|0;
   $405 = $17;
   $406 = (($405) + ($404<<1)|0);
   $407 = HEAP16[$406>>1]|0;
   $408 = $407&65535;
   $409 = ($408|0)==(4);
   if ($409) {
    break;
   }
   $414 = $21;
   $415 = (($414) + 0)|0;
   $416 = $17;
   $417 = (($416) + ($415<<1)|0);
   $418 = HEAP16[$417>>1]|0;
   $419 = $418&65535;
   $420 = ($419|0)==(3);
   if ($420) {
    $421 = $22;
    $422 = ($421|0)!=(0);
    $423 = $422 ^ 1;
    $424 = $423&1;
    $22 = $424;
   }
   $425 = $21;
   $426 = (($425) + 2)|0;
   $427 = $17;
   $428 = (($427) + ($426<<1)|0);
   $429 = HEAP16[$428>>1]|0;
   $430 = $429&65535;
   $21 = $430;
  }
  $410 = $14;
  $411 = HEAP32[$410>>2]|0;
  $412 = $26;
  $413 = ($411|0)==($412|0);
  if ($413) {
   label = 64;
   break;
  }
 }
 switch (label|0) {
  case 6: {
   $64 = $22;
   if ($63) {
    $65 = ($64|0)!=(0);
    $66 = $65 ^ 1;
    $67 = $66&1;
    $12 = $67;
    $431 = $12;
    STACKTOP = sp;return ($431|0);
   } else {
    $12 = $64;
    $431 = $12;
    STACKTOP = sp;return ($431|0);
   }
   break;
  }
  case 11: {
   $74 = $21;
   $75 = (($74) + 3)|0;
   $76 = $17;
   $77 = (($76) + ($75<<1)|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = $79 << 16;
   $27 = $80;
   $81 = $27;
   $82 = $81 & 268435456;
   $83 = ($82|0)!=(0);
   if (!($83)) {
    $12 = 0;
    $431 = $12;
    STACKTOP = sp;return ($431|0);
   }
   $84 = $22;
   $85 = ($84|0)!=(0);
   if ($85) {
    $12 = 0;
    $431 = $12;
    STACKTOP = sp;return ($431|0);
   } else {
    $12 = 1;
    $431 = $12;
    STACKTOP = sp;return ($431|0);
   }
   break;
  }
  case 16: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 26: {
   $12 = 1;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 29: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 32: {
   $12 = 1;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 35: {
   $12 = 1;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 39: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 41: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 44: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 46: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 49: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 54: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 56: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 58: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 64: {
   $12 = 0;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
  case 68: {
   $12 = 1;
   $431 = $12;
   STACKTOP = sp;return ($431|0);
   break;
  }
 }
 return (0)|0;
}
function _pattern_check_attrs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 << 16;
 $10 = $4;
 $11 = ((($10)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $9 | $13;
 $15 = $14 & -805306369;
 $5 = $15;
 $16 = $3;
 $17 = $5;
 $18 = ($17|0)<(0);
 $19 = $18 << 31 >> 31;
 $20 = (_checkAttr_337($16,$17,$19)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 } else {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pattern_check_chars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + 1)|0;
 $5 = $10;
 $6 = 1;
 while(1) {
  $11 = $6;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $14&65535;
  $16 = $6;
  $17 = $4;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($15|0)==($20|0);
  if ($21) {
   break;
  }
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 $24 = $6;
 $25 = $5;
 $26 = ($24|0)==($25|0);
 if ($26) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $2 = 1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _checkAttr_337($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $3 = $0;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = $3;
 $10 = HEAP32[196]|0;
 $11 = ($10|0)!=(0);
 $12 = $11 ? 0 : 1;
 $13 = (_findCharOrDots_338($9,$12)|0);
 $14 = ((($13)) + 16|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $17 & $23;
 $28 = $20 & $26;
 $29 = ($27|0)!=(0);
 $30 = ($28|0)!=(0);
 $31 = $29 | $30;
 $32 = $31 ? 1 : 0;
 STACKTOP = sp;return ($32|0);
}
function _findCharOrDots_338($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (__lou_charHash($9)|0);
 $8 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 $13 = $8;
 $14 = HEAP32[3791]|0;
 if ($12) {
  $15 = ((($14)) + 1856|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $5 = 136;
 } else {
  $18 = ((($14)) + 6348|0);
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $5 = 168;
 }
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 8;
   break;
  }
  $23 = $7;
  $24 = HEAP32[3791]|0;
  $25 = ((($24)) + 21088|0);
  $26 = (($25) + ($23<<3)|0);
  $6 = $26;
  $27 = $6;
  $28 = ((($27)) + 24|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $3;
  $32 = $31&65535;
  $33 = ($30|0)==($32|0);
  $34 = $6;
  if ($33) {
   label = 6;
   break;
  }
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
 }
 if ((label|0) == 6) {
  $2 = $34;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 8) {
  $36 = $3;
  $37 = $5;
  $38 = ((($37)) + 28|0);
  HEAP16[$38>>1] = $36;
  $39 = $5;
  $40 = ((($39)) + 26|0);
  HEAP16[$40>>1] = $36;
  $41 = $5;
  $42 = ((($41)) + 24|0);
  HEAP16[$42>>1] = $36;
  $43 = $5;
  $2 = $43;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _pattern_reverse_expression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (($7) + 2)|0;
 $9 = $2;
 $10 = (($9) + ($8<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $4 = $11;
 $12 = $4;
 $13 = $12&65535;
 $14 = (($13) + 0)|0;
 $15 = $2;
 $16 = (($15) + ($14<<1)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ($18|0)==(65535);
 if ($19) {
  STACKTOP = sp;return;
 }
 while(1) {
  $20 = $4;
  $21 = $20&65535;
  $22 = (($21) + 0)|0;
  $23 = $2;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)!=(65535);
  $28 = $4;
  $29 = $28&65535;
  if (!($27)) {
   break;
  }
  $30 = (($29) + 2)|0;
  $31 = $2;
  $32 = (($31) + ($30<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $4 = $33;
 }
 $34 = (($29) + 1)|0;
 $35 = $2;
 $36 = (($35) + ($34<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $5 = $37;
 $38 = $5;
 $39 = $38&65535;
 $40 = (($39) + 1)|0;
 $41 = $2;
 $42 = (($41) + ($40<<1)|0);
 $43 = HEAP16[$42>>1]|0;
 $6 = $43;
 $44 = $5;
 $45 = $3;
 $46 = (($45) + 2)|0;
 $47 = $2;
 $48 = (($47) + ($46<<1)|0);
 HEAP16[$48>>1] = $44;
 $49 = $3;
 $50 = $49&65535;
 $51 = $5;
 $52 = $51&65535;
 $53 = (($52) + 1)|0;
 $54 = $2;
 $55 = (($54) + ($53<<1)|0);
 HEAP16[$55>>1] = $50;
 $56 = $6;
 $57 = $5;
 $58 = $57&65535;
 $59 = (($58) + 2)|0;
 $60 = $2;
 $61 = (($60) + ($59<<1)|0);
 HEAP16[$61>>1] = $56;
 $62 = $2;
 $63 = $5;
 $64 = $63&65535;
 _pattern_reverse_branch($62,$64);
 while(1) {
  $65 = $6;
  $66 = $65&65535;
  $67 = $3;
  $68 = ($66|0)!=($67|0);
  if (!($68)) {
   break;
  }
  $69 = $6;
  $5 = $69;
  $70 = $6;
  $71 = $70&65535;
  $72 = (($71) + 1)|0;
  $73 = $2;
  $74 = (($73) + ($72<<1)|0);
  $75 = HEAP16[$74>>1]|0;
  $6 = $75;
  $76 = $2;
  $77 = $5;
  $78 = $77&65535;
  _pattern_reverse_branch($76,$78);
  $79 = $5;
  $80 = $79&65535;
  $81 = (($80) + 2)|0;
  $82 = $2;
  $83 = (($82) + ($81<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $5;
  $86 = $85&65535;
  $87 = (($86) + 1)|0;
  $88 = $2;
  $89 = (($88) + ($87<<1)|0);
  HEAP16[$89>>1] = $84;
  $90 = $6;
  $91 = $5;
  $92 = $91&65535;
  $93 = (($92) + 2)|0;
  $94 = $2;
  $95 = (($94) + ($93<<1)|0);
  HEAP16[$95>>1] = $90;
 }
 $96 = $5;
 $97 = $96&65535;
 $98 = (($97) + 2)|0;
 $99 = $2;
 $100 = (($99) + ($98<<1)|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $5;
 $103 = $102&65535;
 $104 = (($103) + 1)|0;
 $105 = $2;
 $106 = (($105) + ($104<<1)|0);
 HEAP16[$106>>1] = $101;
 $107 = $4;
 $108 = $5;
 $109 = $108&65535;
 $110 = (($109) + 2)|0;
 $111 = $2;
 $112 = (($111) + ($110<<1)|0);
 HEAP16[$112>>1] = $107;
 $113 = $5;
 $114 = $4;
 $115 = $114&65535;
 $116 = (($115) + 1)|0;
 $117 = $2;
 $118 = (($117) + ($116<<1)|0);
 HEAP16[$118>>1] = $113;
 STACKTOP = sp;return;
}
function _pattern_reverse_branch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (($5) + 0)|0;
 $7 = $2;
 $8 = (($7) + ($6<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 switch ($10|0) {
 case 7:  {
  $11 = $2;
  $12 = $3;
  $13 = (($12) + 3)|0;
  $14 = $2;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  _pattern_reverse_expression($11,$17);
  $18 = $3;
  $19 = (($18) + 3)|0;
  $20 = $2;
  $21 = (($20) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $4 = $22;
  $23 = $3;
  $24 = (($23) + 4)|0;
  $25 = $2;
  $26 = (($25) + ($24<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $3;
  $29 = (($28) + 3)|0;
  $30 = $2;
  $31 = (($30) + ($29<<1)|0);
  HEAP16[$31>>1] = $27;
  $32 = $4;
  $33 = $3;
  $34 = (($33) + 4)|0;
  $35 = $2;
  $36 = (($35) + ($34<<1)|0);
  HEAP16[$36>>1] = $32;
  break;
 }
 case 6: case 5: case 4: case 3: case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $37 = $2;
 $38 = $3;
 $39 = (($38) + 3)|0;
 $40 = $2;
 $41 = (($40) + ($39<<1)|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 _pattern_reverse_expression($37,$43);
 STACKTOP = sp;return;
}
function _pattern_compile_1($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $13;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($18) + 6)|0;
 $20 = $12;
 $21 = ($19|0)>=($20|0);
 if ($21) {
  $7 = 0;
  $116 = $7;
  STACKTOP = sp;return ($116|0);
 }
 $22 = $13;
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $15 = $24;
 $25 = $13;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($27) + 0)|0;
 $29 = $11;
 $30 = (($29) + ($28<<1)|0);
 HEAP16[$30>>1] = 1;
 $31 = $13;
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + 1)|0;
 $35 = $11;
 $36 = (($35) + ($34<<1)|0);
 HEAP16[$36>>1] = -1;
 $37 = $13;
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (($39) + 3)|0;
 $41 = $40&65535;
 HEAP16[$37>>1] = $41;
 $42 = $13;
 $43 = HEAP16[$42>>1]|0;
 $44 = $15;
 $45 = (($44) + 2)|0;
 $46 = $11;
 $47 = (($46) + ($45<<1)|0);
 HEAP16[$47>>1] = $43;
 $48 = $13;
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = (($50) + 0)|0;
 $52 = $11;
 $53 = (($52) + ($51<<1)|0);
 HEAP16[$53>>1] = -1;
 $54 = $15;
 $55 = $54&65535;
 $56 = $13;
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = (($58) + 1)|0;
 $60 = $11;
 $61 = (($60) + ($59<<1)|0);
 HEAP16[$61>>1] = $55;
 $62 = $13;
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = (($64) + 2)|0;
 $66 = $11;
 $67 = (($66) + ($65<<1)|0);
 HEAP16[$67>>1] = -1;
 while(1) {
  $68 = $10;
  $69 = HEAP32[$68>>2]|0;
  $70 = $9;
  $71 = ($69|0)<($70|0);
  $72 = $13;
  $73 = HEAP16[$72>>1]|0;
  $74 = $73&65535;
  if (!($71)) {
   label = 10;
   break;
  }
  $15 = $74;
  $75 = $8;
  $76 = $9;
  $77 = $10;
  $78 = $11;
  $79 = $12;
  $80 = $13;
  $81 = $14;
  $82 = (_pattern_compile_expression($75,$76,$77,$78,$79,$80,$81)|0);
  $83 = ($82|0)!=(0);
  if (!($83)) {
   label = 6;
   break;
  }
  $84 = $13;
  $85 = HEAP16[$84>>1]|0;
  $86 = $85&65535;
  $87 = (($86) + 3)|0;
  $88 = $12;
  $89 = ($87|0)>=($88|0);
  if ($89) {
   label = 8;
   break;
  }
  $90 = $13;
  $91 = HEAP16[$90>>1]|0;
  $92 = $15;
  $93 = (($92) + 2)|0;
  $94 = $11;
  $95 = (($94) + ($93<<1)|0);
  HEAP16[$95>>1] = $91;
  $96 = $13;
  $97 = HEAP16[$96>>1]|0;
  $98 = $97&65535;
  $99 = (($98) + 0)|0;
  $100 = $11;
  $101 = (($100) + ($99<<1)|0);
  HEAP16[$101>>1] = -1;
  $102 = $15;
  $103 = $102&65535;
  $104 = $13;
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = (($106) + 1)|0;
  $108 = $11;
  $109 = (($108) + ($107<<1)|0);
  HEAP16[$109>>1] = $103;
  $110 = $13;
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = (($112) + 2)|0;
  $114 = $11;
  $115 = (($114) + ($113<<1)|0);
  HEAP16[$115>>1] = -1;
 }
 if ((label|0) == 6) {
  $7 = 0;
  $116 = $7;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 8) {
  $7 = 0;
  $116 = $7;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 10) {
  $7 = $74;
  $116 = $7;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _pattern_compile_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $13 = $6;
  $14 = (($13) + 0)|0;
  $15 = $5;
  $16 = (($15) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)!=(65535);
  if (!($19)) {
   label = 16;
   break;
  }
  $20 = $6;
  $21 = (($20) + 0)|0;
  $22 = $5;
  $23 = (($22) + ($21<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($25|0)==(2);
  if ($26) {
   label = 5;
  } else {
   $27 = $6;
   $28 = (($27) + 0)|0;
   $29 = $5;
   $30 = (($29) + ($28<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = ($32|0)==(3);
   if ($33) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $34 = $5;
   $35 = $6;
   $36 = (($35) + 3)|0;
   $37 = $5;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&65535;
   $41 = $7;
   $42 = $8;
   $43 = (_pattern_compile_2($34,$40,$41,$42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    label = 6;
    break;
   }
  }
  $45 = $6;
  $46 = (($45) + 0)|0;
  $47 = $5;
  $48 = (($47) + ($46<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($50|0)==(5);
  if ($51) {
   label = 10;
  } else {
   $52 = $6;
   $53 = (($52) + 0)|0;
   $54 = $5;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = ($57|0)==(4);
   if ($58) {
    label = 10;
   } else {
    $59 = $6;
    $60 = (($59) + 0)|0;
    $61 = $5;
    $62 = (($61) + ($60<<1)|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = ($64|0)==(6);
    if ($65) {
     label = 10;
    }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $66 = $8;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = (($68) + 6)|0;
   $70 = $7;
   $71 = ($69|0)>=($70|0);
   if ($71) {
    label = 11;
    break;
   }
   $72 = $6;
   $73 = (($72) + 1)|0;
   $74 = $5;
   $75 = (($74) + ($73<<1)|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   $12 = $77;
   $78 = $12;
   $79 = (($78) + 0)|0;
   $80 = $5;
   $81 = (($80) + ($79<<1)|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = ($83|0)==(1);
   if ($84) {
    label = 13;
    break;
   }
   $85 = $12;
   $86 = (($85) + 1)|0;
   $87 = $5;
   $88 = (($87) + ($86<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $11 = $90;
   $91 = $8;
   $92 = HEAP16[$91>>1]|0;
   $93 = $92&65535;
   $9 = $93;
   $94 = $9;
   $95 = (($94) + 0)|0;
   $96 = $5;
   $97 = (($96) + ($95<<1)|0);
   HEAP16[$97>>1] = 1;
   $98 = $9;
   $99 = (($98) + 1)|0;
   $100 = $5;
   $101 = (($100) + ($99<<1)|0);
   HEAP16[$101>>1] = -1;
   $102 = $12;
   $103 = $102&65535;
   $104 = $9;
   $105 = (($104) + 2)|0;
   $106 = $5;
   $107 = (($106) + ($105<<1)|0);
   HEAP16[$107>>1] = $103;
   $108 = $8;
   $109 = HEAP16[$108>>1]|0;
   $110 = $109&65535;
   $111 = (($110) + 3)|0;
   $112 = $111&65535;
   HEAP16[$108>>1] = $112;
   $113 = $8;
   $114 = HEAP16[$113>>1]|0;
   $115 = $114&65535;
   $10 = $115;
   $116 = $10;
   $117 = (($116) + 0)|0;
   $118 = $5;
   $119 = (($118) + ($117<<1)|0);
   HEAP16[$119>>1] = -1;
   $120 = $12;
   $121 = $120&65535;
   $122 = $10;
   $123 = (($122) + 1)|0;
   $124 = $5;
   $125 = (($124) + ($123<<1)|0);
   HEAP16[$125>>1] = $121;
   $126 = $6;
   $127 = $126&65535;
   $128 = $10;
   $129 = (($128) + 2)|0;
   $130 = $5;
   $131 = (($130) + ($129<<1)|0);
   HEAP16[$131>>1] = $127;
   $132 = $8;
   $133 = HEAP16[$132>>1]|0;
   $134 = $133&65535;
   $135 = (($134) + 3)|0;
   $136 = $135&65535;
   HEAP16[$132>>1] = $136;
   $137 = $9;
   $138 = $137&65535;
   $139 = $6;
   $140 = (($139) + 3)|0;
   $141 = $5;
   $142 = (($141) + ($140<<1)|0);
   HEAP16[$142>>1] = $138;
   $143 = $6;
   $144 = $143&65535;
   $145 = $11;
   $146 = (($145) + 2)|0;
   $147 = $5;
   $148 = (($147) + ($146<<1)|0);
   HEAP16[$148>>1] = $144;
   $149 = $11;
   $150 = $149&65535;
   $151 = $6;
   $152 = (($151) + 1)|0;
   $153 = $5;
   $154 = (($153) + ($152<<1)|0);
   HEAP16[$154>>1] = $150;
   $155 = $9;
   $156 = $155&65535;
   $157 = $12;
   $158 = (($157) + 1)|0;
   $159 = $5;
   $160 = (($159) + ($158<<1)|0);
   HEAP16[$160>>1] = $156;
   $161 = $10;
   $162 = $161&65535;
   $163 = $12;
   $164 = (($163) + 2)|0;
   $165 = $5;
   $166 = (($165) + ($164<<1)|0);
   HEAP16[$166>>1] = $162;
  }
  $167 = $6;
  $168 = (($167) + 2)|0;
  $169 = $5;
  $170 = (($169) + ($168<<1)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171&65535;
  $6 = $172;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 11) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 13) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 16) {
  $4 = 1;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 return (0)|0;
}
function _pattern_compile_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $14 = $6;
  $15 = (($14) + 0)|0;
  $16 = $5;
  $17 = (($16) + ($15<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)!=(65535);
  if (!($20)) {
   label = 29;
   break;
  }
  $21 = $6;
  $22 = (($21) + 0)|0;
  $23 = $5;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)==(2);
  if ($27) {
   label = 8;
  } else {
   $28 = $6;
   $29 = (($28) + 0)|0;
   $30 = $5;
   $31 = (($30) + ($29<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $34 = ($33|0)==(3);
   if ($34) {
    label = 8;
   } else {
    $35 = $6;
    $36 = (($35) + 0)|0;
    $37 = $5;
    $38 = (($37) + ($36<<1)|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = $39&65535;
    $41 = ($40|0)==(6);
    if ($41) {
     label = 8;
    } else {
     $42 = $6;
     $43 = (($42) + 0)|0;
     $44 = $5;
     $45 = (($44) + ($43<<1)|0);
     $46 = HEAP16[$45>>1]|0;
     $47 = $46&65535;
     $48 = ($47|0)==(5);
     if ($48) {
      label = 8;
     } else {
      $49 = $6;
      $50 = (($49) + 0)|0;
      $51 = $5;
      $52 = (($51) + ($50<<1)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = $53&65535;
      $55 = ($54|0)==(4);
      if ($55) {
       label = 8;
      }
     }
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $56 = $5;
   $57 = $6;
   $58 = (($57) + 3)|0;
   $59 = $5;
   $60 = (($59) + ($58<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = $7;
   $64 = $8;
   $65 = (_pattern_compile_3($56,$62,$63,$64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    label = 9;
    break;
   }
  }
  $67 = $6;
  $68 = (($67) + 0)|0;
  $69 = $5;
  $70 = (($69) + ($68<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = ($72|0)==(7);
  if ($73) {
   $74 = $8;
   $75 = HEAP16[$74>>1]|0;
   $76 = $75&65535;
   $77 = (($76) + 12)|0;
   $78 = $7;
   $79 = ($77|0)>=($78|0);
   if ($79) {
    label = 12;
    break;
   }
   $80 = $6;
   $81 = (($80) + 1)|0;
   $82 = $5;
   $83 = (($82) + ($81<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84&65535;
   $9 = $85;
   $86 = $9;
   $87 = (($86) + 0)|0;
   $88 = $5;
   $89 = (($88) + ($87<<1)|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90&65535;
   $92 = ($91|0)==(1);
   if ($92) {
    label = 14;
    break;
   }
   $93 = $9;
   $13 = $93;
   while(1) {
    $94 = $9;
    $95 = (($94) + 0)|0;
    $96 = $5;
    $97 = (($96) + ($95<<1)|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = ($99|0)!=(1);
    $101 = $9;
    if (!($100)) {
     break;
    }
    $102 = (($101) + 1)|0;
    $103 = $5;
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&65535;
    $9 = $106;
   }
   $107 = (($101) + 2)|0;
   $108 = $5;
   $109 = (($108) + ($107<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $12 = $111;
   $112 = $8;
   $113 = HEAP16[$112>>1]|0;
   $114 = $113&65535;
   $10 = $114;
   $115 = $10;
   $116 = (($115) + 0)|0;
   $117 = $5;
   $118 = (($117) + ($116<<1)|0);
   HEAP16[$118>>1] = 1;
   $119 = $10;
   $120 = (($119) + 1)|0;
   $121 = $5;
   $122 = (($121) + ($120<<1)|0);
   HEAP16[$122>>1] = -1;
   $123 = $12;
   $124 = $123&65535;
   $125 = $10;
   $126 = (($125) + 2)|0;
   $127 = $5;
   $128 = (($127) + ($126<<1)|0);
   HEAP16[$128>>1] = $124;
   $129 = $8;
   $130 = HEAP16[$129>>1]|0;
   $131 = $130&65535;
   $132 = (($131) + 3)|0;
   $133 = $132&65535;
   HEAP16[$129>>1] = $133;
   $134 = $8;
   $135 = HEAP16[$134>>1]|0;
   $136 = $135&65535;
   $11 = $136;
   $137 = $11;
   $138 = (($137) + 0)|0;
   $139 = $5;
   $140 = (($139) + ($138<<1)|0);
   HEAP16[$140>>1] = -1;
   $141 = $13;
   $142 = $141&65535;
   $143 = $11;
   $144 = (($143) + 1)|0;
   $145 = $5;
   $146 = (($145) + ($144<<1)|0);
   HEAP16[$146>>1] = $142;
   $147 = $6;
   $148 = $147&65535;
   $149 = $11;
   $150 = (($149) + 2)|0;
   $151 = $5;
   $152 = (($151) + ($150<<1)|0);
   HEAP16[$152>>1] = $148;
   $153 = $8;
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = (($155) + 3)|0;
   $157 = $156&65535;
   HEAP16[$153>>1] = $157;
   $158 = $10;
   $159 = $158&65535;
   $160 = $6;
   $161 = (($160) + 3)|0;
   $162 = $5;
   $163 = (($162) + ($161<<1)|0);
   HEAP16[$163>>1] = $159;
   $164 = $6;
   $165 = $164&65535;
   $166 = $9;
   $167 = (($166) + 2)|0;
   $168 = $5;
   $169 = (($168) + ($167<<1)|0);
   HEAP16[$169>>1] = $165;
   $170 = $9;
   $171 = $170&65535;
   $172 = $6;
   $173 = (($172) + 1)|0;
   $174 = $5;
   $175 = (($174) + ($173<<1)|0);
   HEAP16[$175>>1] = $171;
   $176 = $10;
   $177 = $176&65535;
   $178 = $12;
   $179 = (($178) + 1)|0;
   $180 = $5;
   $181 = (($180) + ($179<<1)|0);
   HEAP16[$181>>1] = $177;
   $182 = $11;
   $183 = $182&65535;
   $184 = $13;
   $185 = (($184) + 2)|0;
   $186 = $5;
   $187 = (($186) + ($185<<1)|0);
   HEAP16[$187>>1] = $183;
   $188 = $6;
   $189 = (($188) + 2)|0;
   $190 = $5;
   $191 = (($190) + ($189<<1)|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192&65535;
   $9 = $193;
   $194 = $9;
   $195 = (($194) + 0)|0;
   $196 = $5;
   $197 = (($196) + ($195<<1)|0);
   $198 = HEAP16[$197>>1]|0;
   $199 = $198&65535;
   $200 = ($199|0)==(65535);
   if ($200) {
    label = 20;
    break;
   }
   $201 = $9;
   $202 = (($201) + 0)|0;
   $203 = $5;
   $204 = (($203) + ($202<<1)|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205&65535;
   $207 = ($206|0)==(7);
   if ($207) {
    label = 20;
    break;
   }
   $208 = $9;
   $12 = $208;
   while(1) {
    $209 = $9;
    $210 = (($209) + 0)|0;
    $211 = $5;
    $212 = (($211) + ($210<<1)|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $215 = ($214|0)!=(65535);
    if ($215) {
     $216 = $9;
     $217 = (($216) + 0)|0;
     $218 = $5;
     $219 = (($218) + ($217<<1)|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = ($221|0)!=(7);
     $328 = $222;
    } else {
     $328 = 0;
    }
    $223 = $9;
    if (!($328)) {
     break;
    }
    $224 = (($223) + 2)|0;
    $225 = $5;
    $226 = (($225) + ($224<<1)|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = $227&65535;
    $9 = $228;
   }
   $229 = (($223) + 1)|0;
   $230 = $5;
   $231 = (($230) + ($229<<1)|0);
   $232 = HEAP16[$231>>1]|0;
   $233 = $232&65535;
   $13 = $233;
   $234 = $8;
   $235 = HEAP16[$234>>1]|0;
   $236 = $235&65535;
   $10 = $236;
   $237 = $10;
   $238 = (($237) + 0)|0;
   $239 = $5;
   $240 = (($239) + ($238<<1)|0);
   HEAP16[$240>>1] = 1;
   $241 = $10;
   $242 = (($241) + 1)|0;
   $243 = $5;
   $244 = (($243) + ($242<<1)|0);
   HEAP16[$244>>1] = -1;
   $245 = $12;
   $246 = $245&65535;
   $247 = $10;
   $248 = (($247) + 2)|0;
   $249 = $5;
   $250 = (($249) + ($248<<1)|0);
   HEAP16[$250>>1] = $246;
   $251 = $8;
   $252 = HEAP16[$251>>1]|0;
   $253 = $252&65535;
   $254 = (($253) + 3)|0;
   $255 = $254&65535;
   HEAP16[$251>>1] = $255;
   $256 = $8;
   $257 = HEAP16[$256>>1]|0;
   $258 = $257&65535;
   $11 = $258;
   $259 = $11;
   $260 = (($259) + 0)|0;
   $261 = $5;
   $262 = (($261) + ($260<<1)|0);
   HEAP16[$262>>1] = -1;
   $263 = $13;
   $264 = $263&65535;
   $265 = $11;
   $266 = (($265) + 1)|0;
   $267 = $5;
   $268 = (($267) + ($266<<1)|0);
   HEAP16[$268>>1] = $264;
   $269 = $6;
   $270 = $269&65535;
   $271 = $11;
   $272 = (($271) + 2)|0;
   $273 = $5;
   $274 = (($273) + ($272<<1)|0);
   HEAP16[$274>>1] = $270;
   $275 = $8;
   $276 = HEAP16[$275>>1]|0;
   $277 = $276&65535;
   $278 = (($277) + 3)|0;
   $279 = $278&65535;
   HEAP16[$275>>1] = $279;
   $280 = $10;
   $281 = $280&65535;
   $282 = $6;
   $283 = (($282) + 4)|0;
   $284 = $5;
   $285 = (($284) + ($283<<1)|0);
   HEAP16[$285>>1] = $281;
   $286 = $6;
   $287 = $286&65535;
   $288 = $9;
   $289 = (($288) + 1)|0;
   $290 = $5;
   $291 = (($290) + ($289<<1)|0);
   HEAP16[$291>>1] = $287;
   $292 = $9;
   $293 = $292&65535;
   $294 = $6;
   $295 = (($294) + 2)|0;
   $296 = $5;
   $297 = (($296) + ($295<<1)|0);
   HEAP16[$297>>1] = $293;
   $298 = $10;
   $299 = $298&65535;
   $300 = $12;
   $301 = (($300) + 1)|0;
   $302 = $5;
   $303 = (($302) + ($301<<1)|0);
   HEAP16[$303>>1] = $299;
   $304 = $11;
   $305 = $304&65535;
   $306 = $13;
   $307 = (($306) + 2)|0;
   $308 = $5;
   $309 = (($308) + ($307<<1)|0);
   HEAP16[$309>>1] = $305;
   $310 = $5;
   $311 = $6;
   $312 = (($311) + 4)|0;
   $313 = $5;
   $314 = (($313) + ($312<<1)|0);
   $315 = HEAP16[$314>>1]|0;
   $316 = $315&65535;
   $317 = $7;
   $318 = $8;
   $319 = (_pattern_compile_3($310,$316,$317,$318)|0);
   $320 = ($319|0)!=(0);
   if (!($320)) {
    label = 27;
    break;
   }
  }
  $321 = $6;
  $322 = (($321) + 2)|0;
  $323 = $5;
  $324 = (($323) + ($322<<1)|0);
  $325 = HEAP16[$324>>1]|0;
  $326 = $325&65535;
  $6 = $326;
 }
 if ((label|0) == 9) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 12) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 14) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 20) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 27) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 29) {
  $4 = 1;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 return (0)|0;
}
function _pattern_compile_expression($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $27 = $10;
 $28 = HEAP32[$27>>2]|0;
 $29 = $8;
 $30 = (($29) + ($28<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 do {
  switch ($32|0) {
  case 40:  {
   $33 = $13;
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = (($35) + 10)|0;
   $37 = $12;
   $38 = ($36|0)>=($37|0);
   if ($38) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $39 = $10;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$39>>2] = $41;
   $42 = $10;
   $43 = HEAP32[$42>>2]|0;
   $44 = $9;
   $45 = ($43|0)>=($44|0);
   if ($45) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $24 = 0;
   $25 = 0;
   $46 = $10;
   $47 = HEAP32[$46>>2]|0;
   $20 = $47;
   while(1) {
    $48 = $20;
    $49 = $9;
    $50 = ($48|0)<($49|0);
    if (!($50)) {
     break;
    }
    $51 = $20;
    $52 = $8;
    $53 = (($52) + ($51<<1)|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54&65535;
    $56 = ($55|0)!=(92);
    $57 = $24;
    $58 = ($57|0)!=(0);
    $or$cond = $56 | $58;
    if ($or$cond) {
     $59 = $20;
     $60 = $8;
     $61 = (($60) + ($59<<1)|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62&65535;
     $64 = ($63|0)!=(40);
     $65 = $24;
     $66 = ($65|0)!=(0);
     $or$cond3 = $64 | $66;
     if ($or$cond3) {
      $69 = $20;
      $70 = $8;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72&65535;
      $74 = ($73|0)!=(41);
      $75 = $24;
      $76 = ($75|0)!=(0);
      $or$cond5 = $74 | $76;
      if (!($or$cond5)) {
       $77 = $25;
       $78 = ($77|0)!=(0);
       if (!($78)) {
        break;
       }
       $79 = $25;
       $80 = (($79) + -1)|0;
       $25 = $80;
      }
     } else {
      $67 = $25;
      $68 = (($67) + 1)|0;
      $25 = $68;
     }
     $24 = 0;
    } else {
     $24 = 1;
    }
    $81 = $20;
    $82 = (($81) + 1)|0;
    $20 = $82;
   }
   $83 = $20;
   $84 = $9;
   $85 = ($83|0)>=($84|0);
   if ($85) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $86 = $13;
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   $89 = (($88) + 0)|0;
   $90 = $11;
   $91 = (($90) + ($89<<1)|0);
   HEAP16[$91>>1] = 2;
   $92 = $13;
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   $19 = $94;
   $95 = $13;
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = (($97) + 4)|0;
   $99 = $98&65535;
   HEAP16[$95>>1] = $99;
   $100 = $13;
   $101 = HEAP16[$100>>1]|0;
   $102 = $19;
   $103 = (($102) + 3)|0;
   $104 = $11;
   $105 = (($104) + ($103<<1)|0);
   HEAP16[$105>>1] = $101;
   $106 = $13;
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $18 = $108;
   $109 = $18;
   $110 = (($109) + 0)|0;
   $111 = $11;
   $112 = (($111) + ($110<<1)|0);
   HEAP16[$112>>1] = 0;
   $113 = $18;
   $114 = (($113) + 1)|0;
   $115 = $11;
   $116 = (($115) + ($114<<1)|0);
   HEAP16[$116>>1] = -1;
   $117 = $18;
   $118 = (($117) + 2)|0;
   $119 = $11;
   $120 = (($119) + ($118<<1)|0);
   HEAP16[$120>>1] = -1;
   $121 = $8;
   $122 = $20;
   $123 = $10;
   $124 = $11;
   $125 = $12;
   $126 = $13;
   $127 = $14;
   $128 = (_pattern_compile_1($121,$122,$123,$124,$125,$126,$127)|0);
   $129 = ($128|0)!=(0);
   if ($129) {
    $130 = $10;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + 1)|0;
    HEAP32[$130>>2] = $132;
    $133 = $13;
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $17 = $135;
    $136 = $19;
    $137 = $136&65535;
    $138 = $17;
    $139 = (($138) + 2)|0;
    $140 = $11;
    $141 = (($140) + ($139<<1)|0);
    HEAP16[$141>>1] = $137;
    $142 = $13;
    $143 = HEAP16[$142>>1]|0;
    $144 = $143&65535;
    $145 = (($144) + 3)|0;
    $146 = $145&65535;
    HEAP16[$142>>1] = $146;
    $147 = $146&65535;
    $7 = $147;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 33:  {
   $148 = $13;
   $149 = HEAP16[$148>>1]|0;
   $150 = $149&65535;
   $151 = (($150) + 10)|0;
   $152 = $12;
   $153 = ($151|0)>=($152|0);
   if ($153) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $154 = $10;
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + 1)|0;
   HEAP32[$154>>2] = $156;
   $157 = $13;
   $158 = HEAP16[$157>>1]|0;
   $159 = $158&65535;
   $160 = (($159) + 0)|0;
   $161 = $11;
   $162 = (($161) + ($160<<1)|0);
   HEAP16[$162>>1] = 3;
   $163 = $13;
   $164 = HEAP16[$163>>1]|0;
   $165 = $164&65535;
   $19 = $165;
   $166 = $13;
   $167 = HEAP16[$166>>1]|0;
   $168 = $167&65535;
   $169 = (($168) + 4)|0;
   $170 = $169&65535;
   HEAP16[$166>>1] = $170;
   $171 = $13;
   $172 = HEAP16[$171>>1]|0;
   $173 = $19;
   $174 = (($173) + 3)|0;
   $175 = $11;
   $176 = (($175) + ($174<<1)|0);
   HEAP16[$176>>1] = $172;
   $177 = $13;
   $178 = HEAP16[$177>>1]|0;
   $179 = $178&65535;
   $16 = $179;
   $180 = $16;
   $181 = (($180) + 0)|0;
   $182 = $11;
   $183 = (($182) + ($181<<1)|0);
   HEAP16[$183>>1] = 1;
   $184 = $16;
   $185 = (($184) + 1)|0;
   $186 = $11;
   $187 = (($186) + ($185<<1)|0);
   HEAP16[$187>>1] = -1;
   $188 = $13;
   $189 = HEAP16[$188>>1]|0;
   $190 = $189&65535;
   $191 = (($190) + 3)|0;
   $192 = $191&65535;
   HEAP16[$188>>1] = $192;
   $193 = $13;
   $194 = HEAP16[$193>>1]|0;
   $195 = $16;
   $196 = (($195) + 2)|0;
   $197 = $11;
   $198 = (($197) + ($196<<1)|0);
   HEAP16[$198>>1] = $194;
   $199 = $13;
   $200 = HEAP16[$199>>1]|0;
   $201 = $200&65535;
   $18 = $201;
   $202 = $18;
   $203 = (($202) + 0)|0;
   $204 = $11;
   $205 = (($204) + ($203<<1)|0);
   HEAP16[$205>>1] = 0;
   $206 = $16;
   $207 = $206&65535;
   $208 = $18;
   $209 = (($208) + 1)|0;
   $210 = $11;
   $211 = (($210) + ($209<<1)|0);
   HEAP16[$211>>1] = $207;
   $212 = $18;
   $213 = (($212) + 2)|0;
   $214 = $11;
   $215 = (($214) + ($213<<1)|0);
   HEAP16[$215>>1] = -1;
   $216 = $8;
   $217 = $9;
   $218 = $10;
   $219 = $11;
   $220 = $12;
   $221 = $13;
   $222 = $14;
   $223 = (_pattern_compile_expression($216,$217,$218,$219,$220,$221,$222)|0);
   $224 = ($223|0)!=(0);
   if (!($224)) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $225 = $13;
   $226 = HEAP16[$225>>1]|0;
   $227 = $226&65535;
   $228 = (($227) + 3)|0;
   $229 = $12;
   $230 = ($228|0)>=($229|0);
   if ($230) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $231 = $13;
    $232 = HEAP16[$231>>1]|0;
    $233 = $18;
    $234 = (($233) + 2)|0;
    $235 = $11;
    $236 = (($235) + ($234<<1)|0);
    HEAP16[$236>>1] = $232;
    $237 = $13;
    $238 = HEAP16[$237>>1]|0;
    $239 = $238&65535;
    $17 = $239;
    $240 = $17;
    $241 = (($240) + 0)|0;
    $242 = $11;
    $243 = (($242) + ($241<<1)|0);
    HEAP16[$243>>1] = -1;
    $244 = $18;
    $245 = $244&65535;
    $246 = $17;
    $247 = (($246) + 1)|0;
    $248 = $11;
    $249 = (($248) + ($247<<1)|0);
    HEAP16[$249>>1] = $245;
    $250 = $19;
    $251 = $250&65535;
    $252 = $17;
    $253 = (($252) + 2)|0;
    $254 = $11;
    $255 = (($254) + ($253<<1)|0);
    HEAP16[$255>>1] = $251;
    $256 = $13;
    $257 = HEAP16[$256>>1]|0;
    $258 = $257&65535;
    $259 = (($258) + 3)|0;
    $260 = $259&65535;
    HEAP16[$256>>1] = $260;
    $261 = $260&65535;
    $7 = $261;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 43:  {
   $262 = $13;
   $263 = HEAP16[$262>>1]|0;
   $264 = $263&65535;
   $265 = (($264) + 5)|0;
   $266 = $12;
   $267 = ($265|0)>=($266|0);
   if ($267) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $268 = $13;
    $269 = HEAP16[$268>>1]|0;
    $270 = $269&65535;
    $271 = (($270) + 0)|0;
    $272 = $11;
    $273 = (($272) + ($271<<1)|0);
    HEAP16[$273>>1] = 4;
    $274 = $14;
    $275 = HEAP16[$274>>1]|0;
    $276 = (($275) + 1)<<16>>16;
    HEAP16[$274>>1] = $276;
    $277 = $13;
    $278 = HEAP16[$277>>1]|0;
    $279 = $278&65535;
    $280 = (($279) + 4)|0;
    $281 = $11;
    $282 = (($281) + ($280<<1)|0);
    HEAP16[$282>>1] = $275;
    $283 = $10;
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + 1)|0;
    HEAP32[$283>>2] = $285;
    $286 = $13;
    $287 = HEAP16[$286>>1]|0;
    $288 = $287&65535;
    $289 = (($288) + 5)|0;
    $290 = $289&65535;
    HEAP16[$286>>1] = $290;
    $291 = $290&65535;
    $7 = $291;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 42:  {
   $292 = $13;
   $293 = HEAP16[$292>>1]|0;
   $294 = $293&65535;
   $295 = (($294) + 5)|0;
   $296 = $12;
   $297 = ($295|0)>=($296|0);
   if ($297) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $298 = $13;
    $299 = HEAP16[$298>>1]|0;
    $300 = $299&65535;
    $301 = (($300) + 0)|0;
    $302 = $11;
    $303 = (($302) + ($301<<1)|0);
    HEAP16[$303>>1] = 5;
    $304 = $14;
    $305 = HEAP16[$304>>1]|0;
    $306 = (($305) + 1)<<16>>16;
    HEAP16[$304>>1] = $306;
    $307 = $13;
    $308 = HEAP16[$307>>1]|0;
    $309 = $308&65535;
    $310 = (($309) + 4)|0;
    $311 = $11;
    $312 = (($311) + ($310<<1)|0);
    HEAP16[$312>>1] = $305;
    $313 = $10;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($314) + 1)|0;
    HEAP32[$313>>2] = $315;
    $316 = $13;
    $317 = HEAP16[$316>>1]|0;
    $318 = $317&65535;
    $319 = (($318) + 5)|0;
    $320 = $319&65535;
    HEAP16[$316>>1] = $320;
    $321 = $320&65535;
    $7 = $321;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 63:  {
   $322 = $13;
   $323 = HEAP16[$322>>1]|0;
   $324 = $323&65535;
   $325 = (($324) + 4)|0;
   $326 = $12;
   $327 = ($325|0)>=($326|0);
   if ($327) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $328 = $13;
    $329 = HEAP16[$328>>1]|0;
    $330 = $329&65535;
    $331 = (($330) + 0)|0;
    $332 = $11;
    $333 = (($332) + ($331<<1)|0);
    HEAP16[$333>>1] = 6;
    $334 = $10;
    $335 = HEAP32[$334>>2]|0;
    $336 = (($335) + 1)|0;
    HEAP32[$334>>2] = $336;
    $337 = $13;
    $338 = HEAP16[$337>>1]|0;
    $339 = $338&65535;
    $340 = (($339) + 4)|0;
    $341 = $340&65535;
    HEAP16[$337>>1] = $341;
    $342 = $341&65535;
    $7 = $342;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 124:  {
   $343 = $13;
   $344 = HEAP16[$343>>1]|0;
   $345 = $344&65535;
   $346 = (($345) + 5)|0;
   $347 = $12;
   $348 = ($346|0)>=($347|0);
   if ($348) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $349 = $13;
    $350 = HEAP16[$349>>1]|0;
    $351 = $350&65535;
    $352 = (($351) + 0)|0;
    $353 = $11;
    $354 = (($353) + ($352<<1)|0);
    HEAP16[$354>>1] = 7;
    $355 = $10;
    $356 = HEAP32[$355>>2]|0;
    $357 = (($356) + 1)|0;
    HEAP32[$355>>2] = $357;
    $358 = $13;
    $359 = HEAP16[$358>>1]|0;
    $360 = $359&65535;
    $361 = (($360) + 5)|0;
    $362 = $361&65535;
    HEAP16[$358>>1] = $362;
    $363 = $362&65535;
    $7 = $363;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 46:  {
   $364 = $13;
   $365 = HEAP16[$364>>1]|0;
   $366 = $365&65535;
   $367 = (($366) + 3)|0;
   $368 = $12;
   $369 = ($367|0)>=($368|0);
   if ($369) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $370 = $13;
    $371 = HEAP16[$370>>1]|0;
    $372 = $371&65535;
    $373 = (($372) + 0)|0;
    $374 = $11;
    $375 = (($374) + ($373<<1)|0);
    HEAP16[$375>>1] = 8;
    $376 = $10;
    $377 = HEAP32[$376>>2]|0;
    $378 = (($377) + 1)|0;
    HEAP32[$376>>2] = $378;
    $379 = $13;
    $380 = HEAP16[$379>>1]|0;
    $381 = $380&65535;
    $382 = (($381) + 3)|0;
    $383 = $382&65535;
    HEAP16[$379>>1] = $383;
    $384 = $383&65535;
    $7 = $384;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 37:  {
   $385 = $13;
   $386 = HEAP16[$385>>1]|0;
   $387 = $386&65535;
   $388 = (($387) + 5)|0;
   $389 = $12;
   $390 = ($388|0)>=($389|0);
   if ($390) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $391 = $10;
   $392 = HEAP32[$391>>2]|0;
   $393 = (($392) + 1)|0;
   HEAP32[$391>>2] = $393;
   $394 = $10;
   $395 = HEAP32[$394>>2]|0;
   $396 = $9;
   $397 = ($395|0)>=($396|0);
   if ($397) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $398 = $10;
   $399 = HEAP32[$398>>2]|0;
   $400 = $8;
   $401 = (($400) + ($399<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402&65535;
   $404 = ($403|0)==(91);
   if ($404) {
    $23 = 1;
    $405 = $10;
    $406 = HEAP32[$405>>2]|0;
    $407 = (($406) + 1)|0;
    HEAP32[$405>>2] = $407;
    $408 = $10;
    $409 = HEAP32[$408>>2]|0;
    $20 = $409;
    while(1) {
     $410 = $20;
     $411 = $9;
     $412 = ($410|0)<($411|0);
     if (!($412)) {
      break;
     }
     $413 = $20;
     $414 = $8;
     $415 = (($414) + ($413<<1)|0);
     $416 = HEAP16[$415>>1]|0;
     $417 = $416&65535;
     $418 = ($417|0)==(93);
     if ($418) {
      break;
     }
     $419 = $20;
     $420 = (($419) + 1)|0;
     $20 = $420;
    }
    $421 = $20;
    $422 = $9;
    $423 = ($421|0)>=($422|0);
    if ($423) {
     $7 = 0;
     $778 = $7;
     STACKTOP = sp;return ($778|0);
    }
   } else {
    $23 = 0;
    $424 = $10;
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + 1)|0;
    $20 = $426;
   }
   $427 = $13;
   $428 = HEAP16[$427>>1]|0;
   $429 = $428&65535;
   $430 = (($429) + 0)|0;
   $431 = $11;
   $432 = (($431) + ($430<<1)|0);
   HEAP16[$432>>1] = 9;
   $22 = 0;
   $21 = 0;
   L98: while(1) {
    $433 = $10;
    $434 = HEAP32[$433>>2]|0;
    $435 = $20;
    $436 = ($434|0)<($435|0);
    if (!($436)) {
     break;
    }
    $437 = $10;
    $438 = HEAP32[$437>>2]|0;
    $439 = $8;
    $440 = (($439) + ($438<<1)|0);
    $441 = HEAP16[$440>>1]|0;
    $442 = $441&65535;
    do {
     switch ($442|0) {
     case 95:  {
      $443 = $21;
      $444 = $443 | 1;
      $21 = $444;
      break;
     }
     case 35:  {
      $445 = $21;
      $446 = $445 | 4;
      $21 = $446;
      break;
     }
     case 97:  {
      $447 = $21;
      $448 = $447 | 2;
      $21 = $448;
      break;
     }
     case 117:  {
      $449 = $21;
      $450 = $449 | 16;
      $21 = $450;
      break;
     }
     case 108:  {
      $451 = $21;
      $452 = $451 | 32;
      $21 = $452;
      break;
     }
     case 46:  {
      $453 = $21;
      $454 = $453 | 8;
      $21 = $454;
      break;
     }
     case 36:  {
      $455 = $21;
      $456 = $455 | 128;
      $21 = $456;
      break;
     }
     case 126:  {
      $457 = $21;
      $458 = $457 | 8192;
      $21 = $458;
      break;
     }
     case 60:  {
      $459 = $21;
      $460 = $459 | 16384;
      $21 = $460;
      break;
     }
     case 62:  {
      $461 = $21;
      $462 = $461 | 32768;
      $21 = $462;
      break;
     }
     case 48:  {
      $463 = $22;
      $464 = $463 | 1;
      $22 = $464;
      break;
     }
     case 49:  {
      $465 = $22;
      $466 = $465 | 2;
      $22 = $466;
      break;
     }
     case 50:  {
      $467 = $22;
      $468 = $467 | 4;
      $22 = $468;
      break;
     }
     case 51:  {
      $469 = $22;
      $470 = $469 | 8;
      $22 = $470;
      break;
     }
     case 52:  {
      $471 = $22;
      $472 = $471 | 16;
      $22 = $472;
      break;
     }
     case 53:  {
      $473 = $22;
      $474 = $473 | 32;
      $22 = $474;
      break;
     }
     case 54:  {
      $475 = $22;
      $476 = $475 | 64;
      $22 = $476;
      break;
     }
     case 55:  {
      $477 = $22;
      $478 = $477 | 128;
      $22 = $478;
      break;
     }
     case 94:  {
      $479 = $22;
      $480 = $479 | 4096;
      $22 = $480;
      break;
     }
     default: {
      label = 78;
      break L98;
     }
     }
    } while(0);
    $481 = $10;
    $482 = HEAP32[$481>>2]|0;
    $483 = (($482) + 1)|0;
    HEAP32[$481>>2] = $483;
   }
   if ((label|0) == 78) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $484 = $22;
   $485 = $484&65535;
   $486 = $13;
   $487 = HEAP16[$486>>1]|0;
   $488 = $487&65535;
   $489 = (($488) + 3)|0;
   $490 = $11;
   $491 = (($490) + ($489<<1)|0);
   HEAP16[$491>>1] = $485;
   $492 = $21;
   $493 = $492&65535;
   $494 = $13;
   $495 = HEAP16[$494>>1]|0;
   $496 = $495&65535;
   $497 = (($496) + 4)|0;
   $498 = $11;
   $499 = (($498) + ($497<<1)|0);
   HEAP16[$499>>1] = $493;
   $500 = $23;
   $501 = ($500|0)!=(0);
   if ($501) {
    $502 = $10;
    $503 = HEAP32[$502>>2]|0;
    $504 = (($503) + 1)|0;
    HEAP32[$502>>2] = $504;
   }
   $505 = $13;
   $506 = HEAP16[$505>>1]|0;
   $507 = $506&65535;
   $508 = (($507) + 5)|0;
   $509 = $508&65535;
   HEAP16[$505>>1] = $509;
   $510 = $509&65535;
   $7 = $510;
   $778 = $7;
   STACKTOP = sp;return ($778|0);
   break;
  }
  case 91:  {
   $511 = $10;
   $512 = HEAP32[$511>>2]|0;
   $513 = (($512) + 1)|0;
   HEAP32[$511>>2] = $513;
   $514 = $10;
   $515 = HEAP32[$514>>2]|0;
   $516 = $9;
   $517 = ($515|0)>=($516|0);
   if ($517) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $24 = 0;
   $518 = $10;
   $519 = HEAP32[$518>>2]|0;
   $20 = $519;
   while(1) {
    $520 = $20;
    $521 = $9;
    $522 = ($520|0)<($521|0);
    if (!($522)) {
     break;
    }
    $523 = $20;
    $524 = $8;
    $525 = (($524) + ($523<<1)|0);
    $526 = HEAP16[$525>>1]|0;
    $527 = $526&65535;
    $528 = ($527|0)!=(92);
    $529 = $24;
    $530 = ($529|0)!=(0);
    $or$cond7 = $528 | $530;
    if ($or$cond7) {
     $531 = $20;
     $532 = $8;
     $533 = (($532) + ($531<<1)|0);
     $534 = HEAP16[$533>>1]|0;
     $535 = $534&65535;
     $536 = ($535|0)!=(93);
     $537 = $24;
     $538 = ($537|0)!=(0);
     $or$cond9 = $536 | $538;
     if (!($or$cond9)) {
      break;
     }
     $24 = 0;
    } else {
     $24 = 1;
    }
    $539 = $20;
    $540 = (($539) + 1)|0;
    $20 = $540;
   }
   $541 = $20;
   $542 = $9;
   $543 = ($541|0)>=($542|0);
   if ($543) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $544 = $13;
   $545 = HEAP16[$544>>1]|0;
   $546 = $545&65535;
   $547 = (($546) + 4)|0;
   $548 = $20;
   $549 = $10;
   $550 = HEAP32[$549>>2]|0;
   $551 = (($548) - ($550))|0;
   $552 = (($547) + ($551))|0;
   $553 = $12;
   $554 = ($552|0)>=($553|0);
   if ($554) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $555 = $13;
   $556 = HEAP16[$555>>1]|0;
   $557 = $556&65535;
   $558 = (($557) + 0)|0;
   $559 = $11;
   $560 = (($559) + ($558<<1)|0);
   HEAP16[$560>>1] = 10;
   $24 = 0;
   $561 = $13;
   $562 = HEAP16[$561>>1]|0;
   $563 = $562&65535;
   $564 = (($563) + 3)|0;
   $565 = $11;
   $566 = (($565) + ($564<<1)|0);
   $15 = $566;
   $26 = 1;
   while(1) {
    $567 = $10;
    $568 = HEAP32[$567>>2]|0;
    $569 = $20;
    $570 = ($568|0)<($569|0);
    if (!($570)) {
     break;
    }
    $571 = $10;
    $572 = HEAP32[$571>>2]|0;
    $573 = $8;
    $574 = (($573) + ($572<<1)|0);
    $575 = HEAP16[$574>>1]|0;
    $576 = $575&65535;
    $577 = ($576|0)!=(92);
    $578 = $24;
    $579 = ($578|0)!=(0);
    $or$cond11 = $577 | $579;
    if ($or$cond11) {
     $24 = 0;
     $580 = $10;
     $581 = HEAP32[$580>>2]|0;
     $582 = $8;
     $583 = (($582) + ($581<<1)|0);
     $584 = HEAP16[$583>>1]|0;
     $585 = $26;
     $586 = (($585) + 1)|0;
     $26 = $586;
     $587 = $15;
     $588 = (($587) + ($585<<1)|0);
     HEAP16[$588>>1] = $584;
    } else {
     $24 = 1;
    }
    $589 = $10;
    $590 = HEAP32[$589>>2]|0;
    $591 = (($590) + 1)|0;
    HEAP32[$589>>2] = $591;
   }
   $592 = $26;
   $593 = (($592) - 1)|0;
   $594 = $593&65535;
   $595 = $15;
   HEAP16[$595>>1] = $594;
   $596 = $10;
   $597 = HEAP32[$596>>2]|0;
   $598 = (($597) + 1)|0;
   HEAP32[$596>>2] = $598;
   $599 = $15;
   $600 = HEAP16[$599>>1]|0;
   $601 = $600&65535;
   $602 = (4 + ($601))|0;
   $603 = $13;
   $604 = HEAP16[$603>>1]|0;
   $605 = $604&65535;
   $606 = (($605) + ($602))|0;
   $607 = $606&65535;
   HEAP16[$603>>1] = $607;
   $608 = $607&65535;
   $7 = $608;
   $778 = $7;
   STACKTOP = sp;return ($778|0);
   break;
  }
  case 64:  {
   $609 = $10;
   $610 = HEAP32[$609>>2]|0;
   $611 = (($610) + 1)|0;
   HEAP32[$609>>2] = $611;
   $612 = $10;
   $613 = HEAP32[$612>>2]|0;
   $614 = $9;
   $615 = ($613|0)>=($614|0);
   if ($615) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $616 = $10;
   $617 = HEAP32[$616>>2]|0;
   $618 = $8;
   $619 = (($618) + ($617<<1)|0);
   $620 = HEAP16[$619>>1]|0;
   $621 = $620&65535;
   $622 = ($621|0)==(91);
   if ($622) {
    $23 = 1;
    $623 = $10;
    $624 = HEAP32[$623>>2]|0;
    $625 = (($624) + 1)|0;
    HEAP32[$623>>2] = $625;
    $626 = $10;
    $627 = HEAP32[$626>>2]|0;
    $20 = $627;
    while(1) {
     $628 = $20;
     $629 = $9;
     $630 = ($628|0)<($629|0);
     if (!($630)) {
      break;
     }
     $631 = $20;
     $632 = $8;
     $633 = (($632) + ($631<<1)|0);
     $634 = HEAP16[$633>>1]|0;
     $635 = $634&65535;
     $636 = ($635|0)==(93);
     if ($636) {
      break;
     }
     $637 = $20;
     $638 = (($637) + 1)|0;
     $20 = $638;
    }
    $639 = $20;
    $640 = $9;
    $641 = ($639|0)>=($640|0);
    if ($641) {
     $7 = 0;
     $778 = $7;
     STACKTOP = sp;return ($778|0);
    }
   } else {
    $23 = 0;
    $642 = $10;
    $643 = HEAP32[$642>>2]|0;
    $644 = (($643) + 1)|0;
    $20 = $644;
   }
   $645 = $13;
   $646 = HEAP16[$645>>1]|0;
   $647 = $646&65535;
   $648 = (($647) + 4)|0;
   $649 = $20;
   $650 = $10;
   $651 = HEAP32[$650>>2]|0;
   $652 = (($649) - ($651))|0;
   $653 = (($648) + ($652))|0;
   $654 = $12;
   $655 = ($653|0)>=($654|0);
   if ($655) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   $656 = $13;
   $657 = HEAP16[$656>>1]|0;
   $658 = $657&65535;
   $659 = (($658) + 0)|0;
   $660 = $11;
   $661 = (($660) + ($659<<1)|0);
   HEAP16[$661>>1] = 11;
   $24 = 0;
   $662 = $13;
   $663 = HEAP16[$662>>1]|0;
   $664 = $663&65535;
   $665 = (($664) + 3)|0;
   $666 = $11;
   $667 = (($666) + ($665<<1)|0);
   $15 = $667;
   $26 = 1;
   while(1) {
    $668 = $10;
    $669 = HEAP32[$668>>2]|0;
    $670 = $20;
    $671 = ($669|0)<($670|0);
    if (!($671)) {
     break;
    }
    $672 = $10;
    $673 = HEAP32[$672>>2]|0;
    $674 = $8;
    $675 = (($674) + ($673<<1)|0);
    $676 = HEAP16[$675>>1]|0;
    $677 = $676&65535;
    $678 = ($677|0)!=(92);
    $679 = $24;
    $680 = ($679|0)!=(0);
    $or$cond13 = $678 | $680;
    if ($or$cond13) {
     $24 = 0;
     $681 = $10;
     $682 = HEAP32[$681>>2]|0;
     $683 = $8;
     $684 = (($683) + ($682<<1)|0);
     $685 = HEAP16[$684>>1]|0;
     $686 = $26;
     $687 = (($686) + 1)|0;
     $26 = $687;
     $688 = $15;
     $689 = (($688) + ($686<<1)|0);
     HEAP16[$689>>1] = $685;
    } else {
     $24 = 1;
    }
    $690 = $10;
    $691 = HEAP32[$690>>2]|0;
    $692 = (($691) + 1)|0;
    HEAP32[$690>>2] = $692;
   }
   $693 = $26;
   $694 = (($693) - 1)|0;
   $695 = $694&65535;
   $696 = $15;
   HEAP16[$696>>1] = $695;
   $697 = $23;
   $698 = ($697|0)!=(0);
   if ($698) {
    $699 = $10;
    $700 = HEAP32[$699>>2]|0;
    $701 = (($700) + 1)|0;
    HEAP32[$699>>2] = $701;
   }
   $702 = $15;
   $703 = HEAP16[$702>>1]|0;
   $704 = $703&65535;
   $705 = (4 + ($704))|0;
   $706 = $13;
   $707 = HEAP16[$706>>1]|0;
   $708 = $707&65535;
   $709 = (($708) + ($705))|0;
   $710 = $709&65535;
   HEAP16[$706>>1] = $710;
   $711 = $710&65535;
   $7 = $711;
   $778 = $7;
   STACKTOP = sp;return ($778|0);
   break;
  }
  case 36: case 94:  {
   $712 = $13;
   $713 = HEAP16[$712>>1]|0;
   $714 = $713&65535;
   $715 = (($714) + 3)|0;
   $716 = $12;
   $717 = ($715|0)>=($716|0);
   if ($717) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   } else {
    $718 = $13;
    $719 = HEAP16[$718>>1]|0;
    $720 = $719&65535;
    $721 = (($720) + 0)|0;
    $722 = $11;
    $723 = (($722) + ($721<<1)|0);
    HEAP16[$723>>1] = 12;
    $724 = $10;
    $725 = HEAP32[$724>>2]|0;
    $726 = (($725) + 1)|0;
    HEAP32[$724>>2] = $726;
    $727 = $13;
    $728 = HEAP16[$727>>1]|0;
    $729 = $728&65535;
    $730 = (($729) + 3)|0;
    $731 = $730&65535;
    HEAP16[$727>>1] = $731;
    $732 = $731&65535;
    $7 = $732;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  case 92:  {
   $733 = $10;
   $734 = HEAP32[$733>>2]|0;
   $735 = (($734) + 1)|0;
   HEAP32[$733>>2] = $735;
   $736 = $10;
   $737 = HEAP32[$736>>2]|0;
   $738 = $9;
   $739 = ($737|0)>=($738|0);
   if ($739) {
    $7 = 0;
    $778 = $7;
    STACKTOP = sp;return ($778|0);
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $740 = $13;
 $741 = HEAP16[$740>>1]|0;
 $742 = $741&65535;
 $743 = (($742) + 5)|0;
 $744 = $12;
 $745 = ($743|0)>=($744|0);
 if ($745) {
  $7 = 0;
  $778 = $7;
  STACKTOP = sp;return ($778|0);
 } else {
  $746 = $13;
  $747 = HEAP16[$746>>1]|0;
  $748 = $747&65535;
  $749 = (($748) + 0)|0;
  $750 = $11;
  $751 = (($750) + ($749<<1)|0);
  HEAP16[$751>>1] = 10;
  $752 = $13;
  $753 = HEAP16[$752>>1]|0;
  $754 = $753&65535;
  $755 = (($754) + 3)|0;
  $756 = $11;
  $757 = (($756) + ($755<<1)|0);
  HEAP16[$757>>1] = 1;
  $758 = $10;
  $759 = HEAP32[$758>>2]|0;
  $760 = $8;
  $761 = (($760) + ($759<<1)|0);
  $762 = HEAP16[$761>>1]|0;
  $763 = $13;
  $764 = HEAP16[$763>>1]|0;
  $765 = $764&65535;
  $766 = (($765) + 4)|0;
  $767 = $11;
  $768 = (($767) + ($766<<1)|0);
  HEAP16[$768>>1] = $762;
  $769 = $10;
  $770 = HEAP32[$769>>2]|0;
  $771 = (($770) + 1)|0;
  HEAP32[$769>>2] = $771;
  $772 = $13;
  $773 = HEAP16[$772>>1]|0;
  $774 = $773&65535;
  $775 = (($774) + 5)|0;
  $776 = $775&65535;
  HEAP16[$772>>1] = $776;
  $777 = $776&65535;
  $7 = $777;
  $778 = $7;
  STACKTOP = sp;return ($778|0);
 }
 return (0)|0;
}
function __lou_logWidecharBuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $7;
 $14 = ($13*9)|0;
 $15 = (($14) + 3)|0;
 $16 = $5;
 $17 = (_strlen($16)|0);
 $18 = (($15) + ($17))|0;
 $8 = $18;
 $19 = $8;
 $20 = (_malloc($19)|0);
 $9 = $20;
 $21 = $9;
 $10 = $21;
 $12 = 0;
 $11 = 7688;
 $12 = 0;
 while(1) {
  $22 = $12;
  $23 = $5;
  $24 = (_strlen($23)|0);
  $25 = ($22|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $12;
  $27 = $5;
  $28 = (($27) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $12;
  $31 = $9;
  $32 = (($31) + ($30)|0);
  HEAP8[$32>>0] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 $35 = $5;
 $36 = (_strlen($35)|0);
 $37 = $10;
 $38 = (($37) + ($36)|0);
 $10 = $38;
 $12 = 0;
 while(1) {
  $39 = $12;
  $40 = $7;
  $41 = ($39|0)<($40|0);
  $42 = $10;
  if (!($41)) {
   break;
  }
  $43 = $11;
  $44 = $12;
  $45 = $6;
  $46 = (($45) + ($44<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  HEAP32[$vararg_buffer>>2] = $48;
  $49 = (_sprintf($42,$43,$vararg_buffer)|0);
  $50 = $10;
  $51 = (($50) + ($49)|0);
  $10 = $51;
  $52 = $12;
  $53 = (($52) + 1)|0;
  $12 = $53;
 }
 HEAP8[$42>>0] = 126;
 $54 = $10;
 $55 = ((($54)) + 1|0);
 $10 = $55;
 $56 = $10;
 HEAP8[$56>>0] = 32;
 $57 = $10;
 $58 = ((($57)) + 1|0);
 $10 = $58;
 $12 = 0;
 while(1) {
  $59 = $12;
  $60 = $7;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $12;
  $63 = $6;
  $64 = (($63) + ($62<<1)|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = $66 & 65280;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $10;
   HEAP8[$69>>0] = 32;
  } else {
   $70 = $12;
   $71 = $6;
   $72 = (($71) + ($70<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&255;
   $75 = $10;
   HEAP8[$75>>0] = $74;
  }
  $76 = $10;
  $77 = ((($76)) + 1|0);
  $10 = $77;
  $78 = $12;
  $79 = (($78) + 1)|0;
  $12 = $79;
 }
 $80 = $10;
 HEAP8[$80>>0] = 0;
 $81 = $4;
 $82 = $9;
 HEAP32[$vararg_buffer1>>2] = $82;
 __lou_logMessage($81,7685,$vararg_buffer1);
 $83 = $9;
 _free($83);
 STACKTOP = sp;return;
}
function _defaultLogCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $4;
 _lou_logPrint(7685,$vararg_buffer);
 STACKTOP = sp;return;
}
function _lou_registerLogCallback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[198] = 5;
 } else {
  $4 = $1;
  HEAP32[198] = $4;
 }
 STACKTOP = sp;return;
}
function _lou_setLogLevel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[197] = $2;
 STACKTOP = sp;return;
}
function __lou_logMessage($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = HEAP32[197]|0;
 $11 = ($9>>>0)>=($10>>>0);
 $12 = HEAP32[198]|0;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $14 = $3;
 $15 = (_vsnprintf(0,0,$14,$6)|0);
 $5 = $15;
 $16 = $5;
 $17 = (($16) + 1)|0;
 $18 = (_malloc($17)|0);
 $4 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $20 = $4;
 $21 = $5;
 $22 = (($21) + 1)|0;
 $23 = $3;
 (_vsnprintf($20,$22,$23,$6)|0);
 $24 = HEAP32[198]|0;
 $25 = $2;
 $26 = $4;
 FUNCTION_TABLE_vii[$24 & 7]($25,$26);
 $27 = $4;
 _free($27);
 STACKTOP = sp;return;
}
function _lou_logFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[3792]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[3792]|0;
  (_fclose($4)|0);
  HEAP32[3792] = 0;
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP8[32343]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $1;
  (_strcpy(32343,$14)|0);
 }
 $15 = $1;
 $16 = (_fopen($15,7656)|0);
 HEAP32[3792] = $16;
 $17 = HEAP32[3792]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP8[32343]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = (_fopen(32343,7656)|0);
   HEAP32[3792] = $22;
  }
 }
 $23 = HEAP32[3792]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[266]|0;
 $26 = $1;
 HEAP32[$vararg_buffer>>2] = $26;
 (_fprintf($25,7660,$vararg_buffer)|0);
 $27 = HEAP32[266]|0;
 HEAP32[3792] = $27;
 STACKTOP = sp;return;
}
function _lou_logPrint($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[3792]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_fopen(32343,7656)|0);
  HEAP32[3792] = $7;
 }
 $8 = HEAP32[3792]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[266]|0;
  HEAP32[3792] = $10;
 }
 HEAP32[$2>>2] = $varargs;
 $11 = HEAP32[3792]|0;
 $12 = $1;
 (_vfprintf($11,$12,$2)|0);
 $13 = HEAP32[3792]|0;
 (_fprintf($13,7658,$vararg_buffer)|0);
 $14 = HEAP32[3792]|0;
 (_fflush($14)|0);
 STACKTOP = sp;return;
}
function _lou_logEnd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3792]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[3792]|0;
  $3 = HEAP32[266]|0;
  $4 = ($2|0)!=($3|0);
  if ($4) {
   $5 = HEAP32[3792]|0;
   (_fclose($5)|0);
  }
 }
 HEAP32[3792] = 0;
 return;
}
function __lou_stringHash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)!=(0);
 $9 = $4;
 $10 = HEAP16[$9>>1]|0;
 if ($8) {
  $19 = $6;
  $20 = (_toLowercase_374($10,$19)|0);
  $21 = $20&65535;
  $22 = $21 << 8;
  $23 = $4;
  $24 = ((($23)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $6;
  $27 = (_toLowercase_374($25,$26)|0);
  $28 = $27&65535;
  $29 = (($22) + ($28))|0;
  $30 = (($29>>>0) % 1123)&-1;
  $3 = $30;
  $31 = $3;
  STACKTOP = sp;return ($31|0);
 } else {
  $11 = $10&65535;
  $12 = $11 << 8;
  $13 = $4;
  $14 = ((($13)) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($12) + ($16))|0;
  $18 = (($17>>>0) % 1123)&-1;
  $3 = $18;
  $31 = $3;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __lou_charHash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = (($3>>>0) % 1123)&-1;
 STACKTOP = sp;return ($4|0);
}
function __lou_showString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $14 = $6;
 $15 = (($14) + 1)|0;
 $6 = $15;
 $16 = (36715 + ($14)|0);
 HEAP8[$16>>0] = 39;
 $7 = 0;
 L1: while(1) {
  $17 = $7;
  $18 = $4;
  $19 = ($17|0)<($18|0);
  $20 = $6;
  $21 = ($20|0)<(2046);
  $22 = $19 ? $21 : 0;
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $7;
  $24 = $3;
  $25 = (($24) + ($23<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $8 = $26;
  $27 = $5;
  $28 = ($27|0)!=(0);
  if ($28) {
   label = 6;
  } else {
   $29 = $8;
   $30 = (_isASCII($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $8;
    $33 = $32&255;
    $34 = $6;
    $35 = (($34) + 1)|0;
    $6 = $35;
    $36 = (36715 + ($34)|0);
    HEAP8[$36>>0] = $33;
   } else {
    label = 6;
   }
  }
  L7: do {
   if ((label|0) == 6) {
    label = 0;
    $37 = $8;
    $38 = $37&65535;
    HEAP32[$vararg_buffer>>2] = $38;
    $39 = (_sprintf($9,7823,$vararg_buffer)|0);
    $10 = $39;
    $40 = $10;
    switch ($40|0) {
    case 4: case 3: case 2: case 1:  {
     $11 = 120;
     $41 = $10;
     $42 = (4 - ($41))|0;
     $12 = $42;
     break;
    }
    case 5:  {
     $11 = 121;
     $12 = 0;
     break;
    }
    case 8: case 7: case 6:  {
     $11 = 122;
     $43 = $10;
     $44 = (8 - ($43))|0;
     $12 = $44;
     break;
    }
    default: {
     $11 = 63;
     $12 = 0;
    }
    }
    $45 = $6;
    $46 = $12;
    $47 = (($45) + ($46))|0;
    $48 = $10;
    $49 = (($47) + ($48))|0;
    $50 = (($49) + 4)|0;
    $51 = ($50|0)>=(2046);
    if ($51) {
     label = 19;
     break L1;
    }
    $52 = $6;
    $53 = (($52) + 1)|0;
    $6 = $53;
    $54 = (36715 + ($52)|0);
    HEAP8[$54>>0] = 92;
    $55 = $11;
    $56 = $6;
    $57 = (($56) + 1)|0;
    $6 = $57;
    $58 = (36715 + ($56)|0);
    HEAP8[$58>>0] = $55;
    $13 = 0;
    while(1) {
     $59 = $13;
     $60 = $12;
     $61 = ($59|0)<($60|0);
     if (!($61)) {
      break;
     }
     $62 = $6;
     $63 = (($62) + 1)|0;
     $6 = $63;
     $64 = (36715 + ($62)|0);
     HEAP8[$64>>0] = 48;
     $65 = $13;
     $66 = (($65) + 1)|0;
     $13 = $66;
    }
    $13 = 0;
    while(1) {
     $67 = $13;
     $68 = $10;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break L7;
     }
     $70 = $13;
     $71 = (($9) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $6;
     $74 = (($73) + 1)|0;
     $6 = $74;
     $75 = (36715 + ($73)|0);
     HEAP8[$75>>0] = $72;
     $76 = $13;
     $77 = (($76) + 1)|0;
     $13 = $77;
    }
   }
  } while(0);
  $78 = $7;
  $79 = (($78) + 1)|0;
  $7 = $79;
 }
 if ((label|0) == 19) {
  $80 = $6;
  $81 = (($80) + 1)|0;
  $6 = $81;
  $82 = (36715 + ($80)|0);
  HEAP8[$82>>0] = 39;
  $83 = $6;
  $84 = (36715 + ($83)|0);
  HEAP8[$84>>0] = 0;
  STACKTOP = sp;return (36715|0);
 }
 return (0)|0;
}
function __lou_unknownDots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $2 = $5;
 $6 = (36695 + ($4)|0);
 HEAP8[$6>>0] = 92;
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = (936 + ($7<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = $11&65535;
  $13 = $3;
  $14 = (936 + ($13<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 & $15;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $3;
   $19 = (936 + ($18<<3)|0);
   $20 = ((($19)) + 4|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $2;
   $23 = (($22) + 1)|0;
   $2 = $23;
   $24 = (36695 + ($22)|0);
   HEAP8[$24>>0] = $21;
  }
  $25 = $3;
  $26 = (($25) + 1)|0;
  $3 = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $2;
  $30 = (($29) + 1)|0;
  $2 = $30;
  $31 = (36695 + ($29)|0);
  HEAP8[$31>>0] = 48;
 }
 $32 = $2;
 $33 = (($32) + 1)|0;
 $2 = $33;
 $34 = (36695 + ($32)|0);
 HEAP8[$34>>0] = 47;
 $35 = $2;
 $36 = (36695 + ($35)|0);
 HEAP8[$36>>0] = 0;
 STACKTOP = sp;return (36695|0);
}
function __lou_showDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  $10 = $4;
  $11 = ($10|0)<(2047);
  $12 = $9 ? $11 : 0;
  if (!($12)) {
   break;
  }
  $6 = 0;
  while(1) {
   $13 = $6;
   $14 = (936 + ($13<<3)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0);
   $17 = $5;
   $18 = $2;
   $19 = (($18) + ($17<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   if (!($16)) {
    break;
   }
   $22 = $6;
   $23 = (936 + ($22<<3)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21 & $24;
   $26 = ($25|0)!=(0);
   $27 = $4;
   $28 = ($27|0)<(2047);
   $or$cond = $26 & $28;
   if ($or$cond) {
    $29 = $6;
    $30 = (936 + ($29<<3)|0);
    $31 = ((($30)) + 4|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $4;
    $34 = (($33) + 1)|0;
    $4 = $34;
    $35 = (34647 + ($33)|0);
    HEAP8[$35>>0] = $32;
   }
   $36 = $6;
   $37 = (($36) + 1)|0;
   $6 = $37;
  }
  $38 = ($21|0)==(32768);
  $39 = $4;
  $40 = ($39|0)<(2047);
  $or$cond3 = $38 & $40;
  if ($or$cond3) {
   $41 = $4;
   $42 = (($41) + 1)|0;
   $4 = $42;
   $43 = (34647 + ($41)|0);
   HEAP8[$43>>0] = 48;
  }
  $44 = $5;
  $45 = $3;
  $46 = (($45) - 1)|0;
  $47 = ($44|0)!=($46|0);
  $48 = $4;
  $49 = ($48|0)<(2047);
  $or$cond5 = $47 & $49;
  if ($or$cond5) {
   $50 = $4;
   $51 = (($50) + 1)|0;
   $4 = $51;
   $52 = (34647 + ($50)|0);
   HEAP8[$52>>0] = 45;
  }
  $53 = $5;
  $54 = (($53) + 1)|0;
  $5 = $54;
 }
 $55 = $4;
 $56 = (34647 + ($55)|0);
 HEAP8[$56>>0] = 0;
 STACKTOP = sp;return (34647|0);
}
function __lou_showAttributes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $5 = $2;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $3 = 0;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = (824 + ($9<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = (824 + ($19<<3)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)<(0);
  $23 = $22 << 31 >> 31;
  $24 = $15 & $21;
  $25 = $18 & $23;
  $26 = ($24|0)!=(0);
  $27 = ($25|0)!=(0);
  $28 = $26 | $27;
  $29 = $3;
  $30 = ($29|0)<(2047);
  $or$cond = $28 & $30;
  if ($or$cond) {
   $31 = $4;
   $32 = (824 + ($31<<3)|0);
   $33 = ((($32)) + 4|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $3;
   $36 = (($35) + 1)|0;
   $3 = $36;
   $37 = (32599 + ($35)|0);
   HEAP8[$37>>0] = $34;
  }
  $38 = $4;
  $39 = (($38) + 1)|0;
  $4 = $39;
 }
 $40 = $3;
 $41 = (32599 + ($40)|0);
 HEAP8[$41>>0] = 0;
 STACKTOP = sp;return (32599|0);
}
function __lou_outOfMemory() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 __lou_logMessage(50000,7792,$vararg_buffer);
 _exit(3);
 // unreachable;
}
function __lou_isValidMode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3>>>0)<(7);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = (796 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 ^ -1;
  $9 = $1;
  $10 = $9 & $8;
  $1 = $10;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
 }
 $13 = $1;
 $14 = ($13|0)!=(0);
 $15 = $14 ^ 1;
 $16 = $15&1;
 STACKTOP = sp;return ($16|0);
}
function __lou_charToFallbackDots($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = $4&65535;
 $6 = ($5|0)>=(128);
 $$ = $6 ? 63 : $0;
 $1 = $$;
 $2 = -32768;
 $3 = 7696;
 while(1) {
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $1;
  $11 = $10&65535;
  $12 = ($9|0)>($11|0);
  $13 = $3;
  if (!($12)) {
   break;
  }
  $14 = ((($13)) + 4|0);
  $3 = $14;
 }
 $15 = ((($13)) + 1|0);
 $3 = $15;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 ^ -1;
 $19 = $1;
 $20 = $19&65535;
 $21 = $20 & $18;
 $22 = $21&65535;
 $1 = $22;
 $23 = $3;
 $24 = ((($23)) + 1|0);
 $3 = $24;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $1;
 $28 = $27&65535;
 $29 = $28 | $26;
 $30 = $29&65535;
 $1 = $30;
 $31 = $3;
 $32 = ((($31)) + 1|0);
 $3 = $32;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $2;
 $36 = $35&65535;
 $37 = $36 | $34;
 $38 = $37&65535;
 $2 = $38;
 $39 = $1;
 $40 = $39&65535;
 $41 = (7696 + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $2;
 $45 = $44&65535;
 $46 = $45 | $43;
 $47 = $46&65535;
 $2 = $47;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _isASCII($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>=(32);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = ($6|0)<(127);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _toLowercase_374($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (__lou_charHash($5)|0);
 $7 = $4;
 $8 = ((($7)) + 1856|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[3793] = $10;
 while(1) {
  $11 = HEAP32[3793]|0;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = HEAP32[3793]|0;
  $14 = $4;
  $15 = ((($14)) + 21088|0);
  $16 = (($15) + ($13<<3)|0);
  HEAP32[3794] = $16;
  $17 = HEAP32[3794]|0;
  $18 = ((($17)) + 24|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = $3;
  $22 = $21&65535;
  $23 = ($20|0)==($22|0);
  $24 = HEAP32[3794]|0;
  if ($23) {
   label = 4;
   break;
  }
  $27 = HEAP32[$24>>2]|0;
  HEAP32[3793] = $27;
 }
 if ((label|0) == 4) {
  $25 = ((($24)) + 28|0);
  $26 = HEAP16[$25>>1]|0;
  $2 = $26;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $28 = $3;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[3795]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((18|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3795]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 15224;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 7;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[3795]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((19|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_340($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall195(195,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $13 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $7;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $8 = (___syscall220(220,($vararg_buffer|0))|0);
   $9 = ($8|0)<(1);
   if (!($9)) {
    HEAP32[$3>>2] = $8;
    HEAP32[$1>>2] = 0;
    $13 = 0;
    label = 6;
    break;
   }
   switch ($8|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $10 = (0 - ($8))|0;
   $11 = (___errno_location()|0);
   HEAP32[$11>>2] = $10;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $12 = (((($0)) + 24|0) + ($13)|0);
  $14 = ((($12)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + ($13))|0;
  HEAP32[$1>>2] = $17;
  $18 = ((($12)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
  $$1 = $12;
 }
 STACKTOP = sp;return ($$1|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (7826 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 7914;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 7914;
  } else {
   $$01113 = 7914;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=1296; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((9718 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_291($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 10198;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 10198;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 10198;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 10198 : (10200);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (10199);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 10198;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 10198;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 10208;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 10215;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (10216) : (10221);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (10218);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (10182 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(10250,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(10250,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 10234 : 10238;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 10242 : 10246;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 10198;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (10182 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (10198 + ($255)|0);
    $$332 = $or$cond282 ? 10198 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 10198;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_291($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 31]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_291($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 31]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  (___lockfile($0)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((15208)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(15204)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(15204)>>2] = $15;
  }
  ___unlock(((15208)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 7]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[323]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[323]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((15208)|0));
   $$02325 = HEAP32[(15204)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((15208)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 31]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(10252,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 20;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 7;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 8;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 6;
   $37 = HEAP32[(15184)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((15208)|0));
   $40 = HEAP32[(15204)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(15204)>>2] = $7;
   ___unlock(((15208)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(10252,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strcasecmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01718 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$20 = 0;
  } else {
   $4 = $2&255;
   $$01718 = $0;$$019 = $1;$10 = $4;$8 = $2;
   while(1) {
    $5 = HEAP8[$$019>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$019;$20 = $8;
     break L1;
    }
    $9 = ($8<<24>>24)==($5<<24>>24);
    if (!($9)) {
     $11 = (_tolower($10)|0);
     $12 = (_tolower($6)|0);
     $13 = ($11|0)==($12|0);
     if (!($13)) {
      $$0$lcssa = $$019;$20 = $8;
      break L1;
     }
    }
    $14 = ((($$01718)) + 1|0);
    $15 = ((($$019)) + 1|0);
    $16 = HEAP8[$14>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)==(0);
    if ($18) {
     $$0$lcssa = $15;$20 = 0;
     break;
    } else {
     $$01718 = $14;$$019 = $15;$10 = $17;$8 = $16;
    }
   }
  }
 } while(0);
 $19 = $20&255;
 $21 = (_tolower($19)|0);
 $22 = HEAP8[$$0$lcssa>>0]|0;
 $23 = $22&255;
 $24 = (_tolower($23)|0);
 $25 = (($21) - ($24))|0;
 return ($25|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3807]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (15268 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[3807] = $24;
     } else {
      $25 = HEAP32[(15244)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(15236)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (15268 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[3807] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(15244)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(15248)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (15268 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[3807] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(15244)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(15236)>>2] = $84;
     HEAP32[(15248)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(15232)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (15532 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(15244)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (15532 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(15232)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(15244)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(15244)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(15244)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(15248)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (15268 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[3807] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(15244)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(15236)>>2] = $$0191$i;
      HEAP32[(15248)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(15232)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (15532 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (15532 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(15236)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(15244)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (15532 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(15232)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(15244)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(15244)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(15244)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (15268 + ($425<<2)|0);
          $427 = HEAP32[3807]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[3807] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(15244)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (15532 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(15232)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(15244)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(15244)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(15236)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(15248)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(15248)>>2] = $511;
   HEAP32[(15236)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(15236)>>2] = 0;
   HEAP32[(15248)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(15240)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(15240)>>2] = $526;
  $527 = HEAP32[(15252)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(15252)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[3925]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(15708)>>2] = 4096;
  HEAP32[(15704)>>2] = 4096;
  HEAP32[(15712)>>2] = -1;
  HEAP32[(15716)>>2] = -1;
  HEAP32[(15720)>>2] = 0;
  HEAP32[(15672)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[3925] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(15708)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(15668)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(15660)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(15672)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(15252)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (15676);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(15704)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(15660)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(15668)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(15708)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(15672)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(15672)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(15660)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(15660)>>2] = $624;
  $625 = HEAP32[(15664)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(15664)>>2] = $624;
  }
  $627 = HEAP32[(15252)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(15244)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(15244)>>2] = $$748$i;
    }
    HEAP32[(15676)>>2] = $$748$i;
    HEAP32[(15680)>>2] = $$723947$i;
    HEAP32[(15688)>>2] = 0;
    $632 = HEAP32[3925]|0;
    HEAP32[(15264)>>2] = $632;
    HEAP32[(15260)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (15268 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(15252)>>2] = $646;
    HEAP32[(15240)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(15716)>>2]|0;
    HEAP32[(15256)>>2] = $652;
   } else {
    $$024370$i = (15676);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(15240)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(15252)>>2] = $676;
       HEAP32[(15240)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(15716)>>2]|0;
       HEAP32[(15256)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(15244)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(15244)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (15676);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (15676);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(15240)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(15240)>>2] = $724;
        HEAP32[(15252)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(15248)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(15236)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(15236)>>2] = $730;
         HEAP32[(15248)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (15268 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[3807]|0;
            $757 = $756 & $755;
            HEAP32[3807] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (15532 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(15232)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(15232)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(15244)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(15244)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(15244)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (15268 + ($834<<2)|0);
         $836 = HEAP32[3807]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[3807] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(15244)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (15532 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(15232)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(15232)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(15244)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(15244)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (15676);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(15252)>>2] = $944;
    HEAP32[(15240)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(15716)>>2]|0;
    HEAP32[(15256)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(15676)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(15676)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(15676)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(15676)+12>>2]|0;
    HEAP32[(15676)>>2] = $$748$i;
    HEAP32[(15680)>>2] = $$723947$i;
    HEAP32[(15688)>>2] = 0;
    HEAP32[(15684)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (15268 + ($965<<2)|0);
      $967 = HEAP32[3807]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[3807] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(15244)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (15532 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(15232)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(15232)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(15244)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(15244)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(15240)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(15240)>>2] = $1047;
   $1048 = HEAP32[(15252)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(15252)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(15244)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(15248)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(15236)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (15268 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[3807]|0;
     $38 = $37 & $36;
     HEAP32[3807] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (15532 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(15232)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(15232)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(15244)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(15244)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(15244)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(15252)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(15240)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(15240)>>2] = $123;
   HEAP32[(15252)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(15248)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(15248)>>2] = 0;
   HEAP32[(15236)>>2] = 0;
   return;
  }
  $128 = HEAP32[(15248)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(15236)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(15236)>>2] = $131;
   HEAP32[(15248)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (15268 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(15244)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[3807]|0;
     $155 = $154 & $153;
     HEAP32[3807] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(15244)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(15244)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(15244)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (15532 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(15232)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(15232)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(15244)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(15244)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(15244)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(15248)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(15236)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (15268 + ($236<<2)|0);
  $238 = HEAP32[3807]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[3807] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(15244)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (15532 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(15232)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(15232)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(15244)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(15244)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(15260)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(15260)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (15684);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(15260)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(15244)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(15708)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(15252)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(15240)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(15252)>>2] = $40;
  HEAP32[(15240)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(15248)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(15236)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(15236)>>2] = $storemerge1;
  HEAP32[(15248)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (15268 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[3807]|0;
    $93 = $92 & $91;
    HEAP32[3807] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (15532 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(15232)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(15232)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(15244)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(15244)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(15244)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(15244)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(15248)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(15236)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (15268 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[3807]|0;
     $34 = $33 & $32;
     HEAP32[3807] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (15532 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(15232)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(15232)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(15244)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(15244)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(15244)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(15244)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(15252)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(15240)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(15240)>>2] = $118;
   HEAP32[(15252)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(15248)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(15248)>>2] = 0;
   HEAP32[(15236)>>2] = 0;
   return;
  }
  $123 = HEAP32[(15248)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(15236)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(15236)>>2] = $126;
   HEAP32[(15248)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (15268 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[3807]|0;
     $149 = $148 & $147;
     HEAP32[3807] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (15532 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(15232)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(15232)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(15244)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(15244)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(15244)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(15248)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(15236)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (15268 + ($227<<2)|0);
  $229 = HEAP32[3807]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[3807] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(15244)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (15532 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(15232)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(15232)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(15244)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(15244)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}


function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,b0,b0,___stdio_close,b0];
var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,b1,b1,b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,b2,_defaultLogCallback,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,jsCall_iii_0,b3,__lou_defaultTableResolver,b3,b3,b3,b3,b3,b3,_allocStringBuffer,_allocStringBuffer_300,b3,_cmpMatches,_strcmp,b3,_cmpKeys,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,jsCall_vi_0,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_free,b4,b4,_feature_free,b4,_cleanup,_cleanup_340,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];

  return { __lou_getALine: __lou_getALine, __lou_logMessage: __lou_logMessage, __lou_findOpcodeNumber: __lou_findOpcodeNumber, __lou_getDisplayTable: __lou_getDisplayTable, _bitshift64Lshr: _bitshift64Lshr, __lou_findOpcodeName: __lou_findOpcodeName, _lou_getTableInfo: _lou_getTableInfo, __lou_isValidMode: __lou_isValidMode, __lou_getTablePath: __lou_getTablePath, _lou_indexTables: _lou_indexTables, __lou_getDotsForChar: __lou_getDotsForChar, _lou_version: _lou_version, _sbrk: _sbrk, __lou_charHash: __lou_charHash, _lou_logFile: _lou_logFile, _bitshift64Shl: _bitshift64Shl, ___udivmoddi4: ___udivmoddi4, _lou_translate: _lou_translate, _lou_getEmphClasses: _lou_getEmphClasses, __lou_stringHash: __lou_stringHash, _fflush: _fflush, _lou_logPrint: _lou_logPrint, __lou_showString: __lou_showString, __lou_pattern_compile: __lou_pattern_compile, __lou_showDots: __lou_showDots, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, __lou_allocMem: __lou_allocMem, _memcpy: _memcpy, __lou_compileDisplayRule: __lou_compileDisplayRule, _lou_getDataPath: _lou_getDataPath, _lou_translatePrehyphenated: _lou_translatePrehyphenated, _lou_free: _lou_free, __lou_defaultTableResolver: __lou_defaultTableResolver, __lou_showAttributes: __lou_showAttributes, __lou_resolveTable: __lou_resolveTable, __lou_handlePassVariableAction: __lou_handlePassVariableAction, ___uremdi3: ___uremdi3, _lou_getTypeformForEmphClass: _lou_getTypeformForEmphClass, _lou_setDataPath: _lou_setDataPath, _i64Subtract: _i64Subtract, _lou_findTables: _lou_findTables, __lou_getTranslationTable: __lou_getTranslationTable, _lou_registerLogCallback: _lou_registerLogCallback, _lou_backTranslate: _lou_backTranslate, _i64Add: _i64Add, __lou_getCharFromDots: __lou_getCharFromDots, _pthread_self: _pthread_self, __lou_handlePassVariableTest: __lou_handlePassVariableTest, _lou_findTable: _lou_findTable, __lou_compileTranslationRule: __lou_compileTranslationRule, __lou_backTranslate: __lou_backTranslate, __lou_translate: __lou_translate, __lou_pattern_check: __lou_pattern_check, __lou_charToFallbackDots: __lou_charToFallbackDots, _lou_translateString: _lou_translateString, _lou_charSize: _lou_charSize, __lou_getTable: __lou_getTable, __lou_unknownDots: __lou_unknownDots, __lou_extParseDots: __lou_extParseDots, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _lou_checkTable: _lou_checkTable, _lou_backTranslateString: _lou_backTranslateString, __lou_outOfMemory: __lou_outOfMemory, _lou_compileString: _lou_compileString, __lou_logWidecharBuf: __lou_logWidecharBuf, _lou_charToDots: _lou_charToDots, _memmove: _memmove, _lou_listTables: _lou_listTables, _defaultLogCallback: _defaultLogCallback, _malloc: _malloc, __lou_resetPassVariables: __lou_resetPassVariables, _lou_getTable: _lou_getTable, _free: _free, __lou_extParseChars: __lou_extParseChars, _lou_hyphenate: _lou_hyphenate, _lou_registerTableResolver: _lou_registerTableResolver, _lou_readCharFromFile: _lou_readCharFromFile, _lou_dotsToChar: _lou_dotsToChar, _lou_logEnd: _lou_logEnd, _lou_setLogLevel: _lou_setLogLevel, __lou_pattern_reverse: __lou_pattern_reverse, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___lou_getALine = asm["__lou_getALine"]; asm["__lou_getALine"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getALine.apply(null, arguments);
};

var real___lou_logMessage = asm["__lou_logMessage"]; asm["__lou_logMessage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_logMessage.apply(null, arguments);
};

var real___lou_findOpcodeNumber = asm["__lou_findOpcodeNumber"]; asm["__lou_findOpcodeNumber"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_findOpcodeNumber.apply(null, arguments);
};

var real___lou_getDisplayTable = asm["__lou_getDisplayTable"]; asm["__lou_getDisplayTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getDisplayTable.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___lou_getTable = asm["__lou_getTable"]; asm["__lou_getTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTable.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real___lou_isValidMode = asm["__lou_isValidMode"]; asm["__lou_isValidMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_isValidMode.apply(null, arguments);
};

var real__lou_setLogLevel = asm["_lou_setLogLevel"]; asm["_lou_setLogLevel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setLogLevel.apply(null, arguments);
};

var real___lou_getTablePath = asm["__lou_getTablePath"]; asm["__lou_getTablePath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTablePath.apply(null, arguments);
};

var real__lou_indexTables = asm["_lou_indexTables"]; asm["_lou_indexTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_indexTables.apply(null, arguments);
};

var real___lou_getDotsForChar = asm["__lou_getDotsForChar"]; asm["__lou_getDotsForChar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getDotsForChar.apply(null, arguments);
};

var real__lou_version = asm["_lou_version"]; asm["_lou_version"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_version.apply(null, arguments);
};

var real___lou_charHash = asm["__lou_charHash"]; asm["__lou_charHash"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_charHash.apply(null, arguments);
};

var real__lou_logFile = asm["_lou_logFile"]; asm["_lou_logFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logFile.apply(null, arguments);
};

var real__lou_hyphenate = asm["_lou_hyphenate"]; asm["_lou_hyphenate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_hyphenate.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__lou_translate = asm["_lou_translate"]; asm["_lou_translate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translate.apply(null, arguments);
};

var real__lou_getEmphClasses = asm["_lou_getEmphClasses"]; asm["_lou_getEmphClasses"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getEmphClasses.apply(null, arguments);
};

var real___lou_stringHash = asm["__lou_stringHash"]; asm["__lou_stringHash"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_stringHash.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__lou_logPrint = asm["_lou_logPrint"]; asm["_lou_logPrint"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logPrint.apply(null, arguments);
};

var real___lou_showAttributes = asm["__lou_showAttributes"]; asm["__lou_showAttributes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showAttributes.apply(null, arguments);
};

var real___lou_pattern_compile = asm["__lou_pattern_compile"]; asm["__lou_pattern_compile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_compile.apply(null, arguments);
};

var real___lou_showDots = asm["__lou_showDots"]; asm["__lou_showDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showDots.apply(null, arguments);
};

var real___lou_resetPassVariables = asm["__lou_resetPassVariables"]; asm["__lou_resetPassVariables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_resetPassVariables.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real___lou_allocMem = asm["__lou_allocMem"]; asm["__lou_allocMem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_allocMem.apply(null, arguments);
};

var real___lou_compileDisplayRule = asm["__lou_compileDisplayRule"]; asm["__lou_compileDisplayRule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_compileDisplayRule.apply(null, arguments);
};

var real__lou_getDataPath = asm["_lou_getDataPath"]; asm["_lou_getDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getDataPath.apply(null, arguments);
};

var real__lou_translatePrehyphenated = asm["_lou_translatePrehyphenated"]; asm["_lou_translatePrehyphenated"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translatePrehyphenated.apply(null, arguments);
};

var real__lou_free = asm["_lou_free"]; asm["_lou_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_free.apply(null, arguments);
};

var real___lou_defaultTableResolver = asm["__lou_defaultTableResolver"]; asm["__lou_defaultTableResolver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_defaultTableResolver.apply(null, arguments);
};

var real___lou_extParseChars = asm["__lou_extParseChars"]; asm["__lou_extParseChars"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_extParseChars.apply(null, arguments);
};

var real___lou_resolveTable = asm["__lou_resolveTable"]; asm["__lou_resolveTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_resolveTable.apply(null, arguments);
};

var real___lou_handlePassVariableAction = asm["__lou_handlePassVariableAction"]; asm["__lou_handlePassVariableAction"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_handlePassVariableAction.apply(null, arguments);
};

var real__lou_getTypeformForEmphClass = asm["_lou_getTypeformForEmphClass"]; asm["_lou_getTypeformForEmphClass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTypeformForEmphClass.apply(null, arguments);
};

var real__lou_setDataPath = asm["_lou_setDataPath"]; asm["_lou_setDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setDataPath.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__lou_registerLogCallback = asm["_lou_registerLogCallback"]; asm["_lou_registerLogCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_registerLogCallback.apply(null, arguments);
};

var real__lou_backTranslate = asm["_lou_backTranslate"]; asm["_lou_backTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslate.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__lou_registerTableResolver = asm["_lou_registerTableResolver"]; asm["_lou_registerTableResolver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_registerTableResolver.apply(null, arguments);
};

var real___lou_getCharFromDots = asm["__lou_getCharFromDots"]; asm["__lou_getCharFromDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getCharFromDots.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real___lou_handlePassVariableTest = asm["__lou_handlePassVariableTest"]; asm["__lou_handlePassVariableTest"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_handlePassVariableTest.apply(null, arguments);
};

var real__lou_findTable = asm["_lou_findTable"]; asm["_lou_findTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_findTable.apply(null, arguments);
};

var real___lou_compileTranslationRule = asm["__lou_compileTranslationRule"]; asm["__lou_compileTranslationRule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_compileTranslationRule.apply(null, arguments);
};

var real___lou_backTranslate = asm["__lou_backTranslate"]; asm["__lou_backTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_backTranslate.apply(null, arguments);
};

var real___lou_translate = asm["__lou_translate"]; asm["__lou_translate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_translate.apply(null, arguments);
};

var real___lou_pattern_check = asm["__lou_pattern_check"]; asm["__lou_pattern_check"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_check.apply(null, arguments);
};

var real___lou_charToFallbackDots = asm["__lou_charToFallbackDots"]; asm["__lou_charToFallbackDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_charToFallbackDots.apply(null, arguments);
};

var real__lou_translateString = asm["_lou_translateString"]; asm["_lou_translateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translateString.apply(null, arguments);
};

var real__lou_charSize = asm["_lou_charSize"]; asm["_lou_charSize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charSize.apply(null, arguments);
};

var real___lou_findOpcodeName = asm["__lou_findOpcodeName"]; asm["__lou_findOpcodeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_findOpcodeName.apply(null, arguments);
};

var real___lou_unknownDots = asm["__lou_unknownDots"]; asm["__lou_unknownDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_unknownDots.apply(null, arguments);
};

var real___lou_extParseDots = asm["__lou_extParseDots"]; asm["__lou_extParseDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_extParseDots.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__lou_checkTable = asm["_lou_checkTable"]; asm["_lou_checkTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_checkTable.apply(null, arguments);
};

var real___lou_outOfMemory = asm["__lou_outOfMemory"]; asm["__lou_outOfMemory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_outOfMemory.apply(null, arguments);
};

var real__lou_compileString = asm["_lou_compileString"]; asm["_lou_compileString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_compileString.apply(null, arguments);
};

var real___lou_logWidecharBuf = asm["__lou_logWidecharBuf"]; asm["__lou_logWidecharBuf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_logWidecharBuf.apply(null, arguments);
};

var real__lou_charToDots = asm["_lou_charToDots"]; asm["_lou_charToDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charToDots.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__lou_listTables = asm["_lou_listTables"]; asm["_lou_listTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_listTables.apply(null, arguments);
};

var real__defaultLogCallback = asm["_defaultLogCallback"]; asm["_defaultLogCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__defaultLogCallback.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real___lou_showString = asm["__lou_showString"]; asm["__lou_showString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showString.apply(null, arguments);
};

var real__lou_getTable = asm["_lou_getTable"]; asm["_lou_getTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTable.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__lou_findTables = asm["_lou_findTables"]; asm["_lou_findTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_findTables.apply(null, arguments);
};

var real__lou_backTranslateString = asm["_lou_backTranslateString"]; asm["_lou_backTranslateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslateString.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__lou_getTableInfo = asm["_lou_getTableInfo"]; asm["_lou_getTableInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTableInfo.apply(null, arguments);
};

var real__lou_readCharFromFile = asm["_lou_readCharFromFile"]; asm["_lou_readCharFromFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_readCharFromFile.apply(null, arguments);
};

var real__lou_dotsToChar = asm["_lou_dotsToChar"]; asm["_lou_dotsToChar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_dotsToChar.apply(null, arguments);
};

var real__lou_logEnd = asm["_lou_logEnd"]; asm["_lou_logEnd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logEnd.apply(null, arguments);
};

var real___lou_getTranslationTable = asm["__lou_getTranslationTable"]; asm["__lou_getTranslationTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTranslationTable.apply(null, arguments);
};

var real___lou_pattern_reverse = asm["__lou_pattern_reverse"]; asm["__lou_pattern_reverse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_reverse.apply(null, arguments);
};
var __lou_getALine = Module["__lou_getALine"] = asm["__lou_getALine"];
var __lou_logMessage = Module["__lou_logMessage"] = asm["__lou_logMessage"];
var __lou_findOpcodeNumber = Module["__lou_findOpcodeNumber"] = asm["__lou_findOpcodeNumber"];
var __lou_getDisplayTable = Module["__lou_getDisplayTable"] = asm["__lou_getDisplayTable"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __lou_getTable = Module["__lou_getTable"] = asm["__lou_getTable"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var __lou_isValidMode = Module["__lou_isValidMode"] = asm["__lou_isValidMode"];
var _lou_setLogLevel = Module["_lou_setLogLevel"] = asm["_lou_setLogLevel"];
var __lou_getTablePath = Module["__lou_getTablePath"] = asm["__lou_getTablePath"];
var _lou_indexTables = Module["_lou_indexTables"] = asm["_lou_indexTables"];
var __lou_getDotsForChar = Module["__lou_getDotsForChar"] = asm["__lou_getDotsForChar"];
var _lou_version = Module["_lou_version"] = asm["_lou_version"];
var __lou_charHash = Module["__lou_charHash"] = asm["__lou_charHash"];
var _lou_logFile = Module["_lou_logFile"] = asm["_lou_logFile"];
var _lou_hyphenate = Module["_lou_hyphenate"] = asm["_lou_hyphenate"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _lou_translate = Module["_lou_translate"] = asm["_lou_translate"];
var _lou_getEmphClasses = Module["_lou_getEmphClasses"] = asm["_lou_getEmphClasses"];
var __lou_stringHash = Module["__lou_stringHash"] = asm["__lou_stringHash"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _lou_logPrint = Module["_lou_logPrint"] = asm["_lou_logPrint"];
var __lou_showAttributes = Module["__lou_showAttributes"] = asm["__lou_showAttributes"];
var __lou_pattern_compile = Module["__lou_pattern_compile"] = asm["__lou_pattern_compile"];
var __lou_showDots = Module["__lou_showDots"] = asm["__lou_showDots"];
var _memset = Module["_memset"] = asm["_memset"];
var __lou_resetPassVariables = Module["__lou_resetPassVariables"] = asm["__lou_resetPassVariables"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var __lou_allocMem = Module["__lou_allocMem"] = asm["__lou_allocMem"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __lou_compileDisplayRule = Module["__lou_compileDisplayRule"] = asm["__lou_compileDisplayRule"];
var _lou_getDataPath = Module["_lou_getDataPath"] = asm["_lou_getDataPath"];
var _lou_translatePrehyphenated = Module["_lou_translatePrehyphenated"] = asm["_lou_translatePrehyphenated"];
var _lou_free = Module["_lou_free"] = asm["_lou_free"];
var __lou_defaultTableResolver = Module["__lou_defaultTableResolver"] = asm["__lou_defaultTableResolver"];
var __lou_extParseChars = Module["__lou_extParseChars"] = asm["__lou_extParseChars"];
var __lou_resolveTable = Module["__lou_resolveTable"] = asm["__lou_resolveTable"];
var __lou_handlePassVariableAction = Module["__lou_handlePassVariableAction"] = asm["__lou_handlePassVariableAction"];
var _lou_getTypeformForEmphClass = Module["_lou_getTypeformForEmphClass"] = asm["_lou_getTypeformForEmphClass"];
var _lou_setDataPath = Module["_lou_setDataPath"] = asm["_lou_setDataPath"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _lou_registerLogCallback = Module["_lou_registerLogCallback"] = asm["_lou_registerLogCallback"];
var _lou_backTranslate = Module["_lou_backTranslate"] = asm["_lou_backTranslate"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _lou_registerTableResolver = Module["_lou_registerTableResolver"] = asm["_lou_registerTableResolver"];
var __lou_getCharFromDots = Module["__lou_getCharFromDots"] = asm["__lou_getCharFromDots"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var __lou_handlePassVariableTest = Module["__lou_handlePassVariableTest"] = asm["__lou_handlePassVariableTest"];
var _lou_findTable = Module["_lou_findTable"] = asm["_lou_findTable"];
var __lou_compileTranslationRule = Module["__lou_compileTranslationRule"] = asm["__lou_compileTranslationRule"];
var __lou_backTranslate = Module["__lou_backTranslate"] = asm["__lou_backTranslate"];
var __lou_translate = Module["__lou_translate"] = asm["__lou_translate"];
var __lou_pattern_check = Module["__lou_pattern_check"] = asm["__lou_pattern_check"];
var __lou_charToFallbackDots = Module["__lou_charToFallbackDots"] = asm["__lou_charToFallbackDots"];
var _lou_translateString = Module["_lou_translateString"] = asm["_lou_translateString"];
var _lou_charSize = Module["_lou_charSize"] = asm["_lou_charSize"];
var __lou_findOpcodeName = Module["__lou_findOpcodeName"] = asm["__lou_findOpcodeName"];
var __lou_unknownDots = Module["__lou_unknownDots"] = asm["__lou_unknownDots"];
var __lou_extParseDots = Module["__lou_extParseDots"] = asm["__lou_extParseDots"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _lou_checkTable = Module["_lou_checkTable"] = asm["_lou_checkTable"];
var __lou_outOfMemory = Module["__lou_outOfMemory"] = asm["__lou_outOfMemory"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _lou_compileString = Module["_lou_compileString"] = asm["_lou_compileString"];
var __lou_logWidecharBuf = Module["__lou_logWidecharBuf"] = asm["__lou_logWidecharBuf"];
var _lou_charToDots = Module["_lou_charToDots"] = asm["_lou_charToDots"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _lou_listTables = Module["_lou_listTables"] = asm["_lou_listTables"];
var _defaultLogCallback = Module["_defaultLogCallback"] = asm["_defaultLogCallback"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __lou_showString = Module["__lou_showString"] = asm["__lou_showString"];
var _lou_getTable = Module["_lou_getTable"] = asm["_lou_getTable"];
var _free = Module["_free"] = asm["_free"];
var _lou_findTables = Module["_lou_findTables"] = asm["_lou_findTables"];
var _lou_backTranslateString = Module["_lou_backTranslateString"] = asm["_lou_backTranslateString"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _lou_getTableInfo = Module["_lou_getTableInfo"] = asm["_lou_getTableInfo"];
var _lou_readCharFromFile = Module["_lou_readCharFromFile"] = asm["_lou_readCharFromFile"];
var _lou_dotsToChar = Module["_lou_dotsToChar"] = asm["_lou_dotsToChar"];
var _lou_logEnd = Module["_lou_logEnd"] = asm["_lou_logEnd"];
var __lou_getTranslationTable = Module["__lou_getTranslationTable"] = asm["__lou_getTranslationTable"];
var __lou_pattern_reverse = Module["__lou_pattern_reverse"] = asm["__lou_pattern_reverse"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

Module["FS"] = FS;



function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



if(this) {
	this.liblouisBuilds = this.liblouisBuilds || {};

	var version;
	try {
		version = this.ccall('lou_version', 'string', [], []);
	} catch(e) {
		version = "unknown";
	}

	this.liblouisBuilds[version] = this.liblouisBuilds[version] || [];
	this.liblouisBuilds[version].push(Module);
}


  return liblouisBuild;
};
liblouisBuild = liblouisBuild();
